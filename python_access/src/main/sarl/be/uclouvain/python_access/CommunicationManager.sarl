/** 
 * 
 */
package be.uclouvain.python_access


import com.hazelcast.config.Config
import com.hazelcast.config.SerializationConfig
import com.hazelcast.core.Hazelcast
import com.hazelcast.core.HazelcastInstance
import com.hazelcast.topic.ITopic
import com.hazelcast.topic.Message
import com.hazelcast.topic.MessageListener
import be.uclouvain.python_access.messages.BaseMessage
import be.uclouvain.python_access.messages.RequestMessage
import be.uclouvain.python_access.messages.ActionMessage
import be.uclouvain.python_access.messages.BBoxes2DMessage
import be.uclouvain.python_access.messages.BBoxes2DTrackMessage
import be.uclouvain.python_access.messages.EvaluationMessage
import be.uclouvain.python_access.messages.DisplayMessage
import java.util.UUID

class CommunicationManager {
	static var instance : CommunicationManager

	var hzInstance : HazelcastInstance

	var subscribtionTopic = <String, ITopic<BaseMessage>>newHashMap

	static def getInstance() : CommunicationManager {
		synchronized (typeof(CommunicationManager)) {
			if (instance === null) {
				instance = new CommunicationManager()
			}
			return instance
		}
	}

	private new {
		createHzInstance()
	}

	private def createHzInstance() {
		var hzConfig = new Config
		var serialConfig = new SerializationConfig()
		serialConfig.addDataSerializableFactory(
			1,
			[ id |
				if (id == 10)
					return new RequestMessage
				else if (id == 11)
					return new ActionMessage
				else if (id == 21)
					return new BBoxes2DMessage
				else if (id == 211)
					return new BBoxes2DTrackMessage
				else if (id == 30)
					return new EvaluationMessage
				else if (id==91) return new DisplayMessage else return null
			]
		)
		hzConfig.serializationConfig = serialConfig
		hzConfig.setProperty("hazelcast.rest.enabled", "true")
		//hzConfig.managementCenterConfig.setEnabled(true);
		//hzConfig.managementCenterConfig.setUrl("http://localhost:8080/hazelcast-mancenter/");
		this.hzInstance = Hazelcast.newHazelcastInstance(hzConfig)
	}

	def subscribeTopic(topicName : String, observer : PythonTwinAccess) {
		val topic = this.hzInstance.getTopic(topicName)
		val subscribtionID : UUID= topic.addMessageListener(new MessageListener<BaseMessage>() {
			def onMessage(m : Message<BaseMessage>) {
				observer.update(m.messageObject)
			}
		})
		subscribtionTopic.put(subscribtionID.toString, topic)
		return subscribtionID
	}

	def unsubscribeTopic(subscribtionID : String) {
		val topic = subscribtionTopic.remove(subscribtionID)
		assert topic !== null
		topic.removeMessageListener(UUID.fromString(subscribtionID))
	}

	def publishMessage(topicSub : String, message : BaseMessage) {
		val topic = subscribtionTopic.get(topicSub)
		assert topic !== null, "topic is null"
		assert message!== null, "Message is null"
		topic.publish(message)
	}

}
