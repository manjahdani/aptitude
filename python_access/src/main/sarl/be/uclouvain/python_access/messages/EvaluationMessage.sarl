
package be.uclouvain.python_access.messages 

import com.hazelcast.nio.ObjectDataInput
import java.io.IOException
import com.hazelcast.nio.ObjectDataOutput
import org.eclipse.xtend.lib.annotations.Accessors


/** 
 * @author samelson
 * 
 */
class EvaluationMessage extends BaseMessage {

	@Accessors(#[PUBLIC_GETTER, PUBLIC_SETTER]) var requestID : String
	@Accessors(#[PUBLIC_GETTER, PUBLIC_SETTER]) var predictions : String
	@Accessors(#[PUBLIC_GETTER, PUBLIC_SETTER]) var gts : String
	@Accessors(#[PUBLIC_GETTER, PUBLIC_SETTER]) var maxFrame : int
	
	/* HOTA Metrics
	 */
	@Accessors(#[PUBLIC_GETTER, PUBLIC_SETTER]) var HOTA : double
	@Accessors(#[PUBLIC_GETTER, PUBLIC_SETTER]) var DetA : double
	@Accessors(#[PUBLIC_GETTER, PUBLIC_SETTER]) var AssA : double
	@Accessors(#[PUBLIC_GETTER, PUBLIC_SETTER]) var DetRe : double
	@Accessors(#[PUBLIC_GETTER, PUBLIC_SETTER]) var DetPr : double
	@Accessors(#[PUBLIC_GETTER, PUBLIC_SETTER]) var AssRe : double
	@Accessors(#[PUBLIC_GETTER, PUBLIC_SETTER]) var AssPr : double
	@Accessors(#[PUBLIC_GETTER, PUBLIC_SETTER]) var LocA : double
	@Accessors(#[PUBLIC_GETTER, PUBLIC_SETTER]) var HOTA_TP : double
	@Accessors(#[PUBLIC_GETTER, PUBLIC_SETTER]) var HOTA_FN : double
	@Accessors(#[PUBLIC_GETTER, PUBLIC_SETTER]) var HOTA_FP : double
	@Accessors(#[PUBLIC_GETTER, PUBLIC_SETTER]) var HOTA_Array : double[]
	@Accessors(#[PUBLIC_GETTER, PUBLIC_SETTER]) var DetA_Array : double[]
	@Accessors(#[PUBLIC_GETTER, PUBLIC_SETTER]) var AssA_Array : double[]
	@Accessors(#[PUBLIC_GETTER, PUBLIC_SETTER]) var DetRe_Array : double[]
	@Accessors(#[PUBLIC_GETTER, PUBLIC_SETTER]) var DetPr_Array : double[]
	@Accessors(#[PUBLIC_GETTER, PUBLIC_SETTER]) var AssRe_Array : double[]
	@Accessors(#[PUBLIC_GETTER, PUBLIC_SETTER]) var AssPr_Array : double[]
	@Accessors(#[PUBLIC_GETTER, PUBLIC_SETTER]) var LocA_Array : double[]
	@Accessors(#[PUBLIC_GETTER, PUBLIC_SETTER]) var HOTA_TP_Array : double[]
	@Accessors(#[PUBLIC_GETTER, PUBLIC_SETTER]) var HOTA_FN_Array : double[]
	@Accessors(#[PUBLIC_GETTER, PUBLIC_SETTER]) var HOTA_FP_Array : double[]

	/* CLEAR - MOT Metrics
	 */
	@Accessors(#[PUBLIC_GETTER, PUBLIC_SETTER]) var MOTA : double
	@Accessors(#[PUBLIC_GETTER, PUBLIC_SETTER]) var MOTP : double
	@Accessors(#[PUBLIC_GETTER, PUBLIC_SETTER]) var MODA : double
	@Accessors(#[PUBLIC_GETTER, PUBLIC_SETTER]) var CLR_Re : double
	@Accessors(#[PUBLIC_GETTER, PUBLIC_SETTER]) var CLR_Pr : double
	@Accessors(#[PUBLIC_GETTER, PUBLIC_SETTER]) var CLR_F1 : double
	@Accessors(#[PUBLIC_GETTER, PUBLIC_SETTER]) var MTR : double
	@Accessors(#[PUBLIC_GETTER, PUBLIC_SETTER]) var PTR : double
	@Accessors(#[PUBLIC_GETTER, PUBLIC_SETTER]) var MLR : double
	@Accessors(#[PUBLIC_GETTER, PUBLIC_SETTER]) var sMOTA : double
	@Accessors(#[PUBLIC_GETTER, PUBLIC_SETTER]) var FP_perFrame : double
	@Accessors(#[PUBLIC_GETTER, PUBLIC_SETTER]) var MOTAL : double
	@Accessors(#[PUBLIC_GETTER, PUBLIC_SETTER]) var MOTP_sum : double
	@Accessors(#[PUBLIC_GETTER, PUBLIC_SETTER]) var CLR_TP : int
	@Accessors(#[PUBLIC_GETTER, PUBLIC_SETTER]) var CLR_FN : int
	@Accessors(#[PUBLIC_GETTER, PUBLIC_SETTER]) var CLR_FP : int
	@Accessors(#[PUBLIC_GETTER, PUBLIC_SETTER]) var IDSW : int
	@Accessors(#[PUBLIC_GETTER, PUBLIC_SETTER]) var mostlyTracked : int
	@Accessors(#[PUBLIC_GETTER, PUBLIC_SETTER]) var partlyTracked : int
	@Accessors(#[PUBLIC_GETTER, PUBLIC_SETTER]) var mostlyLost : int
	@Accessors(#[PUBLIC_GETTER, PUBLIC_SETTER]) var fragmentations : int

	/* Identity Metrics
	 */
	@Accessors(#[PUBLIC_GETTER, PUBLIC_SETTER]) var IDF1 : double
	@Accessors(#[PUBLIC_GETTER, PUBLIC_SETTER]) var IDR : double
	@Accessors(#[PUBLIC_GETTER, PUBLIC_SETTER]) var IDP : double
	@Accessors(#[PUBLIC_GETTER, PUBLIC_SETTER]) var IDTP : int
	@Accessors(#[PUBLIC_GETTER, PUBLIC_SETTER]) var IDFN : int
	@Accessors(#[PUBLIC_GETTER, PUBLIC_SETTER]) var IDFP : int

	/* VACE Metrics
	 */
	@Accessors(#[PUBLIC_GETTER, PUBLIC_SETTER]) var STDA : double
	@Accessors(#[PUBLIC_GETTER, PUBLIC_SETTER]) var VACE_IDs : int
	@Accessors(#[PUBLIC_GETTER, PUBLIC_SETTER]) var VACE_GT_IDs : int
	@Accessors(#[PUBLIC_GETTER, PUBLIC_SETTER]) var FDA : double
	@Accessors(#[PUBLIC_GETTER, PUBLIC_SETTER]) var numNonEmptyTimesteps : int
	@Accessors(#[PUBLIC_GETTER, PUBLIC_SETTER]) var ATA : double
	@Accessors(#[PUBLIC_GETTER, PUBLIC_SETTER]) var SFDA : double
	
	/* Count Metrics
	 */
	@Accessors(#[PUBLIC_GETTER, PUBLIC_SETTER]) var count_dets : int
	@Accessors(#[PUBLIC_GETTER, PUBLIC_SETTER]) var count_GT_dets : int
	@Accessors(#[PUBLIC_GETTER, PUBLIC_SETTER]) var count_IDs : int
	@Accessors(#[PUBLIC_GETTER, PUBLIC_SETTER]) var count_GT_IDs : int
	@Accessors(#[PUBLIC_GETTER, PUBLIC_SETTER]) var count_frames : int

	val FACTORY_ID = 1
	val CLASS_ID = 30

	def getFactoryId : int {
		FACTORY_ID
	}

	def getId : int {
		CLASS_ID
	}

	def readData(odi : ObjectDataInput) throws IOException {
		super.readData(odi)

		this.requestID = odi.readUTF()
		this.predictions = odi.readUTF()
		this.gts = odi.readUTF()
		this.maxFrame = odi.readInt()
		
		this.HOTA = odi.readDouble()
		this.DetA = odi.readDouble()
		this.AssA = odi.readDouble()
		this.DetRe = odi.readDouble()
		this.DetPr = odi.readDouble()
		this.AssRe = odi.readDouble()
		this.AssPr = odi.readDouble()
		this.LocA = odi.readDouble()
		this.HOTA_TP = odi.readDouble()
		this.HOTA_FP = odi.readDouble()
		this.HOTA_FN = odi.readDouble()
		this.HOTA_Array = odi.readDoubleArray()
		this.DetA_Array = odi.readDoubleArray()
		this.AssA_Array = odi.readDoubleArray()
		this.DetRe_Array = odi.readDoubleArray()
		this.DetPr_Array = odi.readDoubleArray()
		this.AssRe_Array = odi.readDoubleArray()
		this.AssPr_Array = odi.readDoubleArray()
		this.LocA_Array = odi.readDoubleArray()
		this.HOTA_TP_Array = odi.readDoubleArray()
		this.HOTA_FN_Array = odi.readDoubleArray()
		this.HOTA_FP_Array = odi.readDoubleArray()

		this.MOTA = odi.readDouble()
		this.MOTP = odi.readDouble()
		this.MODA = odi.readDouble()
		this.CLR_Re = odi.readDouble()
		this.CLR_Pr = odi.readDouble()
		this.CLR_F1 = odi.readDouble()
		this.MTR = odi.readDouble()
		this.PTR = odi.readDouble()
		this.MLR = odi.readDouble()
		this.sMOTA = odi.readDouble()
		this.FP_perFrame = odi.readDouble()
		this.MOTAL = odi.readDouble()
		this.MOTP_sum = odi.readDouble()
		this.CLR_TP = odi.readInt()
		this.CLR_FN = odi.readInt()
		this.CLR_FP = odi.readInt()
		this.IDSW = odi.readInt()
		this.mostlyTracked = odi.readInt()
		this.partlyTracked = odi.readInt()
		this.mostlyLost = odi.readInt()
		this.fragmentations = odi.readInt()

		this.IDF1 = odi.readDouble()
		this.IDR = odi.readDouble()
		this.IDP = odi.readDouble()
		this.IDTP = odi.readInt()
		this.IDFN = odi.readInt()
		this.IDFP = odi.readInt()

		this.STDA = odi.readDouble()
		this.VACE_IDs = odi.readInt()
		this.VACE_GT_IDs = odi.readInt()
		this.FDA = odi.readDouble()
		this.numNonEmptyTimesteps = odi.readInt()
		this.ATA = odi.readDouble()
		this.SFDA = odi.readDouble()

		this.count_dets = odi.readInt()
		this.count_GT_dets = odi.readInt()
		this.count_IDs = odi.readInt()
		this.count_GT_IDs = odi.readInt()
		this.count_frames = odi.readInt()
	}

	def writeData(odo : ObjectDataOutput) throws IOException {
		super.writeData(odo)

		odo.writeUTF(requestID)
		odo.writeUTF(predictions)
		odo.writeUTF(gts)
		odo.writeInt(maxFrame)
		
		odo.writeDouble(HOTA)
		odo.writeDouble(DetA)
		odo.writeDouble(AssA)
		odo.writeDouble(DetRe)
		odo.writeDouble(DetPr)
		odo.writeDouble(AssRe)
		odo.writeDouble(AssPr)
		odo.writeDouble(LocA)
		odo.writeDouble(HOTA_TP)
		odo.writeDouble(HOTA_FN)
		odo.writeDouble(HOTA_FP)
		odo.writeDoubleArray(HOTA_Array)
		odo.writeDoubleArray(DetA_Array)
		odo.writeDoubleArray(AssA_Array)
		odo.writeDoubleArray(DetRe_Array)
		odo.writeDoubleArray(DetPr_Array)
		odo.writeDoubleArray(AssRe_Array)
		odo.writeDoubleArray(AssPr_Array)
		odo.writeDoubleArray(LocA_Array)
		odo.writeDoubleArray(HOTA_TP_Array)
		odo.writeDoubleArray(HOTA_FN_Array)
		odo.writeDoubleArray(HOTA_FP_Array)

		odo.writeDouble(MOTA)
		odo.writeDouble(MOTP)
		odo.writeDouble(MODA)
		odo.writeDouble(CLR_Re)
		odo.writeDouble(CLR_Pr)
		odo.writeDouble(CLR_F1)
		odo.writeDouble(MTR)
		odo.writeDouble(PTR)
		odo.writeDouble(MLR)
		odo.writeDouble(sMOTA)
		odo.writeDouble(FP_perFrame)
		odo.writeDouble(MOTAL)
		odo.writeDouble(MOTP_sum)
		odo.writeDouble(CLR_TP)
		odo.writeDouble(CLR_FN)
		odo.writeDouble(CLR_FP)
		odo.writeDouble(IDSW)
		odo.writeDouble(mostlyTracked)
		odo.writeDouble(partlyTracked)
		odo.writeDouble(mostlyLost)
		odo.writeDouble(fragmentations)

		odo.writeDouble(IDF1)
		odo.writeDouble(IDR)
		odo.writeDouble(IDP)
		odo.writeInt(IDTP)
		odo.writeInt(IDFN)
		odo.writeInt(IDFP)

		odo.writeDouble(STDA)
		odo.writeInt(VACE_IDs)
		odo.writeInt(VACE_GT_IDs)
		odo.writeDouble(FDA)
		odo.writeInt(numNonEmptyTimesteps)
		odo.writeDouble(ATA)
		odo.writeDouble(SFDA)

		odo.writeInt(count_dets)
		odo.writeInt(count_GT_dets)
		odo.writeInt(count_IDs)
		odo.writeInt(count_GT_IDs)
		odo.writeInt(count_frames)
		
	}

}
