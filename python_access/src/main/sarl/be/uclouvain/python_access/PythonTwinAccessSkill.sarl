/** 
 * 
 */
package be.uclouvain.python_access

import be.uclouvain.python_access.messages.ActionMessage
import be.uclouvain.python_access.messages.RequestMessage
import io.sarl.core.AgentTask
import io.sarl.core.Schedules
import java.util.UUID
import org.json.simple.JSONObject
import io.sarl.core.Logging
import org.json.simple.parser.JSONParser
import java.io.FileReader
import java.util.HashMap

/** 
 * @TODO: write a description
 * 
 * @author $Author: manjahdani$
 * @version $0.0.1$
 * @date $31/03/2021$
 * @mavengroupid $be.uclouvain.aptitude$
 * @mavenartifactid $surveillance$
 * 
 */
abstract skill PythonTwinAccess implements PythonTwinAccessCapacity {
	uses Schedules, Logging

	protected var topicRequestSub : UUID
	protected var topicSignalAcquisition : UUID

	protected var pendingRequestID : UUID
	protected var requestTask : AgentTask

	protected var parser = new JSONParser();
	protected var jsonConfig : JSONObject;
	protected var partnerName : String;
	val config : String
	val platformName : String
	val computation_resources_location : String

	new (config : String, platformName : String, computation_resources_location : String) {
		assert config !== null, "config is null";
		assert platformName !== null, "platform is null";
		assert computation_resources_location !== null, "computation resources location null"
		this.config = config
		this.platformName = platformName
		this.computation_resources_location = computation_resources_location

	}

	@SuppressWarnings("potential_field_synchronization_problem")
	def install {
		topicRequestSub = CommunicationManager.instance.subscribeTopic("request", this)
		
		connectToPython(config,platformName,computation_resources_location)
	}

	def connectToPython(config : String, platformName : String, computation_resources_location : String) {

		var configPath = config
		var jsonConfigtmp = parser.parse(new FileReader(configPath)) as JSONObject;

		// Adding the computation ressources location
		
		
		var ressourceslocation = new JSONObject()
		ressourceslocation.put("client_id", computation_resources_location)
		jsonConfigtmp.put("Setup", ressourceslocation)

		// Adding the video path
		val video = new JSONObject()
		video.put("path", "./pytb-agent/videos/".concat(platformName).concat("/vdo.avi"))
		// Adding the roi path
		val pathRoi = new JSONObject()
		pathRoi.put("path", "./pytb-agent/videos/".concat(platformName).concat("/roi.jpg"))
		//val a = jsonConfigtmp.get("Preproc") as HashMap<String, HashMap<String, String>>
		//a.put("roi", pathRoi)
		val max_outside_roi_thresh = 0.1
		pathRoi.put("max_outside_roi_thresh", max_outside_roi_thresh)
		val a = jsonConfigtmp.get("Postproc") as HashMap<String, HashMap<String, String>>
	    a.put("roi", pathRoi)
	   
		
		// Final concatenation
		jsonConfigtmp.put("Video", video)
		jsonConfig = jsonConfigtmp
		//info("Activating access" + jsonConfig)
		activateAccess(jsonConfig)
	}


	def prepareUninstallation {
		// Function invoked when the skill is preparing to be uninstalled from the owner, but before the owner is destroyed.
		// You should put all the resource release statements that should be executed before the owner is destroyed.
		// info("Preparing the uninstallation of the skill")
	}

	@SuppressWarnings("potential_field_synchronization_problem")
	def uninstall {
		if (topicRequestSub !== null) {
			CommunicationManager.instance.unsubscribeTopic(topicRequestSub.toString)
			topicRequestSub = null
		}
		if (topicSignalAcquisition !== null) {
			CommunicationManager.instance.unsubscribeTopic(topicSignalAcquisition.toString)
			topicSignalAcquisition = null
		}
	}

	@SuppressWarnings("potential_field_synchronization_problem")
	def activateAccess(jsonConfig : JSONObject) {
		this.pendingRequestID = UUID.randomUUID
		this.requestTask = every(1500) [
			var requestMessage = new RequestMessage()
			requestMessage.requestID = this.pendingRequestID
			
			requestMessage.agentID = this.ID
			requestMessage.jsonConfig = jsonConfig.toString
			CommunicationManager.instance.publishMessage(topicRequestSub.toString, requestMessage)
		]
	}

	@SuppressWarnings("potential_field_synchronization_problem")
	def updateStreamAccess(actionID : int) {
		//info("Updating Stream Access" + actionID)
		updateStreamAccess(actionID, -1)
	}

	def updateStreamAccess(actionID : int, newFrameNumber : int) {
		// info("I am sending the action: " + actionID)
		var actionMessage = new ActionMessage() // @TODO : Strange way of doing it
		actionMessage.actionID = actionID
		if (newFrameNumber != -1) {
			actionMessage.newFrameNumber = newFrameNumber
		}
		CommunicationManager.instance.publishMessage(topicSignalAcquisition.toString, actionMessage)
	}
}
 
 
 

