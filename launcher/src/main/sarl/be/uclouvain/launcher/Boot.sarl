package be.uclouvain.launcher

import UDPMessages.MessageDeserializer
import UDPMessages.UDP_Message_Base
import be.uclouvain.aptitude.surveillance.CommitSuicide
import be.uclouvain.aptitude.surveillance.Paraddis
import be.uclouvain.aptitude.surveillance.TOLDAgent
import be.uclouvain.aptitude.surveillance.TOLDConfig
import be.uclouvain.aptitude.surveillance.algorithm.counter.Counter
import be.uclouvain.aptitude.surveillance.algorithm.detector.Detector
import be.uclouvain.aptitude.surveillance.algorithm.tracker.Tracker
import be.uclouvain.aptitude.surveillance.platform.PlatformAgent
import be.uclouvain.aptitude.surveillance.user.HolonicUserConfig
import be.uclouvain.aptitude.surveillance.user.User
import be.uclouvain.organisation.platform.util.PlatformConfig
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import io.sarl.core.Schedules
import io.sarl.lang.core.Agent
import java.net.DatagramPacket
import java.net.DatagramSocket
import java.util.HashMap
import javafx.application.Application

/** 
 * 
 * 
 * @author $Author: manjahdani$
 * @version $0.0.1$
 * @date $31/03/2021$
 * @mavengroupid $be.uclouvain.aptitude$
 * @mavenartifactid $organisation$
 */
agent Boot extends Paraddis {

	uses Lifecycle, Schedules, DefaultContextInteractions, Logging

	// val junctionList = "MacqWoolridge"
	// @Parameters
	
	val INITIAL_CAMERAS = newArrayList("S04C035")//, "S04C035") // "MOT17-04", "MOT17-02")
	val AVAILABLE_RESSOURCES = newArrayList("1000")//, "1000")

	val client : DatagramSocket = new DatagramSocket(65000) // A client to listen requests
	// val clientSender = new UDPSender() // homeMade client to send UDP message
	val INIT_TASKS = new HashMap<String, Class<? extends Agent>>
	

	
	on Initialize {
		loggingName = this.ID + "-Boot"
		// info("System started")
		
		INIT_TASKS.put("DETECTOR", Detector)
		INIT_TASKS.put("TRACKER", Tracker)
		INIT_TASKS.put("COUNTER", Counter)
		setAgentsReady()
		enableInputStream()
		task("Application-Launcher").execute[Application::launch(GUI, " ")]
	}
	

	def setAgentsReady {
					// for (wc : subWorldConfig) {
		// WorldHolon.addSubWorld(wc)
		// }
		// info("Setting the agents")
		var PlatformHolonConfig = new PlatformConfig(0, 5, "LLN")
		for (c : INITIAL_CAMERAS) {
			PlatformHolonConfig.addSubPlatform(new PlatformConfig(1, 100, c))
		}

		spawn(TOLDAgent, new TOLDConfig(0,"LLN", null, INIT_TASKS))
		spawn(PlatformAgent, PlatformHolonConfig, AVAILABLE_RESSOURCES)
		spawn(User, new HolonicUserConfig(0, "UserAccessManager", INITIAL_CAMERAS))
		// StartSimulation
	}

	def MessageAnalysis(msg : UDP_Message_Base, adrss : String) {

		switch (msg.method) {
			case "stopSimulation": {
				disable()
				emit(new CommitSuicide)
			}
			default: {
				info("Unknown message received by boot agent : " + msg.method)
			}
		}
	}

	def synchronized enableInputStream {
		var parser = new MessageDeserializer();
		val Enable_Server = task("Enable_Server")
		Enable_Server.execute([
			while (!isCanceled(Enable_Server) && !client.isClosed) {
				var buffer = newByteArrayOfSize(8192);
				var packet = new DatagramPacket(buffer, buffer.length);
				client.receive(packet);
				var message = new String(packet.getData(), packet.getOffset(), packet.getLength());
				var data : UDP_Message_Base = parser.Deserialize(message);
				if (data !== null) {
					MessageAnalysis(data, (packet.getAddress()).getHostAddress)
				} else {
					info("received NULL" + data)
				}
				packet.setLength(buffer.length);
			}
		])
	}

	def synchronized disable() {
		this.client.close()
		task("Enable_Server").cancel
		task("Application-Launcher").cancel
	}
}
