package be.uclouvain.launcher


import be.uclouvain.aptitude.surveillance.CommitSuicide
import be.uclouvain.aptitude.surveillance.Paraddis
import be.uclouvain.aptitude.surveillance.TOLDAgent
import be.uclouvain.aptitude.surveillance.TOLDConfig
import be.uclouvain.aptitude.surveillance.algorithm.counter.Counter
import be.uclouvain.aptitude.surveillance.algorithm.detector.Detector
import be.uclouvain.aptitude.surveillance.algorithm.tracker.Tracker
import be.uclouvain.aptitude.surveillance.platform.PlatformAgent
import be.uclouvain.aptitude.surveillance.platform.util.Camera
import be.uclouvain.aptitude.surveillance.platform.util.CameraPlatformConfig
import be.uclouvain.aptitude.surveillance.user.HolonicUserConfig
import be.uclouvain.aptitude.surveillance.user.User
import be.uclouvain.organisation.platform.util.PlatformConfig
import io.sarl.lang.core.Agent
import java.net.DatagramPacket
import java.net.DatagramSocket
import java.util.ArrayList
import java.util.HashMap
import javafx.application.Application
import io.sarl.api.core.Initialize
import io.sarl.api.core.Schedules
import io.sarl.api.core.Lifecycle
import io.sarl.api.core.DefaultContextInteractions
import io.sarl.api.core.Logging
import UDPMessages.UDP_Message_Base
import UDPMessages.MessageDeserializer

/** 
 * 
 * 
 * @author $Author: manjahdani$
 * @version $0.0.1$
 * @date $31/03/2021$
 * @mavengroupid $be.uclouvain.aptitude$
 * @mavenartifactid $organisation$
 */
agent Boot extends Paraddis {

	uses Lifecycle, Schedules, DefaultContextInteractions, Logging

	// val junctionList = "MacqWoolridge"
	// @Parameters
	val initialCameraConfigs = newArrayList(
		new Camera("S02C006", 1920.0, 1080.0, 3000)
	)

	val availableResources = newArrayList("1000")

	val client : DatagramSocket = new DatagramSocket(65000) // A client to listen requests
	// val clientSender = new UDPSender() // homeMade client to send UDP message
	val initialTaskTypes = new HashMap<String, Class<? extends Agent>>
	
	on Initialize {
		loggingName = this.ID + "-Boot"
		// info("System started")
	 
	 	//a.accumulateTime(5)
		// info(getSkill(AgentPerformance).processingTime)
		initialTaskTypes.put("DETECTOR", Detector)
		initialTaskTypes.put("TRACKER", Tracker)
		initialTaskTypes.put("COUNTER", Counter)
		setAgentsReady()
		startUDPListener()
		task("Application-Launcher").execute[Application::launch(GUI, " ")]
	}
	

	def setAgentsReady {
					// for (wc : subWorldConfig) {
		// WorldHolon.addSubWorld(wc)
		// }
		// info("Setting the agents")
		var PlatformHolonConfig = new PlatformConfig(0, 5, initialTaskTypes, "LLN")
		var AVAILABLE_CAMERAS = new ArrayList<String>
		for (c : initialCameraConfigs) {
			PlatformHolonConfig.addSubPlatform(new CameraPlatformConfig(1, 10, initialTaskTypes, c))
			AVAILABLE_CAMERAS.add(c.cameraId)
		}
		spawn(TOLDAgent, new TOLDConfig(0))
		spawn(PlatformAgent, PlatformHolonConfig, availableResources)
		spawn(User, new HolonicUserConfig(0, "UserAccessManager", AVAILABLE_CAMERAS))
		// StartSimulation
	}

	def analyzeMessage(msg : UDP_Message_Base, adrss : String) {

		switch (msg.method) {
			case "stopSimulation": {
				disable()
				emit(new CommitSuicide)
			}
			default: {
				info("Unknown message received by boot agent : " + msg.method)
			}
		}
	}

	private def startUDPListener {
		var parser = new MessageDeserializer();
		val serverTask = task("UDPListener");
		serverTask.execute [
			{
				try {
					while (!isCanceled(serverTask) && !client.isClosed) {
						var buffer = newByteArrayOfSize(8192);
						var packet = new DatagramPacket(buffer, buffer.length);
						client.receive(packet);
						var message = new String(packet.getData(), packet.getOffset(), packet.getLength());
						var data : UDP_Message_Base = parser.Deserialize(message);
						if (data !== null) {
							analyzeMessage(data, packet.getAddress().getHostAddress());
						} else {
							info("Received NULL message.");
                    }
                }
            } catch (e : Exception) {
                error("Error while listening for UDP messages: " + e.message);
            }
			}
		];
	}

	def synchronized disable() {
		this.client.close()
		task("UDPListener").cancel
		task("Application-Launcher").cancel
	}
}
