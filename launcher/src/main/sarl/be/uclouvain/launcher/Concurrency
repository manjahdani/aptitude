EXPLANATION ABOUT CONCURRENCY 

VOLATILE -> variable is cached only in the main memory. 

IF NOT VOLATILE, Let T1 and T2 be two threads. To avoid back and forth, the threads will cach the information in their local memory. 
Yet, if T2 (with writing rights), changed the value in the main memory, T1 may not be aware and therefore keeps using the old one. 

Now, if volatile T2 would inform T1 as well. 

VOLATILE variables are never cached and are read directly from main memory, may slower the user experience but increase the concurrency safety. 



SYNCHRONIZED KEYWORD ENSURE MUTUAL EXCLUSION

One and only one thread is allowed to enter the block at the same time. 
All variables within the code, must be flushed and updated directly in the main memory

V vs S -> V provides less overhead nothing prevents these operations to be executed at the same time (causing a problem). 

	 S ++ Read and write will be done at the same time and directly in the main memory.
	   ++ Exclusion and visibility will be ensured 
	   -- All other threads will be blocked until its done-> overhead 
	   -- All the variables in the block will be involved
	   
	   
AtomicReference : 

	-> Allow to do synchronized on only one variable. If not atomic 
	
	What seems to be an atomic operation (E.g incrementing an integer : i++) operates in three fold. 
	 
		1. Retrieve the value of i 
		2. increment i 
		3. update i 

What could happen then is that these steps would be partially done. 

Using atomic integer would ensure that these steps are done in a thread safe environnement. 


	VOLATILE vs ATOMIC REFERNEC 
	
	Actually ATOMIC REFERENCE stores the value in a volatile fashion. Therefore, if the object needs only to be accessed and set (get/set)
	Volatile is enough. 
 