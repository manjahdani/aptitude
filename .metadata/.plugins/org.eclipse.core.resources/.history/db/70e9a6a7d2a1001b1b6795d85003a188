/** 
 * 
 */
package be.uclouvain.aptitude.surveillance.algorithm.messages

import com.hazelcast.nio.ObjectDataInput
import java.io.IOException
import com.hazelcast.nio.ObjectDataOutput
import org.eclipse.xtend.lib.annotations.Accessors


/** 
 * @author samelson
 * 
 */
class EvaluationMessage extends BaseMessage {

	@Accessors(PUBLIC_GETTER, PUBLIC_SETTER) var requestID : String
	@Accessors(PUBLIC_GETTER, PUBLIC_SETTER) var predictions : String
	@Accessors(PUBLIC_GETTER, PUBLIC_SETTER) var gts : String
	@Accessors(PUBLIC_GETTER, PUBLIC_SETTER) var HOTA : double
	@Accessors(PUBLIC_GETTER, PUBLIC_SETTER) var DetA : double
	@Accessors(PUBLIC_GETTER, PUBLIC_SETTER) var AssA : double
	@Accessors(PUBLIC_GETTER, PUBLIC_SETTER) var DetRe : double
	@Accessors(PUBLIC_GETTER, PUBLIC_SETTER) var DetPr : double
	@Accessors(PUBLIC_GETTER, PUBLIC_SETTER) var AssRe : double
	@Accessors(PUBLIC_GETTER, PUBLIC_SETTER) var AssPr : double
	@Accessors(PUBLIC_GETTER, PUBLIC_SETTER) var LocA : double

	val FACTORY_ID = 1
	val CLASS_ID = 30

	def getFactoryId : int {
		FACTORY_ID
	}

	def getId : int {
		CLASS_ID
	}

	def readData(odi : ObjectDataInput) throws IOException {
		super.readData(odi)

		this.requestID = odi.readUTF()
		this.predictions = odi.readUTF()
		this.gts = odi.readUTF()

		this.HOTA = odi.readDouble()
		this.DetA = odi.readDouble()
		this.AssA = odi.readDouble()
		this.DetRe = odi.readDouble()
		this.DetPr = odi.readDouble()
		this.AssRe = odi.readDouble()
		this.AssPr = odi.readDouble()
		this.LocA = odi.readDouble()

	}

	def writeData(odo : ObjectDataOutput) throws IOException {
		super.writeData(odo)

		odo.writeUTF(requestID)
		odo.writeUTF(predictions)
		odo.writeUTF(gts)

		odo.writeDouble(HOTA)
		odo.writeDouble(DetA)
		odo.writeDouble(AssA)
		odo.writeDouble(DetRe)
		odo.writeDouble(DetPr)
		odo.writeDouble(AssRe)
		odo.writeDouble(AssPr)
		odo.writeDouble(LocA)
	}

}
