/** 
 * @Name       : PlatformRole
 * @Project    : APTITUDE
 * @Author     : Dani Manjah
 * @Version    : V.0.1 
 * @Date       : 22/03/2021 
 */
package be.uclouvain.aptitude.agents.user

import UDPMessages.CharacterData
import UDPMessages.UDP_Message_RequestSpawn
import UDPMessages.UDP_Message_RequestWithdraw
import be.uclouvain.organisation.interactivity.element.ElementInformation
import be.uclouvain.organisation.interactivity.element.ElementRole
import be.uclouvain.organisation.platform.NewMission
import be.uclouvain.organisation.platform.StopMission
import be.uclouvain.organisation.platform.util.MissionData
import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import java.util.TreeMap
import java.util.UUID
import io.sarl.core.InnerContextAccess
import io.sarl.core.Lifecycle
import be.uclouvain.aptitude.agents.Expert
import io.sarl.lang.core.EventSpace
import java.util.ArrayList

/** 
 * @author manjah
 * 
 */
behavior UserRole extends ElementRole {

	uses Behaviors, UserElementCapacity, DefaultContextInteractions,InnerContextAccess,Lifecycle
	
	val entityList : TreeMap<UUID, CharacterData> = new TreeMap<UUID, CharacterData>
	val AVAILABLE_MODELS = 4;
	val ExpertType = newArrayList(1, 2, 3, 0)

	on Initialize {
		for (var i = 0; i < AVAILABLE_MODELS; i++){
			val id = UUID.randomUUID
			entityList.put(id, new CharacterData(id.toString, ExpertType.get(i), 0, -1))
			spawnInContextWithID(Expert,id, innerContext, occurrence.parameters.get(0) as TreeMap<UUID, EventSpace>,
				occurrence.parameters.get(1) as ArrayList<UUID>)
		}
		
			setupPhysicalDevice(getCharacterList)
			
			}
	@SuppressWarnings("discouraged_occurrence_readonly_use")
	on ElementInformation {
		
		val msg = occurrence.information; 
		if (msg instanceof UDP_Message_RequestSpawn) {
			
			val entityID = UUID.fromString(msg.actorUID)
			wake(new NewMission(getDefaultSpace, new MissionData(entityID,msg.sceneID, entityList.get(entityID).evolution)))[it.UUID==entityID]
			entityList.get(entityID).screenID = msg.sceneID
			updateBehavior(getCharacterList)
			}
			else if (msg instanceof UDP_Message_RequestWithdraw) {
			var MissionID = UUID.fromString(msg.actorUID)
			entityList.get(MissionID).screenID = -1
			wake(new StopMission(MissionID))
			updateBehavior(getCharacterList)
		}
	}
	def getCharacterList {
		var characterList : CharacterData[] = newArrayOfSize(20)
		var i = 0;
		for (id : entityList.keySet) {
			var cD = entityList.get(id)
			characterList.set(i, cD)
			i++
		}
		return characterList
	}
	def getEntityList : TreeMap<UUID, CharacterData> {
		return this.entityList
	}
} 