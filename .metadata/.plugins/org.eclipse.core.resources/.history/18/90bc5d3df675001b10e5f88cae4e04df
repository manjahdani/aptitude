/** 
 * 
 */
package be.uclouvain.aptitude.agents


import be.uclouvain.organisation.told.JoinPlatform
import be.uclouvain.organisation.told.TOLDRole
import io.sarl.core.Behaviors
import io.sarl.core.Initialize
import io.sarl.core.InnerContextAccess
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import io.sarl.core.OpenEventSpace
import io.sarl.lang.core.AgentContext
import java.util.TreeMap
import be.uclouvain.aptitude.agents.algorithm.Algorithm
import java.util.HashMap

/** 
 * @author manjah
 * 
 */
agent TOLDAgent extends Paraddis {
	uses Logging, Lifecycle, InnerContextAccess,Behaviors

 	val AlgorithmDatabase : HashMap<String, HashMap<String,String>> = new HashMap<String,HashMap<String,String>>
 	
	on Initialize {
		
		loggingName = "TOLD-" + this.ID
		info("TOLD started.")
		
		AlgorithmDatabase.put("YOLO", "F:/aptitude/aptitude-agents/src/main/resources/config/test-YOLO.json")
		AlgorithmDatabase.put("TinyYOLO","F:/aptitude/aptitude-agents/src/main/resources/config/test-TinyYOLO.json")
		AlgorithmDatabase.put("SORT", "F:/aptitude/aptitude-agents/src/main/resources/config/test-SORT.json")
		AlgorithmDatabase.put("DeepSORT", "F:/aptitude/aptitude-agents/src/main/resources/config/test-DeepSORT.json")
		AlgorithmDatabase.put("APTITUDE","NoneForTheMoment")
		
		for(belief : AlgorithmDatabase.keySet){
			spawnInContext(Algorithm,innerContext,0,belief)
		}
		registerBehavior(new TOLDRole(this))}
	on JoinPlatform {
		wake(new AlgorithmNeeded(occurrence.contextID,occurrence.DefaultSpaceID,"Detector","YOLO"))
	}
}

class AlgorithmInfo{
	
	var name : String
	var belief : String
	var task : String
	
	new (n:String,b:String,t:String)
	{
		this.name=n
		this.belief=b
		this.task = b
	}
}

event AlgorithmNeeded{
	val contextID : AgentContext
	val DefaultSpaceID : OpenEventSpace
	val task : String
	val belief : String

	new (context : AgentContext, Space : OpenEventSpace,t : String, bel : String) {
		this.contextID = context
		this.DefaultSpaceID = Space
		this.task = t; 
		this.belief = bel;
	}
}
