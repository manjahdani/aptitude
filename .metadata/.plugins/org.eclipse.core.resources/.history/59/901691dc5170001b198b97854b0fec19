package be.uclouvain.organisation.platform.util 

import java.util.LinkedList
import java.util.concurrent.atomic.AtomicInteger
import java.util.Collections
import java.util.List

/** 
 * 
 */

/** 
 * @author manjah
 * 
 */
class PlatformConfig {
	val subWorldConfig = new LinkedList<PlatformConfig> // The configuration of its sub-worlds.
	val LEVEL : int // The hierarchical level of the platform (0 is the highest level).
	val CPU_MAX_USAGE = new AtomicInteger()

	/** 
	 * Constructor
	 * 
	 * @param	lvl	The hierarchical level of the World (0 is the highest level)
	 * @param	shp	The shape of the World
	 */
	new (entity_max : int, lvl : int) {
		this.CPU_MAX_USAGE.set(entity_max)
		this.LEVEL = lvl
	}

	def addSubWorld(wc : PlatformConfig) : void {
		// FIXME verify dimensions
		this.subWorldConfig.add(wc)
	}

	def removeSubWorld(wc : PlatformConfig) : void {
		this.subWorldConfig.remove(wc)
	}

	def getLevel() : int {
		return this.LEVEL
	}

	def getSubWorldConfig() : List<PlatformConfig> {
		return Collections.synchronizedList(this.subWorldConfig)
	}

	def getENTITY_MAX : int {
		return CPU_MAX_USAGE.get()
	}

}
