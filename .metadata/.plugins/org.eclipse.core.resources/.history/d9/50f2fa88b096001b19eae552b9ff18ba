/** 
 * 
 */
package be.uclouvain.aptitude.surveillance.algorithm


import io.sarl.core.Behaviors
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import be.uclouvain.organisation.told.entity.EntityRole

import java.util.concurrent.atomic.AtomicInteger
import java.util.concurrent.atomic.AtomicReference
import be.uclouvain.aptitude.surveillance.Paraddis
import be.uclouvain.aptitude.surveillance.AlgorithmNeeded

/** 
 * An agent with an intrinsic desire to achieve its Goal and become better at it. 
 * It bases its computations on a Belief, otherwise a model defined by parameters.  
 * The Algorithms are instances with a set of tasks (Goals) and a model (Belief). 
 * They are classified according to the tasks they can achieve (Detector, Tracker, Vehicle Counter, Offense Detectorâ€¦). 
 * 
 * Therefore, there will exist as many super-Holon as there exists tasks. 
 * Initially, it exists in the realm of TOLD and within a Holon could exist infinite combination of models and parameters. 
 * 
 * The algorithm becomes operational when joining a Platform. However, cyber-physically, the instance does not join another context but rather provide a replicate.
 *  The instance may due to local interactions, evolve to be better than to the original at this specific task and Location. 
 * When that happens, the replicate may choose to adapt its belief accordingly and communicate to the original the decision. 
 * If the latest follows, it universally and automatically suggests to child instances the modification. 
 * They now share a new belief. 
 * In the case, it does not follow, the replicate will become a new Holon in the realm of TOLD and becomes a distinct entity
 * 
 * 
 */
agent Algorithm extends Paraddis{
	
	uses Behaviors,Logging, Lifecycle
	
	//var belief : String; 
	val name   =new AtomicReference<String>;
	val level = new AtomicInteger()
	
	on Initialize {
		level.set(occurrence.parameters.get(0) as Integer)
		name.set(occurrence.parameters.get(1).toString)

		loggingName = "ALGORITHM-"+ name + "-"+ level +"-" + this.ID
		//info("Algorithm level" + name + " was started.")
		registerBehavior(new EntityRole(this))
		
		if(level>0)
		{
			info(" I am a copy of " + name)
			switch(occurrence.parameters.get(2)){
				case "Counter": {
				registerBehavior(new CounterRole(this), occurrence.parameters.get(3), occurrence.parameters.get(4))
				}
				case "Tracker": {
					registerBehavior(new TrackerRole(this), occurrence.parameters.get(3), occurrence.parameters.get(4))
				}
				case "Detector": {
					registerBehavior(new DetectorRole(this), occurrence.parameters.get(3), occurrence.parameters.get(4))
			}
			}
		 }
		 else {
			info("I believe in: " + name)
		 }
	}
	@SuppressWarnings("discouraged_occurrence_readonly_use")
	on AlgorithmNeeded {
		
		if(occurrence.name == name.get)
		{
			info("I receive a JoinPlatform " + occurrence.task + occurrence.belief)
			spawnInContext(Algorithm, occurrence.contextID, 1, occurrence.name, occurrence.task, occurrence.belief, occurrence.dest)
			}
		}
}


		

