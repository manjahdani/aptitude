/** 
 * 
 */
package be.uclouvain.aptitudeAgents

import be.uclouvain.organisation.platform.AnalystRole
import be.uclouvain.organisation.platform.AuthorizationToJoin
import be.uclouvain.organisation.platform.StopMission
import be.uclouvain.organisation.told.AddEntity
import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.ExternalContextAccess
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.lang.core.EventSpace
import java.util.ArrayList
import java.util.TreeMap
import java.util.UUID
import be.uclouvain.organisation.platform.NewMission

/** 
 * @author manjah
 * 
 */
agent Expert {
	uses Logging, Behaviors, ExternalContextAccess,DefaultContextInteractions

	var platformlistenersSpaceIDs : TreeMap<UUID, EventSpace>
	var platformList : ArrayList<UUID>
	val MissionList = new TreeMap<UUID,EventSpace>
	on Initialize {
		// Event trigger before the agent begin to live or to be used.
		// You should put all the initialization statements in this block of code
		loggingName = "Expert-" + this.ID
		this.platformlistenersSpaceIDs = occurrence.parameters.get(0) as TreeMap<UUID, EventSpace>
		this.platformList = occurrence.parameters.get(1) as ArrayList<UUID>
		info("Expert agent was started.")
		
	}
	on NewMission {
		
		info("I have a new mission")
		val PlatformID = platformList.get(occurrence.missionData.location);
		val PlatformSpace = platformlistenersSpaceIDs.get(PlatformID)
		MissionList.put(occurrence.missionData.entityID, PlatformSpace)
		emit(PlatformSpace, new AddEntity(getDefaultSpace(), occurrence.missionData.sensitivity)) [it.UUID == PlatformID]
}
	on StopMission {
		emit(MissionList.get(occurrence.missionID), new StopMission(occurrence.missionID))
		info("Received Stop Mission")
	}
	on AuthorizationToJoin {
		registerBehavior(new AnalystRole(this), occurrence.sensitivity)
		join(occurrence.contextID.getID, occurrence.defaultSpaceID.getSpaceID.getID)
		
	}
}
