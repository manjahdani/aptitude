/** 
 * 
 */
package be.uclouvain.aptitude.agents.algorithm

import be.uclouvain.organisation.told.LeavePlatform
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Logging
import java.io.FileReader
import org.json.simple.JSONObject
import org.json.simple.parser.JSONParser
import be.uclouvain.aptitude.agents.algorithm.Tracking
import be.uclouvain.aptitude.agents.algorithm.TrackingImpl
import be.uclouvain.aptitude.agents.algorithm.BBoxes2DResult
import be.uclouvain.aptitude.agents.algorithm.PartnerTrackingFound
import io.sarl.core.OpenEventSpace
import java.util.UUID
import be.uclouvain.organisation.OrganisationInfo
import io.sarl.core.ExternalContextAccess
import be.uclouvain.organisation.told.AlgorithmJoinPlatform
import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import be.uclouvain.organisation.platform.ObserverRole

/** 
 * @author manjah
 * 
 */
behavior TrackerRole extends ObserverRole {
	uses Logging, Tracking, ExternalContextAccess, Behaviors, DefaultContextInteractions

	var partnerTrackingName : String

	protected var PlatformSpace : OpenEventSpace
	protected var PlatformID : UUID
	//var configPathSORT = "F:/aptitude/aptitude-agents/src/main/resources/config/test-SORT.json"
	//var configPathDeepSORT = "F:/aptitude/aptitude-agents/src/main/resources/config/test-DeepSORT.json"
	//var partnerObserverID : UUID
	on Initialize {
		// Event trigger before the behavior begin to live or to be used.
//		// You should put all the initialization statements in this block of code.
//		info("Tracker Role started" + occurrence.parameters.get(0).toString)
//
//		partnerObserverID = occurrence.parameters.get(1) as UUID
		setSkill(new TrackingImpl)
		var parser = new JSONParser(); // occurrence.parameters.get(0).toString
		var configPathTracker = occurrence.parameters.get(0).toString
		var jsonTracker = parser.parse(new FileReader(configPathTracker)) as JSONObject;
		requestTracker(jsonTracker)
	}

	on Destroy {
		// Event trigger when the behavior is destroyed from the system.
		// You should put all the resource releasing statements in this block of code.
		info("The behavior was stopped.")
	}

	on PartnerTrackingFound {
		this.partnerTrackingName = occurrence.partnerName
		info("Tracking Partner found: " + this.partnerTrackingName)
	}
	on LeavePlatform {
		// join(BaseContext.ID, BaseSpace.spaceID.ID)
		info("ObserverTrackerLeaving")
		// sendAction(4)
			// leave(PlatformID)
	}

	on OrganisationInfo {
		info("Joining the Platform organisation: " + occurrence.spaceID + " (" + occurrence.context + ").")
		PlatformID = occurrence.source.getUUID
		PlatformSpace = occurrence.spaceID
		PlatformSpace.register(asEventListener)
		emit(PlatformSpace, new AlgorithmJoinPlatform(occurrence.context, occurrence.spaceID,"TinyYOLO", "Detector"))

	}

	on BBoxes2DTrackResult {
		info("ReceivedTracking")
		emit(new BBoxes2DTrackResult(occurrence.bboxes2DTrack))[it.UUID == observerID]
	}
	on BBoxes2DResult {
		info("ReceivedBoxes")
		getTrack(occurrence.bboxes2D)

			// println("***********************")
		// println("----  " + occurrence.bboxes2D.frameNumber)
					// println("*  " + Arrays.toString(occurrence.bboxes2D.bboxes))
		// println("*  " + Arrays.toString(occurrence.bboxes2D.classIDs))
		// println("*  " + Arrays.toString(occurrence.bboxes2D.detConfs))
		// println("*  " + occurrence.bboxes2D.lastFrame)
		// println("***********************")
					// if (occurrence.bboxes2D.lastFrame) {
						// info("That was it!")
		// val totalTime = (((System.currentTimeMillis() - this.start) / 1000))
		// info("It took " + totalTime.toString + " seconds")
		// info("Average FPS : " + (occurrence.bboxes2D.frameNumber / totalTime).toString)
		// }
		// if (occurrence.bboxes2D.frameNumber != this.expectedFrame) {
		// println("UNEXPECTED")
		// }
		// this.expectedFrame = occurrence.bboxes2D.frameNumber +1
	}
}
