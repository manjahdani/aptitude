/** 
 * 
 */
package be.uclouvain.aptitude.surveillance.algorithm


import io.sarl.core.Logging
import java.util.ArrayList
import org.arakhne.afc.math.geometry.d2.d.Point2d
import java.util.TreeMap
import be.uclouvain.organisation.platform.CounterObserverCapacity
import be.uclouvain.aptitude.surveillance.algorithm.util.BBOX

/** 
 * 
 * 
 */
skill CountingSkill implements CounterObserverCapacity {
	uses Logging
	
	val countingLines : TreeMap<String, countingLine> = new TreeMap<String, countingLine>;
	
	def install {
		countingLines.put("A", new countingLine(1235, 700, 309, 664, 1)) // ObjectCounter
		countingLines.put("B", new countingLine(1477, 324, 1676, 310, -1))
		// countingLines.put("B", new countingLine(1531, 392, 1775, 376, -1)) // ObjectCounter
	}

	@Pure def Signal2Perception(signal : Object) {
		
		var boundingBoxes = signal as ArrayList<BBoxes2D>
		
		for (bb : boundingBoxes) {
			for (counting_line : countingLines.keySet
			) {
				if (has_crossed_counting_line(bb.getBBOX, countingLines.get(counting_line)) &&
					!countingLines.get(counting_line).ObjectEncountered(bb.globalID)) {
					val orientation = countingLines.get(counting_line).Orientation(bb.getDirection)
					//var bbDir = bb.getDirection
					//var nDir = countingLines.get(counting_line).getNormale
					if (orientation != 0) {
						countingLines.get(counting_line).IncrementCounts()
						//info("Counted at frame " + bb.frame + " and " + counting_line + " is : " +
							//	countingLines.get(counting_line).IncrementCounts() + " v=" + "(" + bbDir.x + " , " +
							//bbDir.y + "And n=" + "(" + nDir.getX + " , " + nDir.getY + ")" + " ori:" +
								//orientation)
					} else {
						//info("ID :" + bb.globalID + " Counted Horizontally at the frame " + bb.frame + " at : " +
							//	counting_line + " v=" + "(" + bbDir.x + " , " + bbDir.y + ")" + " and n=" + "(" +
							//nDir.getX + "," + nDir.getY + ")" + " orientation:" + orientation)
					}
				}
			}}
	}

	def has_crossed_counting_line(b : BBOX, cl : countingLine) {

		val bbox_line1 = newArrayList(new Point2d(b.x, b.y), new Point2d(b.x + b.w, b.y)) // (x, y), (x + w, y)
		
		val bbox_line2 = newArrayList(new Point2d(b.x + b.w, b.y),
			new Point2d(b.x + b.w, b.y + b.h)); // = [(x + w, y), (x + w, y + h)]
		val bbox_line3  = newArrayList(new Point2d(b.x, b.y), new Point2d(b.x, b.y + b.h)); //= [(x, y), (x, y + h)]
		val bbox_line4  = newArrayList(new Point2d(b.x, b.y + b.h), new Point2d(b.x + b.w, b.y + b.h)); // [(x, y + h), (x + w, y + h)]
		
		if (line_segments_intersect(bbox_line1, cl.getLine) || line_segments_intersect(bbox_line2, cl.getLine) ||
			line_segments_intersect(bbox_line3, cl.getLine) || line_segments_intersect(bbox_line4, cl.getLine)) {
			return true
		}

		return false
	}
	
	@Pure def line_segments_intersect(line1 : ArrayList<Point2d>, line2 : ArrayList<Point2d>) {

		var p1 = line1.get(0)
		var q1 = line1.get(1)
		var p2 = line2.get(0)
		var q2 = line2.get(1)

		var o1 = get_orientation(p1, q1, p2)
		var o2 = get_orientation(p1, q1, q2)
		var o3 = get_orientation(p2, q2, p1)
		var o4 = get_orientation(p2, q2, q1)

		if (o1 != o2 && o3 != o4) {
			return true
		}
		if (o1 == 0 && is_on_segment(p1, p2, q1)) {

			return true
		}
		if (o2 == 0 && is_on_segment(p1, q2, q1)) {
			return true
		}
		if (o3 == 0 && is_on_segment(p2, p1, q2)) {
			return true
		}
		if (o4 == 0 && is_on_segment(p2, q1, q2)) {
			return true
		}
		return false

	}

	@Pure def get_orientation(p : Point2d, q : Point2d, r : Point2d) {

		val a = (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y)
		if (a == 0) {
			return 0
		} else if (a > 0) {
			return 1
		}
		return 2
	}

	@Pure def is_on_segment(p : Point2d, q : Point2d, r : Point2d) {
		if (q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) &&
			q.y >= Math.min(p.y, r.y)) {
			return true
		}
		return false
	}
	
	def DisplayPerception {
		for (counting_line : countingLines.keySet)
			 {
				info( counting_line +" : " + countingLines.get(counting_line).IncrementCounts())
	}}
}
