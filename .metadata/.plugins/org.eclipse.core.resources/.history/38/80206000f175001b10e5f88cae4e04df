/** 
 * 
 */
package be.uclouvain.aptitude.agents.ui

import UDPMessages.ActorStats
import UDPMessages.UDP_Message_AckRequestAllStats
import UDPMessages.UDP_Message_AckRequestSpawn
import UDPMessages.UDP_Message_AckRequestWithdraw
import UDPMessages.UDP_Message_AuthenticateMobile
import UDPMessages.UDP_Message_Base
import UDPMessages.UDP_Message_RequestSpawn
import UDPMessages.UDP_Message_RequestStats
import UDPMessages.UDP_Message_RequestWithdraw
import be.uclouvain.organisation.interactivity.element.ElementInformation
import be.uclouvain.organisation.interactivity.inputDevice.InputSkill
import io.sarl.core.Behaviors
import io.sarl.core.InnerContextAccess
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import io.sarl.lang.core.EventSpace
import java.util.ArrayList
import java.util.TreeMap
import java.util.UUID
import be.uclouvain.aptitude.agents.user.User

/** 
 * @author manjah
 * 
 */
skill DeviceNetworkManagerSkill extends InputSkill {
	
	uses Logging, InnerContextAccess, Lifecycle, Behaviors

	var clientSender = new UDPSender()
	val mobileAddress : TreeMap<UUID, String> = new TreeMap<UUID, String>
	val mobileIPAddress : TreeMap<String, UUID> = new TreeMap<String, UUID>

	val worldlistenersSpaceIDs : TreeMap<UUID, EventSpace> = super.listenersSpaceIDs;
	val WorldList = new ArrayList<UUID>

	def install {

		WorldList.addAll(worldlistenersSpaceIDs.keySet())
			// for (k : worldlistenersSpaceIDs.keySet()) {
			// WorldList.add(k)
		// }
	}

	def MessageAnalysis(data : UDP_Message_Base, IPadrss : String) {
		
		info(data.method)
		switch (data.method) {
			case "authenticateMobile": {
				if (!mobileAddress.containsValue(IPadrss)) {
					val id = UUID.randomUUID()
					mobileAddress.put(id, IPadrss)
					mobileIPAddress.put(IPadrss, id)
					spawnInContextWithID(User, id, innerContext, worldlistenersSpaceIDs, WorldList,(data as UDP_Message_AuthenticateMobile).playerUID)
				}
			}
			case "requestSpawn": {
				RequestSpawn(data as UDP_Message_RequestSpawn, IPadrss)
			}
			case "requestWithdraw": {
				RequestWithdraw(data as UDP_Message_RequestWithdraw, IPadrss)
			}
			default: {
				info("Unknown Messages" + data)
			}
		}
	}

	def getMobileAddress() {
		return this.mobileAddress
	}

	def RequestWithdraw(data : UDP_Message_RequestWithdraw, adrs : String) {
		var msgOut = new UDP_Message_AckRequestWithdraw(data.sequenceNumber)
		clientSender.SendData(msgOut, adrs, 65003)
		wake(new ElementInformation(data))[it.UUID == mobileIPAddress.get(adrs)]
	}

	def RequestSpawn(data : UDP_Message_RequestSpawn, adrs : String) {
		clientSender.SendData(new UDP_Message_AckRequestSpawn(data.sequenceNumber), adrs, 65003)
		wake(new ElementInformation(data))[it.UUID == mobileIPAddress.get(adrs)]
	}

	def RequestStats(data : UDP_Message_RequestStats, adrs : String) {

		var allStats : ActorStats[] = newArrayOfSize(1)
		allStats.set(0, new ActorStats(data.actorUID, "2"))
		clientSender.SendData(new UDP_Message_AckRequestAllStats(data.actorUID, allStats), adrs, 65003)
	}
}
