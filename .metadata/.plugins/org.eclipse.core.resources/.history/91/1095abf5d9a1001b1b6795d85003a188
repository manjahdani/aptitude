/** 
 * 
 */
package be.uclouvain.aptitude.surveillance.algorithm

import be.uclouvain.aptitude.surveillance.algorithm.util.BBOX
import be.uclouvain.aptitude.surveillance.algorithm.util.BBoxes2D
import be.uclouvain.organisation.platform.AddAlgorithm
import be.uclouvain.organisation.platform.CounterObserverCapacity
import be.uclouvain.organisation.platform.MissionSensitivity
import be.uclouvain.organisation.told.util.AlgorithmInfo
import io.sarl.core.ExternalContextAccess
import io.sarl.core.Initialize
import io.sarl.core.Logging
import java.io.FileReader
import java.io.FileWriter
import java.nio.file.Files
import java.nio.file.Paths
import java.util.ArrayList
import java.util.TreeMap
import java.util.UUID
import org.json.simple.JSONObject
import org.json.simple.parser.JSONParser
import be.uclouvain.organisation.platform.ObserverRole

/** 
 * @author manjah
 * 
 */
behavior CompetitiveCounterRole extends ObserverRole {
	uses Logging, ExternalContextAccess, CounterObserverCapacity, Evaluation

	var start : long

	val availableObservers = newArrayList("SORT", "DeepSORT")

	

	val ObjectPresentInframe = new TreeMap<Integer, BBoxes2D>
	val ObjectToBeAnalyzed = new ArrayList<BBoxes2D>;

	var gt = new FileWriter("F:\\TinySort.txt")
	
	var EvaluationPartnerName : String;

	// end
	on Initialize {
		this.start = System.currentTimeMillis()
		setSkill(new EvaluationImpl, Evaluation)
		var configPath = "F:/aptitude/surveillance/src/main/resources/config/evalconfig.json"
		var parser = new JSONParser();
		var configPathEvaluator = configPath
		var jsonEvaluator = parser.parse(new FileReader(configPathEvaluator)) as JSONObject;
		ActivateAccess(jsonEvaluator)
	}

	on PartnerEvaluationFound {
		EvaluationPartnerName = occurrence.partnerName
		info("I found my partner" + EvaluationPartnerName)
	}

	@SuppressWarnings("potential_field_synchronization_problem")
	on MissionSensitivity {
		sensitivity.set(occurrence.s)
		//	val ObserverName = availableObservers.get(intensityMap.get(sensitivity.get))
		
		for (ObserverName : availableObservers) {
			info("Come here : " + ObserverName)
			PlatformSpace.emit(
				new AddAlgorithm(MissionSpace,
					new AlgorithmInfo(ObserverName, "TRACKER")))[it.UUID == PlatformContext.ID]
		}
	}

	@SuppressWarnings("potential_field_synchronization_problem")
	on BBoxes2DTrackResult {

		var ratio_width = 1920.0 / occurrence.bboxes2DTrack.dimWidth
		var ratio_height = 1080.0 / occurrence.bboxes2DTrack.dimHeight
		var frameNumber = occurrence.bboxes2DTrack.frameNumber

		ObjectToBeAnalyzed.clear

		for (var i = 0; i < occurrence.bboxes2DTrack.numberObjects; i++) {
			var X = occurrence.bboxes2DTrack.bboxes.get(4 * i) * ratio_width
			var Y = occurrence.bboxes2DTrack.bboxes.get(4 * i + 1) * ratio_height
			var W = occurrence.bboxes2DTrack.bboxes.get(4 * i + 2) * ratio_width
			var H = occurrence.bboxes2DTrack.bboxes.get(4 * i + 3) * ratio_height
			var classID = occurrence.bboxes2DTrack.classIDs.get(i)
			var globalID = occurrence.bboxes2DTrack.globalIDs.get(i)
			var conf = occurrence.bboxes2DTrack.detConfs.get(i)
			
			
// if(frameNumber<100){
			gt.write(
				(frameNumber + 1).toString + "," + globalID.toString + "," + X.intValue.toString + "," + 
				 Y.intValue.toString + "," + 
				 W.intValue.toString + "," +
				 H.intValue.toString + "," + 
				 "-1" +
				  "," + "-1" + "," + "-1" + "," + "-1" + "\n"
			)
			// }
			// else{
				// gt.close
			// }
			if (ObjectPresentInframe.containsKey(globalID)) {
				ObjectPresentInframe.get(globalID).update(X, Y, W, H, classID, frameNumber, conf)
			} else {
				ObjectPresentInframe.put(globalID,
					new BBoxes2D(new BBOX(X, Y, W, H), conf, globalID, classID, frameNumber))
			}

			ObjectToBeAnalyzed.add(ObjectPresentInframe.get(globalID))
		}

		Signal2Perception(new ArrayList(ObjectToBeAnalyzed)) // Activate its capacity to interpret a perception
		if (occurrence.bboxes2DTrack.lastFrame) {
			info("That was it!")
			val totalTime = (((System.currentTimeMillis() - this.start) / 1000))
			info("It took " + totalTime.toString + " seconds")
			info("Average FPS : " + (occurrence.bboxes2DTrack.frameNumber / totalTime).toString)
			info("I will transfer my perception to the Analyst")
			DisplayPerception
			gt.close

			info("Sending to evaluation")
			var predFile = "F:/TinySort.txt"
			var gtFile = "F:/gt.txt"
			var predictions = new String(Files.readAllBytes(Paths.get(predFile)));
			var gts = new String(Files.readAllBytes(Paths.get(gtFile)))
			sendEvaluationRequest(UUID.randomUUID.toString, predictions, gts)
		}
	}

	on EvaluationResult {
		// time2 = System.currentTimeMillis()
		// println(time2 - time1)
		// println(time2 - time3)
		info("Message Evaluation Received")
		println("reqID \t" + occurrence.result.requestID)
		println("HOTA \t" + occurrence.result.HOTA)
		println("DetA \t" + occurrence.result.detA)
		println("AssA \t" + occurrence.result.assA)
		println("DetRe \t" + occurrence.result.detRe)
		println("DetPr \t" + occurrence.result.detPr)
		println("AssRe \t" + occurrence.result.assRe)
		println("AssPr \t" + occurrence.result.assPr)
		println("LocA \t" + occurrence.result.locA)
	}
}
