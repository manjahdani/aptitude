/** 
 * 
 */
package be.uclouvain.aptitudeAgents

import io.sarl.core.Behaviors
import io.sarl.core.Initialize
import io.sarl.core.InnerContextAccess
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import io.sarl.lang.core.EventSpace
import java.util.TreeMap
import java.util.UUID

import be.uclouvain.organisation.platform.util.PlatformConfig
import be.uclouvain.organisation.platform.PlatformRole

/** 
 * @author manjah
 * 
 */
agent PlatformAgent extends Paraddis {

	uses Logging, Behaviors, InnerContextAccess, Lifecycle

	val subPlatformSpaceIDs = new TreeMap<UUID, EventSpace> // TreeMap of the sub-worlds composing the world. It is used to be able to communicate with other worlds

	on Initialize {
		val platformConfig = occurrence.parameters.get(0) as PlatformConfig

		loggingName = "Platform-" + platformConfig.getLevel() + "-" + this.ID
		info("agent started.")
		

		/* 
		 * Setting Roles and associated capacities of "WorldRole & TimeManagerBehavior"
		 */
		 
		// setSkill(new DiscreteTimeFlow, TimeManager)
		// registerBehavior(new TimeManagerBehavior(this))

		/* 
		 * Spawn of sub-platforms 
		 */
		for (swc : platformConfig.subPlatformConfig) {
			val randomID = UUID.randomUUID
			spawnInContextWithID(PlatformAgent, randomID, innerContext, swc)
			subPlatformSpaceIDs.put(randomID, innerContext.getDefaultSpace)
		}
		if (platformConfig.getLevel > 0) {
			registerBehavior(new PlatformRole(this))
			//spawnInContext(GameEngine, innerContext, WorldConfig.getServer, WorldConfig.getPCaddrss) 	// Only first layer wouldn't have a unity server, as it doesn't need to have physical representation
		} else {
			//setSkill(new WorldSkill(WorldConfig), WorldCapacity)
			//registerBehavior(new WorldRole(this))
			spawn(UserInterface, subPlatformSpaceIDs)
		}
	}

}
