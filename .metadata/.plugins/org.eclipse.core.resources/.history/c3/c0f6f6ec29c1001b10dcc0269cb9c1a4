package be.uclouvain.aptitude.surveillance.algorithm

import io.sarl.core.Behaviors
import io.sarl.core.Schedules
import be.uclouvain.aptitude.surveillance.algorithm.messages.BaseMessage
import be.uclouvain.aptitude.surveillance.algorithm.messages.BBoxes2DTrackMessage
import be.uclouvain.aptitude.surveillance.algorithm.messages.RequestMessage
import io.sarl.core.DefaultContextInteractions

/** 
 * @TODO: write a description
 * 
 * @author $Author: manjahdani$
 * @version $0.0.1$
 * @date $31/03/2021$
 * @mavengroupid $be.uclouvain.aptitude$
 * @mavenartifactid $surveillance$
 * 
 */
skill TrackerPythonTwin extends PythonAccessObserver {
	
	uses Behaviors, Schedules, DefaultContextInteractions

	def update(m : BaseMessage) {
		if (m instanceof BBoxes2DTrackMessage) {
			emit(new BBoxes2DTrackResult(m)) //@FIXME : it was wake !!!
		} else if (m instanceof RequestMessage) {
			onRequestMessage(m)
		}
	}

	private def onRequestMessage(message : RequestMessage) {
		if (message.ack && message.requestID == this.pendingRequestID) {
			requestTask.cancel
			CommunicationManager.instance.unsubscribeTopic(topicRequestSub)
			topicRequestSub = null
			val topicName = "tracking_" + owner.ID.toString + "_" + message.clientName
			topicSignalAcquisition = CommunicationManager.instance.subscribeTopic(topicName, this)
			wake(new PartnerTrackingFound(message.clientName))
		}
	}

//	def getTrack(detectionMessage : BBoxes2DMessage) {
//		CommunicationManager.instance.publishMessage(topicSignalAcquisition, detectionMessage)
//	}	
}

