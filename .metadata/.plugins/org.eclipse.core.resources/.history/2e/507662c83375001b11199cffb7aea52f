/** 
 * 
 */
package be.uclouvain.aptitudeAgents.util

import java.util.concurrent.atomic.AtomicInteger
import org.arakhne.afc.math.geometry.d2.d.Point2d
import java.util.ArrayList

/** 
 * @author manjah
 * 
 */
class countingLine {
	
	
	
	public var direction : int;
	public var lowerX : double
	public var upperX : double
	public var lowerY : double
	public var upperY : double
	public val counts = new AtomicInteger(0)
  	public val ObjEncountered = new ArrayList<Integer>
	
	new (lX : double, lY : double, uX : double, uY : double, d : int) {
		this.lowerX = lX
		this.upperX = uX
		this.lowerY = lY
		this.upperY = uY
		this.direction = d
	}

	def isInWorldLimit(x : double, y : double, z : double) : boolean {
		if (x > lowerX && x < upperX) {
			return false
		}
		if (y > lowerY && y < upperY) {
			return false
		}
		
		return true
	}

	def CopyWorld(w : countingLine) {
		this.lowerX = w.lowerX
		this.upperX = w.upperX
		this.lowerY = w.lowerY
		this.upperY = w.upperY
		this.direction = w.direction
	}
	
	def getCounts
	{
		return this.counts
	}
	
	def IncrementCounts{
		
		this.counts.andIncrement
	}
	def getLine {
		return newArrayList(new Point2d(lowerX,lowerY),new Point2d(upperX,upperY))
	}
	
	def ObjectEncountered(ID : int) {
		
		if(ObjEncountered.contains(ID)){
			return true
		}
		else{
			ObjEncountered.add(ID)
		}
		
		return false
	}
}
