/** 
 * @Name       : PlatformRole
 * @Project    : APTITUDE
 * @Author     : Dani Manjah
 * @Version    : V.0.1 
 * @Date       : 22/03/2021 
 */
package be.uclouvain.aptitude.agents

import be.uclouvain.aptitude.agents.algorithm.Algorithm
import be.uclouvain.organisation.platform.AlgorithmJoinPlatform
import be.uclouvain.organisation.told.TOLDRole
import io.sarl.core.Behaviors
import io.sarl.core.Initialize
import io.sarl.core.InnerContextAccess
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import io.sarl.core.OpenEventSpace
import io.sarl.lang.core.AgentContext
import java.util.HashMap
import java.util.UUID

/** 
 * 
 * 
 */
agent TOLDAgent extends Paraddis {
	uses Logging, Lifecycle, InnerContextAccess,Behaviors

 	val AlgorithmDatabase : HashMap<String, String> = new HashMap<String,String>
 	
	on Initialize {
		
		loggingName = "TOLD-" + this.ID
		info("Ready to share my stored Knowledge.")
		
		AlgorithmDatabase.put("YOLO", "F:/aptitude/aptitude-agents/src/main/resources/config/test-YOLO.json")
		AlgorithmDatabase.put("TinyYOLO","F:/aptitude/aptitude-agents/src/main/resources/config/test-TinyYOLO.json")
		AlgorithmDatabase.put("SORT", "F:/aptitude/aptitude-agents/src/main/resources/config/test-SORT.json")
		AlgorithmDatabase.put("DeepSORT", "F:/aptitude/aptitude-agents/src/main/resources/config/test-DeepSORT.json")
		AlgorithmDatabase.put("APTITUDE","NoneForTheMoment")
		
		for(name : AlgorithmDatabase.keySet){
			spawnInContext(Algorithm,innerContext, 0, name)
		}
		registerBehavior(new TOLDRole(this))}
	@SuppressWarnings("discouraged_occurrence_readonly_use")
	on AlgorithmJoinPlatform {
		info("I received Algorithm Join Platform" + AlgorithmDatabase.get(occurrence.name))
		wake(new AlgorithmNeeded(occurrence.contextID,occurrence.defaultSpaceID, occurrence.name, occurrence.task, AlgorithmDatabase.get(occurrence.name), occurrence.source.UUID))
	}
}

class AlgorithmInfo{
	
	val name : String
	val belief : String
	val task : String
	
	new (n:String,b:String,t:String)
	{
		this.name=n
		this.belief=b
		this.task = b
	}
	
	def getName{
		return this.name
	}
	def getBelief{
		return this.belief;
	}
	def getTask{
		return this.task;
	}
}

event AlgorithmNeeded{
	val contextID : AgentContext
	val DefaultSpaceID : OpenEventSpace
	val name : String
	val task : String
	val belief : String
	val dest : UUID

	new (context : AgentContext, Space : OpenEventSpace, n:  String,t : String, bel : String, d:UUID) {
		this.contextID = context
		this.DefaultSpaceID = Space
		this.task = t; 
		this.belief = bel;
		this.name=n
		this.dest=d
	}
}
