package be.uclouvain.aptitude.tracking

import be.uclouvain.aptitude.messages.BBoxes2DMessage
import be.uclouvain.aptitude.messages.BBoxes2DTrackMessage
import be.uclouvain.aptitude.messages.BaseMessage
import be.uclouvain.aptitude.messages.RequestMessage
import be.uclouvain.aptitude.other.BBoxes2DTrackResult
import be.uclouvain.aptitude.other.CommunicationManager
import be.uclouvain.aptitude.other.PartnerTrackingFound
import com.hazelcast.util.UuidUtil
import io.sarl.core.AgentTask
import io.sarl.core.Behaviors
import io.sarl.core.Logging
import io.sarl.core.Schedules
import org.json.simple.JSONObject

skill TrackingImpl implements Tracking {
	uses Logging, Behaviors, Schedules

	var topicRequestSub : String
	var topicTrackingSub : String

	var pendingRequestID : String
	var requestTask : AgentTask

	def install {
		topicRequestSub = CommunicationManager.instance.subscribeTopic("request", this)
	}

	def uninstall {
		if (topicRequestSub !== null) {
			CommunicationManager.instance.unsubscribeTopic(topicRequestSub)
			topicRequestSub = null
		}
		if (topicTrackingSub !== null) {
			CommunicationManager.instance.unsubscribeTopic(topicTrackingSub)
			topicTrackingSub = null
		}
	}

	def requestTracker(jsonConfig : JSONObject) {
		this.pendingRequestID = UuidUtil.newSecureUuidString
		this.requestTask = every(1000) [
			info("Tracking partner not found, send discovery message")
			var requestMessage = new RequestMessage()
			requestMessage.requestID = this.pendingRequestID
			requestMessage.agentID = owner.ID.toString
			requestMessage.jsonConfig = jsonConfig.toString
			CommunicationManager.instance.publishMessage(topicRequestSub, requestMessage)
		]
	}

	def update(m : BaseMessage) {
		if (m instanceof BBoxes2DTrackMessage) {
			wake(new BBoxes2DTrackResult(m))
		} else if (m instanceof RequestMessage) {
			onRequestMessage(m)
		}
	}

	private def onRequestMessage(message : RequestMessage) {
		if (message.ack && message.requestID == this.pendingRequestID) {
			requestTask.cancel
			CommunicationManager.instance.unsubscribeTopic(topicRequestSub)
			topicRequestSub = null
			val topicName = "tracking_" + owner.ID.toString + "_" + message.clientName
			topicTrackingSub = CommunicationManager.instance.subscribeTopic(topicName, this)
			wake(new PartnerTrackingFound(message.clientName))
		}
	}

	def getTrack(detectionMessage : BBoxes2DMessage) {
		CommunicationManager.instance.publishMessage(topicTrackingSub, detectionMessage)
	}
	
}

