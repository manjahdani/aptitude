/** 
 * 
 */
package be.uclouvain.aptitudeAgents

import be.uclouvain.aptitude.detection.DetectionImpl
import be.uclouvain.aptitude.other.BBoxes2DResult
import be.uclouvain.aptitude.other.BBoxes2DTrackResult
import be.uclouvain.aptitude.other.PartnerDetectionFound
import be.uclouvain.aptitude.other.PartnerTrackingFound
import be.uclouvain.aptitude.tracking.TrackingImpl
import be.uclouvain.organisation.told.LeavePlatform
import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Destroy
import io.sarl.core.ExternalContextAccess
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.OpenEventSpace
import java.io.FileReader
import java.util.UUID
import org.json.simple.JSONObject
import org.json.simple.parser.JSONParser
import be.uclouvain.organisation.platform.ObserverCapacity
import be.uclouvain.aptitudeAgents.detection.Detection
import be.uclouvain.aptitude.tracking.Tracking

/** 
 * @author manjah
 * 
 */
behavior ObserverRole {
	uses Logging, ObserverCapacity, DefaultContextInteractions, ExternalContextAccess, Logging,Behaviors, Detection, Tracking

	protected var PlatformSpace : OpenEventSpace
	protected var PlatformID : UUID

	protected var ExpertID : UUID

	var configPathYOLO = "F:/aptitude/SARL-Example/src/main/resources/config/test-YOLO.json"
	var configPathTinyYOLO = "F:/aptitude/SARL-Example/src/main/resources/config/test-TinyYOLO.json"
	var configPathSORT = "F:/aptitude/SARL-Example/src/main/resources/config/test-SORT.json"
	var configPathDeepSORT = "F:/aptitude/SARL-Example/src/main/resources/config/test-DeepSORT.json"

	var partnerDetectionName : String
	var partnerTrackingName : String
	var start : long
	
	on Initialize{
		info("My Observer Role started")

		setSkill(new DetectionImpl)
		setSkill(new TrackingImpl)

		var parser = new JSONParser();

		var configPathDetector = configPathYOLO
		var jsonDetector = parser.parse(new FileReader(configPathDetector)) as JSONObject;
		requestDetector(jsonDetector)

		var configPathTracker = configPathSORT
		var jsonTracker = parser.parse(new FileReader(configPathTracker)) as JSONObject;
		requestTracker(jsonTracker)
	}
	on LeavePlatform {
		// join(BaseContext.ID, BaseSpace.spaceID.ID)
		leave(PlatformID)
	}
	//on JoinPlatform {
		//join(occurrence.contextID.getID, occurrence.DefaultSpaceID.getSpaceID.getID)
		//occurrence.DefaultSpaceID.register(asEventListener)
	// }
//	on Initialize {
//		
//		spawn(CameraAgent, configPathTinyYOLO, configPathSORT)
//		Thread.sleep(15000)
//		spawn(CameraAgent, configPathYOLO, configPathSORT)
//		killMe
	//	}
	on PartnerDetectionFound {
		this.partnerDetectionName = occurrence.partnerName
		info("Detection partner found: " + this.partnerDetectionName)
		Thread.sleep(2000)
		sendAction(1) // PLAY
		this.start = System.currentTimeMillis()

			// Thread.sleep(10000)
			// sendAction(2) // PAUSE
		// Thread.sleep(5000)
		// this.start -= 5000
		// sendAction(3) 	// RESUME
	}

	on PartnerTrackingFound {
		this.partnerTrackingName = occurrence.partnerName
		info("Tracking Partner found: " + this.partnerTrackingName)
	}

	on BBoxes2DResult {
		getTrack(occurrence.bboxes2D)

			// println("***********************")
		// println("----  " + occurrence.bboxes2D.frameNumber)
		// println("*  " + Arrays.toString(occurrence.bboxes2D.bboxes))
		// println("*  " + Arrays.toString(occurrence.bboxes2D.classIDs))
		// println("*  " + Arrays.toString(occurrence.bboxes2D.detConfs))
		// println("*  " + occurrence.bboxes2D.lastFrame)
		// println("***********************")
		// if (occurrence.bboxes2D.lastFrame) {
		// info("That was it!")
		// val totalTime = (((System.currentTimeMillis() - this.start) / 1000))
		// info("It took " + totalTime.toString + " seconds")
		// info("Average FPS : " + (occurrence.bboxes2D.frameNumber / totalTime).toString)
		// }
		// if (occurrence.bboxes2D.frameNumber != this.expectedFrame) {
		// println("UNEXPECTED")
		// }
		// this.expectedFrame = occurrence.bboxes2D.frameNumber +1
	}

	on BBoxes2DTrackResult {

		// println("***********************")
		// println("*  " + occurrence.bboxes2DTrack.frameNumber)
		// println("*  " + occurrence.bboxes2DTrack.trackingTime)
		// println("*  " + Arrays.toString(occurrence.bboxes2DTrack.globalIDs))
		// println("*  " + Arrays.toString(occurrence.bboxes2DTrack.bboxes))
		// println("*  " + Arrays.toString(occurrence.bboxes2DTrack.classIDs))
		// println("*  " + Arrays.toString(occurrence.bboxes2DTrack.detConfs))
		// println("*  " + occurrence.bboxes2DTrack.lastFrame)
		// println("***********************")
		if (occurrence.bboxes2DTrack.lastFrame) {
			info("That was it!")
			val totalTime = (((System.currentTimeMillis() - this.start) / 1000))
			info("It took " + totalTime.toString + " seconds")
			info("Average FPS : " + (occurrence.bboxes2DTrack.frameNumber / totalTime).toString)
		}
	}

	on Destroy {

	}

}
