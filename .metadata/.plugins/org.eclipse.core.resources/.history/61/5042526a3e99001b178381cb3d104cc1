package be.uclouvain.aptitude.surveillance

import be.uclouvain.organisation.platform.AnalystRole
import be.uclouvain.organisation.AuthorizationToJoin
import be.uclouvain.organisation.platform.StopMission
import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.ExternalContextAccess
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.lang.core.EventSpace
import java.util.ArrayList
import java.util.TreeMap
import java.util.UUID
import be.uclouvain.organisation.platform.NewMission
import be.uclouvain.organisation.platform.AddMission

/** 
 * The expert receives the requirements of the client and translates them into a mission.
 * 
 * The goal of the expert is to draw conclusions such as statistics or occurrence of events. It will uses for that the help of algorithms and Sensors.
 * 
 * @TODO : It is strange that the sensitivity is sent. Maybe its best that platform creates a space where they could discuss
 * @TODO : Maybe expert or probably platform creates a space (a channel between them) for the discussion
 * 
 * @author $Author: manjahdani$
 * @version $0.1$
 * @date $31/03/2021$
 * @mavengroupid $be.uclouvain.aptitude$
 * @mavenartifactid $surveillance$
 */ 

agent Expert extends Paraddis {
	
	uses Logging, Behaviors, ExternalContextAccess, DefaultContextInteractions
	
	var PlatformlistenersSpaceIDs : TreeMap<UUID, EventSpace>
	var platformList : ArrayList<UUID>
	
	val MissionList = new TreeMap<UUID,UUID> // The different Mission its responsible of
	
	
	@SuppressWarnings("potential_field_synchronization_problem")
	on Initialize {
		loggingName = "Expert-" + this.ID
		this.PlatformlistenersSpaceIDs = occurrence.parameters.get(0) as TreeMap<UUID, EventSpace>
		this.platformList = occurrence.parameters.get(1) as ArrayList<UUID>
	}
	@SuppressWarnings("potential_field_synchronization_problem", "discouraged_occurrence_readonly_use")
	on NewMission {
		info("I have a new mission")
		val PlatformID = platformList.get(occurrence.missionData.location);
		//val PlatformSpace = platformlistenersSpaceIDs.get(PlatformID)
		// MissionList.put(occurrence.missionData.entityID, PlatformSpace)
		MissionList.put(occurrence.missionData.entityID, PlatformID)
		PlatformlistenersSpaceIDs.get(PlatformID).emit(new AddMission(getDefaultSpace(), occurrence.missionData.sensitivity))[it.UUID == PlatformID]
	}

	@SuppressWarnings("potential_field_synchronization_problem", "discouraged_occurrence_readonly_use")
	on StopMission {
		info("Received Stop Mission")
		val PlatformID = MissionList.get(occurrence.missionID) //@TODO : The experts may be on hold at this point
		PlatformlistenersSpaceIDs.get(PlatformID).emit(new StopMission(occurrence.missionID))[it.UUID==PlatformID]
		
	}
	@SuppressWarnings("discouraged_occurrence_readonly_use")
	on AuthorizationToJoin {
		registerBehavior(new AnalystRole(this), occurrence.sensitivity)
		join(occurrence.contextID.getID, occurrence.defaultSpaceID.getSpaceID.getID)
		
	}
}
