/** 
 */
package be.uclouvain.organisation.platform

import be.uclouvain.organisation.AddMember
import be.uclouvain.organisation.AuthorizationToJoin
import be.uclouvain.organisation.LocalDatabaseRequest
import be.uclouvain.organisation.PlatformOrganisationInfo
import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.ExternalContextAccess
import io.sarl.core.Initialize
import io.sarl.core.InnerContextAccess
import io.sarl.core.Logging
import io.sarl.core.MemberJoined
import io.sarl.core.OpenEventSpace
import io.sarl.core.OpenEventSpaceSpecification
import java.util.TreeMap
import java.util.UUID
import be.uclouvain.organisation.Identification
import be.uclouvain.organisation.SignalID
import io.sarl.core.Schedules
import java.util.Collections
import java.util.LinkedList

/** 
 * Ensures the management of the associated resources (computational and sensors) of a Location 
 * 
 * @author $Author: manjahdani$
 * @version $0.0.2$
 * @date $16/04/2021$
 * @mavengroupid $be.uclouvain.aptitude$
 * @mavenartifactid $organisation$
 *   
 */
behavior PlatformRole {
	uses Behaviors, InnerContextAccess, ExternalContextAccess, DefaultContextInteractions, Logging, PlatformCapacity, Schedules

	protected var PlatformTOLDSpace : OpenEventSpace
	val Listeners : TreeMap<UUID, OpenEventSpace> = new TreeMap<UUID, OpenEventSpace>
	val MissionsSpace : TreeMap<UUID, OpenEventSpace> = new TreeMap<UUID, OpenEventSpace> // Used for the communications among observers. 
	val Participants = Collections.synchronizedMap(new TreeMap<String, UUID>) // @FIXME clarify MAP - Lists and so on. clarify also if the variables must be concurrent or not
	val Requests = Collections.synchronizedList(new LinkedList<String>)
	
	@SuppressWarnings("potential_field_synchronization_problem")
	on Initialize {
		this.PlatformTOLDSpace = innerContext.getOrCreateSpaceWithID(OpenEventSpaceSpecification, UUID.randomUUID) // Space for the communication between Unity and the World
		PlatformTOLDSpace.register(asEventListener)
	}

	@SuppressWarnings("discouraged_occurrence_readonly_use")
	on AddMission {
		// RuleManagement(new MembershipInfoRule(occurrence.source, occurrence.SourceEventSpace, occurrence.entityData))
		//if (true) {
			MissionsSpace.put(occurrence.MissionData.missionID, innerContext.getOrCreateSpaceWithID(OpenEventSpaceSpecification, occurrence.MissionData.missionID))
			emit(occurrence.SourceEventSpace,
				new AuthorizationToJoin(innerContext,MissionsSpace.get(occurrence.MissionData.missionID),occurrence.source.getUUID, occurrence.MissionData)
			)[it.UUID == occurrence.source.getUUID]
	}
	
	@SuppressWarnings("discouraged_occurrence_readonly_use", "potential_field_synchronization_problem")
	
	//@FIXME is it possible to generalize that ? 
	on MemberJoined {

		val MemberID = occurrence.agentID;
		Listeners.put(MemberID, innerContext.getOrCreateSpaceWithID(OpenEventSpaceSpecification, UUID.randomUUID))
		Listeners.get(MemberID).register(asEventListener)
		
		if (occurrence.inDefaultSpace) {
			emit(new PlatformOrganisationInfo(innerContext, Listeners.get(MemberID)))[it.UUID == MemberID]
			if(occurrence.agentType.contains("TOLD"))
			{
				info("I met TOLD")
				PlatformTOLDSpace=Listeners.get(MemberID)
			}
		}
		else {
			//info("I See a new friend : " + occurrence.agentType)
			wake(new PlatformOrganisationInfo(innerContext, Listeners.get(MemberID)))[it.UUID == MemberID]
		}
	}
	@SuppressWarnings("discouraged_occurrence_readonly_use", "potential_field_synchronization_problem")
	on LocalDatabaseRequest{
		PlatformTOLDSpace.emit(new AddMember(Listeners.get(occurrence.source.UUID)))
	}
	on Identification{
		Participants.put(occurrence.name, occurrence.source.UUID)
	}
	@SuppressWarnings("potential_field_synchronization_problem")
	on AddAlgorithm {
			PlatformTOLDSpace.emit(
				new AlgorithmJoinPlatform(innerContext, occurrence.MissionSpace, occurrence.info.name,
					occurrence.info.task, occurrence.source.UUID))

	}
	
	@SuppressWarnings("potential_field_synchronization_problem")
	on AddObserver{
		info("Received AddObserver from " + occurrence.SignalReceiver.name)
		
		var signal = occurrence.SignalProvider.name
		var receiver = occurrence.SignalReceiver.name
		
		if (RuleManagement(new MembershipRule(signal, receiver)))
		{
			info("I will add " + signal)
			Requests.add(signal)
			if (!Participants.keySet.contains(signal))
			{
				
				info("I will add " + Requests.contains(signal))
				if (!Requests.contains(signal)) {
					
					
					PlatformTOLDSpace.emit(
						new AlgorithmJoinPlatform(innerContext, occurrence.MissionSpace, signal,
							occurrence.SignalProvider.task, occurrence.source.UUID))
				}	
				waitfor(signal, occurrence.source.UUID)						
			}
			else {
				Listeners.get(occurrence.source.UUID).emit(new SignalID(Participants.get(occurrence.SignalProvider.name)))
			}

		}
	}
	
	def waitfor(signal : String, dest : UUID) {

		task("waitingfor".concat(signal).concat(dest.toString)).every(500) [
			info("waitingfor".concat(signal).concat(dest.toString))
			if (Participants.keySet.contains(signal)) {
				Listeners.get(dest).emit(
					new SignalID(Participants.get(signal)))[it.UUID==dest]
				info("THe pax" +Participants)
				task("waitingfor".concat(signal).concat(dest.toString)).cancel
			}
		]

	}

	on StopMission {

		//if(RuleManagement())
		info(" I received a Stop Misson" + occurrence.expertID)
		wake(new LeavePlatform)
	}

}


class MembershipRule {
	
	var Member1 : String
	var Member2 : String
	new (m1: String, m2 : String)
	{
		this.Member1 = m1
		this.Member2= m2
	}
	
	def getM1{
		return this.Member1
	}
	def getM2{
		return this.Member2
	}
}
