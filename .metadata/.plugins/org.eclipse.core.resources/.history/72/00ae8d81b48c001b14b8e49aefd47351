/** 
 * @Name       : Expert (agent)
 * @Project    : APTITUDE
 * @Author     : Dani Manjah
 * @Version    : V.0.1 
 * @Date       : 22/03/2021 
 */
package be.uclouvain.aptitude.agents

import be.uclouvain.organisation.platform.AnalystRole
import be.uclouvain.organisation.platform.AuthorizationToJoin
import be.uclouvain.organisation.platform.StopMission
import be.uclouvain.organisation.told.AddEntity
import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.ExternalContextAccess
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.lang.core.EventSpace
import java.util.ArrayList
import java.util.TreeMap
import java.util.UUID
import be.uclouvain.organisation.platform.NewMission

/** 
 * The expert receives the requirements of the client and translates them into a mission.
 * 
 * The goal of the expert is to draw conclusions such as statistics or occurrence of events. It will uses for that the help of algorithms and Sensors.
 * 
 */
agent Expert extends Paraddis {
	
	uses Logging, Behaviors, ExternalContextAccess,DefaultContextInteractions
	var platformlistenersSpaceIDs : TreeMap<UUID, EventSpace>
	var platformList : ArrayList<UUID>
	val MissionList = new TreeMap<UUID,EventSpace> // The different Mission its responsible of
	
	
	@SuppressWarnings("potential_field_synchronization_problem")
	on Initialize {
		loggingName = "Expert-" + this.ID
		this.platformlistenersSpaceIDs = occurrence.parameters.get(0) as TreeMap<UUID, EventSpace>
		this.platformList = occurrence.parameters.get(1) as ArrayList<UUID>
	}
	@SuppressWarnings("potential_field_synchronization_problem", "discouraged_occurrence_readonly_use")
	on NewMission {
		info("I have a new mission")
		val PlatformID = platformList.get(occurrence.missionData.location);
		val PlatformSpace = platformlistenersSpaceIDs.get(PlatformID)
		MissionList.put(occurrence.missionData.entityID, PlatformSpace)
		emit(PlatformSpace, new AddEntity(getDefaultSpace(), occurrence.missionData.sensitivity)) [it.UUID == PlatformID]
}

	@SuppressWarnings("discouraged_occurrence_readonly_use")
	on StopMission {
		emit(MissionList.get(occurrence.missionID), new StopMission(occurrence.missionID))[it.UUID==]
		info("Received Stop Mission")
	}
	@SuppressWarnings("discouraged_occurrence_readonly_use")
	on AuthorizationToJoin {
		registerBehavior(new AnalystRole(this), occurrence.sensitivity)
		join(occurrence.contextID.getID, occurrence.defaultSpaceID.getSpaceID.getID)
		
	}
}
