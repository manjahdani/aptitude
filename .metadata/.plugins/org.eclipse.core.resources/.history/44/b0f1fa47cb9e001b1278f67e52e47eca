/** 
 * 
 */
package be.uclouvain.organisation.platform

import be.uclouvain.organisation.AuthorizationToJoin
import be.uclouvain.organisation.LocalDatabaseRequest
import be.uclouvain.organisation.PlatformOrganisationInfo
import be.uclouvain.organisation.TOLDOrganisationInfo
import be.uclouvain.organisation.told.util.AlgorithmInfo
import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.ExternalContextAccess
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.OpenEventSpace
import io.sarl.lang.core.AgentContext
import io.sarl.lang.core.EventSpace
import java.util.UUID
import java.util.concurrent.atomic.AtomicInteger

/** 
 * 
 * An Analyst receives perceptions and translates those into Insights. 
 * For example, the Analyst  upon the reception of a list of cars and 
 * their position could extrapolate if those cars entered or exited an Area and raise the Event according to it. 
 * 
 * We advise Analysts specializing to one scenario; consequently, you need two Analysts to perform the counting of vehicles and detect traffic offenses. 
 * However, those Analysts could use the same Observer if they rely on those perceptions. 
 * Therefore, we advise an Analyst rely on one and only one Observer (itself composed of other Observers). 
 * 
 * @author $Author: manjahdani$
 * @version $0.0.1$
 * @date $31/03/2021$
 * @mavengroupid $be.uclouvain.aptitude$
 * @mavenartifactid $organisation$
 */
behavior AnalystRole {
	
	uses Logging, Behaviors,DefaultContextInteractions, ExternalContextAccess

	protected var BaseContext : AgentContext
	protected var BaseSpace : EventSpace
	
	protected var PlatformContext : AgentContext
	protected var PlatformSpace : OpenEventSpace //Private channel 
	
	protected var TOLDContext : AgentContext
	protected var TOLDSpace : OpenEventSpace

	protected var MissionSpace : OpenEventSpace
	
	val Sensitivity = new AtomicInteger()
	/** 
	 * Receiving this event, the behavior has to update its fields of perception.
	 */
	val availableObservers = newArrayList("Extremely Careful", "Speed, Speed, Speed ", " I over-trust my tracker", "Balanced")
	
	var myObserver : UUID
	@SuppressWarnings("potential_field_synchronization_problem")
	on Initialize {
		BaseContext = getDefaultContext
		BaseSpace = getDefaultSpace
		Sensitivity.set(occurrence.parameters.get(0) as Integer)
		info("As an expert I will start the mission of Vehicle Counting with the sensitivity:  " + availableObservers.get(Sensitivity.get))
	}

	@SuppressWarnings("potential_field_synchronization_problem")
	// @TODO : we have to setup the communication channel such that the experts asks to the defaultContext an algorithm and an instance answered it. 
	// @TODO : Maybe create a space for every kind of "TASKS" like DETECTOR and so on. It would make more sens instead of communicating to everybody
	// That you want a detector! 
	// @FIXME There are global behavior organisational Behavior
	on PlatformOrganisationInfo {
		//info("Joining the Platform organisation: " + occurrence.spaceID + " (" + occurrence.context + ").")
		PlatformContext = occurrence.context
		PlatformSpace = occurrence.spaceID
		PlatformSpace.register(asEventListener)
		info("Come here : Vehicle Counter")
		PlatformSpace.emit(new LocalDatabaseRequest)[it.UUID == PlatformContext.ID]
	}
	on AuthorizationToJoin {
		MissionSpace = occurrence.defaultSpaceID;
		MissionSpace.register(asEventListener)
		PlatformSpace.emit(new AddAlgorithm(MissionSpace, new AlgorithmInfo("APTITUDE", "COUNTER")))
	}
	@SuppressWarnings("potential_field_synchronization_problem")
	on TOLDOrganisationInfo{
		TOLDContext = occurrence.context
		TOLDSpace = occurrence.spaceID
		TOLDSpace.register(asEventListener)
		
	}
	@SuppressWarnings("potential_field_synchronization_problem")
	on SensititvityRequest{
		info("Thank you for joining the mission. Please use the following sensitivity : " + availableObservers.get(Sensitivity.get))
		myObserver=occurrence.source.UUID
		emit(PlatformContext.defaultSpace, new MissionSensitivity(Sensitivity.get)
		)[it.UUID==occurrence.source.UUID]
	}
}
