/** 
 * 
 */
package be.uclouvain.aptitude.agents.algorithm

import be.uclouvain.aptitude.agents.AlgorithmNeeded
import io.sarl.core.Behaviors
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import be.uclouvain.organisation.told.entity.EntityRole
import be.uclouvain.aptitude.agents.Paraddis
import java.util.concurrent.atomic.AtomicInteger
import java.util.concurrent.atomic.AtomicReference

/** 
 * @author manjah
 * 
 */
agent Algorithm extends Paraddis{
	
	uses Behaviors,Logging, Lifecycle
	
	//var belief : String; 
	val name   =new AtomicReference<String>;
	val level = new AtomicInteger()
	
	on Initialize {
		level.set(occurrence.parameters.get(0) as Integer)
		name.set(occurrence.parameters.get(1).toString)

		loggingName = "ALGORITHM-"+ name + "-"+ level +"-" + this.ID
		//info("Algorithm level" + name + " was started.")
		registerBehavior(new EntityRole(this))
		
		if(level>0)
		{
			info(" I am a copy of " + name)
			switch(occurrence.parameters.get(2)){
				case "Counter": {
				registerBehavior(new CounterRole(this), occurrence.parameters.get(3), occurrence.parameters.get(4))
				}
				case "Tracker": {
					registerBehavior(new TrackerRole(this), occurrence.parameters.get(3), occurrence.parameters.get(4))
				}
				case "Detector": {
					registerBehavior(new DetectorRole(this), occurrence.parameters.get(3), occurrence.parameters.get(4))
			}
			}
		 }
		 else {
			info("I believe in: " + name)
		 }
//		if (level > 0) {
//			switch (occurrence.parameters.get(2)) {
//				case "Counter": {
//					registerBehavior(new CounterRole(this), occurrence.parameters.get(3), occurrence.parameters.get(4))
//					registerBehavior(new DetectorRole(this),
//						"F:/aptitude/aptitude-agents/src/main/resources/config/test-YOLO.json")
//					
//					}
//			}
//		}
	}
	@SuppressWarnings("discouraged_occurrence_readonly_use")
	on AlgorithmNeeded {
		
		info("I receive a JoinPlatform " + occurrence.task + occurrence.belief)
		
		if(occurrence.name == name.get)
		{
			info("I receive a JoinPlatform " + occurrence.task + occurrence.belief)
			spawnInContext(Algorithm, occurrence.contextID, 1, occurrence.name, occurrence.task, occurrence.belief, occurrence.dest)
			}
		}
}


		

