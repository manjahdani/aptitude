/** 
 */
package be.uclouvain.organisation.platform

import be.uclouvain.organisation.OrganisationInfo

import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.ExternalContextAccess
import io.sarl.core.Initialize
import io.sarl.core.InnerContextAccess
import io.sarl.core.MemberJoined
import io.sarl.core.OpenEventSpace
import io.sarl.core.OpenEventSpaceSpecification
import java.util.UUID
import be.uclouvain.organisation.AuthorizationToJoin
import io.sarl.core.Logging
import java.util.TreeMap
import be.uclouvain.organisation.PlatformOrganisationInfo

/** 
 * Ensures the management of the associated resources (computational and sensors) of a Location 
 * 
 * @author $Author: manjahdani$
 * @version $0.0.1$
 * @date $31/03/2021$
 * @mavengroupid $be.uclouvain.aptitude$
 * @mavenartifactid $organisation$
 *   
 */
behavior PlatformRole {
	uses Behaviors, InnerContextAccess, ExternalContextAccess, DefaultContextInteractions, Logging

	protected var PlatformTOLDSpace : OpenEventSpace
	val Listeners : TreeMap<UUID, OpenEventSpace> = new TreeMap<UUID, OpenEventSpace>
	
	
	@SuppressWarnings("potential_field_synchronization_problem")
	on Initialize {
		this.PlatformTOLDSpace = innerContext.getOrCreateSpaceWithID(OpenEventSpaceSpecification, UUID.randomUUID) // Space for the communication between Unity and the World
		PlatformTOLDSpace.register(asEventListener)
	}

	@SuppressWarnings("discouraged_occurrence_readonly_use")
	on AddMission {
		// RuleManagement(new MembershipInfoRule(occurrence.source, occurrence.SourceEventSpace, occurrence.entityData))
		//if (true) {
			emit(occurrence.SourceEventSpace,
				new AuthorizationToJoin(innerContext, innerContext.getDefaultSpace as OpenEventSpace, occurrence.source.getUUID, occurrence.MissionData))[it.UUID == occurrence.source.getUUID]
		//}
	}

	@SuppressWarnings("potential_field_synchronization_problem")
	//@TODO : Find a scalable approach to MemberJoined
	on MemberJoined {

		val MemberID = occurrence.agentID;
		Listeners.put(MemberID, innerContext.getOrCreateSpaceWithID(OpenEventSpaceSpecification, UUID.randomUUID))
		wake(new PlatformOrganisationInfo(innerContext, Listeners.get(MemberID)))[it.UUID == MemberID]
		Listeners.get(MemberID).register(asEventListener)
		
		if (occurrence.agentType == "be.uclouvain.aptitude.surveillance.TOLDAgent") {
			emit(new OrganisationInfo(defaultContext, PlatformTOLDSpace))[it.UUID == occurrence.agentID]
		} 
		else{
			wake(new OrganisationInfo(innerContext, PlatformTOLDSpace))[it.UUID == occurrence.agentID]
		}
	}

	on StopMission {

		//if(RuleManagement())
		info(" I received a Stop Misson" + occurrence.expertID)
		
		wake(new LeavePlatform)
	}

}
