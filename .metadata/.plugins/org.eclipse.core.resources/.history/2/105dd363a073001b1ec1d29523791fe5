/** 
 * 
 */
package be.uclouvain.organisation.platform

import be.uclouvain.organisation.OrganisationInfo
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.ExternalContextAccess
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.OpenEventSpace
import io.sarl.lang.core.AgentContext
import io.sarl.lang.core.EventSpace
import java.util.UUID
import io.sarl.core.Behaviors

/** 
 * @author manjah
 * 
 */
behavior AnalystRole {
	uses Logging, Behaviors,DefaultContextInteractions, ExternalContextAccess

	protected var BaseContext : AgentContext
	protected var BaseSpace : EventSpace

	protected var PlatformSpace : OpenEventSpace
	protected var PlatformID : UUID
	
	val AlgorithmMatching TreeMap<int , String> = new TreeMap
	
	var Sensitivity : int
	/** 
	 * Receiving this event, the behavior has to update its fields of perception.
	 */
	on Initialize {
		BaseContext = getDefaultContext
		BaseSpace = getDefaultSpace
		Sensitivity = occurrence.parameters.get(0) as Integer
		
		
		info("I am an analyst and will solve a problem with the sensitivity  " + Sensitivity)
	}

	on OrganisationInfo {
		info("Joining the Platform organisation: " + occurrence.spaceID + " (" + occurrence.context + ").")
		PlatformID = occurrence.source.getUUID
		PlatformSpace = occurrence.spaceID
		PlatformSpace.register(asEventListener)
	}
	
}
