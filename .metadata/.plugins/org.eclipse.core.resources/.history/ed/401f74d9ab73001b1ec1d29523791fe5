/** 
 * 
 */
package be.uclouvain.aptitudeAgents

import io.sarl.core.Logging
import io.sarl.core.Initialize
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.InnerContextAccess
import io.sarl.core.Lifecycle
import be.uclouvain.organisation.platform.ObserverRole
import io.sarl.core.Behaviors
import be.uclouvain.organisation.told.JoinPlatform
import be.uclouvain.organisation.told.EntityRole

/** 
 * @author manjah
 * 
 */
agent Algorithm {
	uses Behaviors,Logging, Lifecycle,InnerContextAccess, DefaultContextInteractions
	
	var belief : String; 
	var goal   : String;
	var level : int
	
	on Initialize {
		belief = occurrence.parameters.get(0) as String
		level = occurrence.parameters.get(1) as Integer
		if (belief == "YOLO" || belief == "TinyYOLO"){
			goal = "Detector"
		}
		else{
			goal = "Tracker"
		}
		loggingName = "ALGORITHM-"+belief+ ""+ level +"-" + this.ID
		info("Algorithm level" + belief + " was started.")
		registerBehavior(new EntityRole(this))
		
		if(level>0)
		{
			registerBehavior(new ObserverRole(this))
		}
	}
	on AlgorithmNeeded{
		
		info("I receive a JoinPlatform " + occurrence.task + occurrence.belief)
		
		if (goal == occurrence.task && belief == occurrence.belief) {
			info("Spawnig the algo")
			spawnInContext(Algorithm, occurrence.contextID, belief, 1)}}

		
}
