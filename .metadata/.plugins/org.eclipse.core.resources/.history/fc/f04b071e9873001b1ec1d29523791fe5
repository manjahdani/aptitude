/** 
 * 
 */
package be.uclouvain.aptitudeAgents

import UDPMessages.CharacterData
import UDPMessages.UDP_Message_RequestSpawn
import UDPMessages.UDP_Message_RequestWithdraw
import be.uclouvain.organisation.interactivity.element.ElementInformation
import be.uclouvain.organisation.interactivity.element.ElementRole
import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.lang.core.EventSpace
import java.util.TreeMap
import java.util.UUID

/** 
 * @author manjah
 * 
 */
behavior UserRole extends ElementRole {

	uses Behaviors, DeviceCapacity, DefaultContextInteractions
	val entityList : TreeMap<UUID, CharacterData> = new TreeMap<UUID, CharacterData>
	val AVAILABLE_MODELS = 4;
	// val characterType = newArrayList(1, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	// 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
	val characterType = newArrayList(1, 2, 3, 0)

	on Initialize {
		for (var i = 0; i < AVAILABLE_MODELS; i++){
			val id = UUID.randomUUID
			//spawnInContextWithID(Pedestrian, id, innerContext, new PedestrianBody(), characterType.get(i))
			entityList.put(id, new CharacterData(id.toString, characterType.get(i), 0, -1))}
			
			setupPhysicalDevice
			}

//	on AuthorizationToJoin {
//		wake(new JoinWorld(occurrence.contextID, occurrence.defaultSpaceID))[it.UUID == occurrence.entityID]
//		}

//	on MemberJoined {
//			if (occurrence.agentType == "be.uclouvain.world_elements.Pedestrian") {
//			if (getEntityList.get(occurrence.agentID).screenID !== -1) {
//			getEntityList.get(occurrence.agentID).screenID = -1
//			updateBehavior}}
//			}

	on ElementInformation {
		
		val msg = occurrence.information; 
		if (msg instanceof UDP_Message_RequestSpawn) {
			
			val entityID = UUID.fromString(msg.actorUID)
			// val data = new EntityData3D(entityID, new Point3d(msg.position.x, msg.position.y, msg.position.z),
			// entityList.get(entityID))
			wake(new newMission(getDefaultSpace, new MissionData(entityID,msg.sceneID, entityList.get(entityID).evolution)))
			// entityList.get(entityID).screenID = msg.sceneID
			updateBehavior
			}
			else if (msg instanceof UDP_Message_RequestWithdraw) {
			var entityID = UUID.fromString(msg.actorUID)
				// var worldUUID = worldList.get(entityList.get(entityID).screenID)
			// emit(worldlistenersSpaceIDs.get(worldUUID), new RemoveEntity(Pedestrian, entityID))[it.UUID == worldUUID]
		}
	}

	def getCharacterList {
		var characterList : CharacterData[] = newArrayOfSize(20)
		var i = 0;
		for (id : entityList.keySet) {
			var cD = entityList.get(id)
			characterList.set(i, cD)
			i++
		}
		return characterList
	}

	def getEntityList : TreeMap<UUID, CharacterData> {
		return this.entityList
	}


}

event newMission {

	val SourceEventSpace : EventSpace
	val missionData : MissionData

	new(sourceEventSpace : EventSpace, data : MissionData) {
		this.SourceEventSpace = sourceEventSpace
		this.missionData = data
	}
}

class MissionData {
	val entityID : UUID
	val Location : int
	val Sensitivity: int

	new (id : UUID, location : int, sensitivity : int) {
		this.entityID = id
		this.Location = location
		this.Sensitivity = sensitivity
	}

	def getEntityID() {
		return this.entityID
	}

	def getLocation() {
		return this.Location
	}

	def getSensitivity() {
		return this.Sensitivity
	}
}