/** 
 * 
 */
package be.uclouvain.aptitude.agents.algorithm

import be.uclouvain.aptitude.agents.algorithm.util.BBOX
import be.uclouvain.aptitude.agents.algorithm.util.BBoxes2D
import be.uclouvain.aptitude.agents.algorithm.util.countingLine
import be.uclouvain.organisation.OrganisationInfo
import be.uclouvain.organisation.platform.ObserverRole
import be.uclouvain.organisation.told.AlgorithmJoinPlatform
import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Destroy
import io.sarl.core.ExternalContextAccess
import io.sarl.core.Initialize
import io.sarl.core.Logging
import java.util.ArrayList
import java.util.TreeMap
import org.arakhne.afc.math.geometry.d2.d.Point2d

/** 
 * @author manjah
 * 
 */
behavior CounterRole extends ObserverRole {
	uses Logging, ExternalContextAccess, DefaultContextInteractions, Behaviors 

	
//	protected var TOLDSpace : OpenEventSpace
//	protected var TOLDID : UUID
//
//	protected var expertID : UUID

	

	// Variables and code line for ObjectCounter :
	val countingLines : TreeMap<String, countingLine> = new TreeMap<String, countingLine>;

	val ObjectPresentInframe = new TreeMap<Integer, BBoxes2D>

	val ObjectToBeAnalyzed = new ArrayList<BBoxes2D>;

	// end
	on Initialize {
		countingLines.put("A", new countingLine(1235, 700, 309, 664, 1)) // ObjectCounter
		countingLines.put("B", new countingLine(1477, 324, 1676, 310, -1))
		// countingLines.put("B", new countingLine(1531, 392, 1775, 376, -1)) // ObjectCounter
	}



	on OrganisationInfo {
		info("Joining the Platform organisation: " + occurrence.spaceID + " (" + occurrence.context + ").")
		TOLDID = occurrence.source.getUUID
		TOLDSpace = occurrence.spaceID
		TOLDSpace.register(asEventListener)
		emit(TOLDSpace, new AlgorithmJoinPlatform(occurrence.context, occurrence.spaceID,"SORT","Tracker"))
	}

	on BBoxes2DTrackResult {
		
		var ratio_width = 1920.0 / occurrence.bboxes2DTrack.dimWidth
		var ratio_height = 1080.0 / occurrence.bboxes2DTrack.dimHeight
		var frameNumber = occurrence.bboxes2DTrack.frameNumber

		ObjectToBeAnalyzed.clear

		for (var i = 0; i < occurrence.bboxes2DTrack.numberObjects; i++) {
			var X = occurrence.bboxes2DTrack.bboxes.get(4 * i) * ratio_width
			var Y = occurrence.bboxes2DTrack.bboxes.get(4 * i + 1) * ratio_height
			var W = occurrence.bboxes2DTrack.bboxes.get(4 * i + 2) * ratio_width
			var H = occurrence.bboxes2DTrack.bboxes.get(4 * i + 3) * ratio_height
			var classID = occurrence.bboxes2DTrack.classIDs.get(i)
			var globalID = occurrence.bboxes2DTrack.globalIDs.get(i)
			var conf = occurrence.bboxes2DTrack.detConfs.get(i)

			if (ObjectPresentInframe.containsKey(globalID)) {
				ObjectPresentInframe.get(globalID).update(X, Y, W, H, classID, frameNumber, conf)
			} else {
				ObjectPresentInframe.put(globalID,
					new BBoxes2D(new BBOX(X, Y, W, H), conf, globalID, classID, frameNumber))
			}

			ObjectToBeAnalyzed.add(ObjectPresentInframe.get(globalID))
		}
		attemp_count(new ArrayList(ObjectToBeAnalyzed))
		if (occurrence.bboxes2DTrack.lastFrame) {
			info("That was it! " )
			//val totalTime = (((System.currentTimeMillis() - this.start) / 1000))
			//info("It took " + totalTime.toString + " seconds")
			//info("Average FPS : " + (occurrence.bboxes2DTrack.frameNumber / totalTime).toString)
		}
	}

	// def has_crossed_counting_line(bbox, line){
	// } 
	
	def attemp_count(boundingBoxes : ArrayList<BBoxes2D>) {

		for (bb : boundingBoxes) {
			for (counting_line : countingLines.keySet) {
				if (has_crossed_counting_line(bb.getBBOX, countingLines.get(counting_line)) &&
					!countingLines.get(counting_line).ObjectEncountered(bb.globalID)) {
					val orientation = countingLines.get(counting_line).Orientation(bb.getDirection)
					var bbDir = bb.getDirection
					var nDir = countingLines.get(counting_line).getNormale
					if (orientation != 0) {
						info(
							"Counted at frame " + bb.frame + " and " + counting_line + " is : " +
								countingLines.get(counting_line).IncrementCounts() + " v=" + "(" + bbDir.x + " , " +
							bbDir.y + 
						 	"And n=" + "(" + nDir.getX + " , " + nDir.getY + ")" + " ori:" +
								orientation)
						}
					else {

						info(
							"ID :" + bb.globalID + " Counted Horizontally at the frame " + bb.frame + " at : " +
								counting_line + " v=" + "(" +
							 bbDir.x + " , " + bbDir.y + ")" + " and n=" + "(" + nDir.getX + "," + nDir.getY + ")" +
							" orientation:" + orientation)
					}
				}
			}
		}

	}

}

