/** 
 * 
 */
package be.uclouvain.organisation.platform

import io.sarl.core.Logging

import io.sarl.lang.core.AgentContext
import io.sarl.lang.core.EventSpace
import io.sarl.core.OpenEventSpace
import java.util.UUID
import io.sarl.core.Initialize
import io.sarl.core.DefaultContextInteractions
import be.uclouvain.organisation.told.AddEntity
import io.sarl.core.ExternalContextAccess

/** 
 * @author manjah
 * 
 */
behavior AnalystRole {
	uses Logging, DefaultContextInteractions, ExternalContextAccess

	protected var BaseContext : AgentContext
	protected var BaseSpace : EventSpace

	protected var PlatformSpace : OpenEventSpace
	protected var PlatformID : UUID
	
	var Sensitivity : int
	/** 
	 * Receiving this event, the behavior has to update its fields of perception.
	 */
	on Initialize {
		BaseContext = getDefaultContext
		BaseSpace = getDefaultSpace
		
		PlatformID = occurrence.parameters.get(0) as UUID
		PlatformSpace = occurrence.parameters.get(1) as OpenEventSpace
		Sensitivity = occurrence.parameters.get(2) as Integer
		emit(PlatformSpace, new AddEntity(getDefaultSpace(), Sensitivity))[it.UUID == PlatformID]
	}

//	
//	on AuthorizedTojoin{
//		
//		join(occurrence.contextID.getID, occurrence.DefaultSpaceID.getSpaceID.getID)
//	}

}
