/** 
 *
 */
package be.uclouvain.organisation.told

import be.uclouvain.organisation.OrganisationInfo
import io.sarl.core.Behaviors
import io.sarl.core.Initialize
import io.sarl.core.MemberJoined
import io.sarl.core.OpenEventSpace
import io.sarl.core.InnerContextAccess
import io.sarl.core.OpenEventSpaceSpecification
import java.util.UUID
import java.util.TreeMap
import io.sarl.core.MemberLeft
import io.sarl.core.DefaultContextInteractions
import be.uclouvain.organisation.TOLDOrganisationInfo

/** 
 * Trusted Observations and Learning Database is a database aiming to achieve two goals. 
 * 
 *  - Storing the information communicated by a platform.  
 * 
 *  - Contains ground truth signals dedicated to learning.
 * 
 * @author $Author: manjahdani$
 * @version $0.0.1$
 * @date $31/03/2021$
 * @mavengroupid $be.uclouvain.aptitude$
 * @mavenartifactid $organisation$
 * 
 */
behavior TOLDRole {
	
	uses Behaviors, AccessDatabaseCapacity, InnerContextAccess, DefaultContextInteractions
	
	var PlatformSpace : OpenEventSpace
	
	val Listeners : TreeMap<UUID,OpenEventSpace> = new TreeMap<UUID,OpenEventSpace>
	
	on Initialize {
		
//		AlgorithmDatabase.put("YOLO", new AlgorithmInfo("YOLO", "F:/aptitude/surveillance/src/main/resources/config/test-YOLO.json","Detector"))
//		AlgorithmDatabase.put("TinyYOLO", "F:/aptitude/surveillance/src/main/resources/config/test-TinyYOLO.json")
//		AlgorithmDatabase.put("SORT", "F:/aptitude/surveillance/src/main/resources/config/test-SORT.json")
//		AlgorithmDatabase.put("DeepSORT", "F:/aptitude/surveillance/src/main/resources/config/test-DeepSORT.json")
//		AlgorithmDatabase.put("APTITUDE", "NoneForTheMoment")
	}



	/*
	 * The platform register the context of a platform 
	 */	


	@SuppressWarnings("potential_field_synchronization_problem")
	on OrganisationInfo {
		//info("Me TOLD I am going to listen to Platform" + occurrence.spaceID)
		PlatformSpace = occurrence.spaceID
		PlatformSpace.register(asEventListener)

	}
	@SuppressWarnings("discouraged_occurrence_readonly_use")
	on AddEntry{
		create(occurrence.key, occurrence.data)
	}
	on DeleteEntry{
		delete(occurrence.key)
	}
	/*
	 * Send if available the stored data about it. 
	 */

	on MemberJoined {
		
		val MemberID = occurrence.agentID; 
		Listeners.put(MemberID,innerContext.getOrCreateSpaceWithID(OpenEventSpaceSpecification, UUID.randomUUID))
		emit(new TOLDOrganisationInfo(innerContext, Listeners.get(MemberID), read(MemberID)))[it.UUID==MemberID]
		//info("I noticed" + occurrence.agentType)
	}
	on MemberLeft{
		
	}
}

event Info{
	
}

