/** 
 * 
 */
package be.uclouvain.aptitude.agents.algorithm

import be.uclouvain.aptitude.agents.algorithm.util.BBOX
import be.uclouvain.aptitude.agents.algorithm.util.BBoxes2D
import be.uclouvain.organisation.OrganisationInfo
import be.uclouvain.organisation.platform.ObserverRole
import be.uclouvain.organisation.told.AlgorithmJoinPlatform
import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.ExternalContextAccess
import io.sarl.core.Initialize
import io.sarl.core.Logging
import java.util.ArrayList
import java.util.TreeMap
import be.uclouvain.organisation.platform.MissionSensitivity

/** 
 * @author manjah
 * 
 */
behavior CounterRole extends ObserverRole {
	uses Logging, ExternalContextAccess, DefaultContextInteractions, Behaviors, ObserverCapacity

	
//	protected var TOLDSpace : OpenEventSpace
//	protected var TOLDID : UUID
//
//	protected var expertID : UUID

	

	// Variables and code line for ObjectCounter :
	
	val ObjectPresentInframe = new TreeMap<Integer, BBoxes2D>
	val ObjectToBeAnalyzed = new ArrayList<BBoxes2D>;
	
	// end
	on Initialize {
		setSkill(new CountingSkill,ObserverCapacity)
	}

	on MissionSensitivity {
		emit(TOLDSpace, new AlgorithmJoinPlatform(PlatformContext, TOLDSpace, "SORT", "Tracker"))
		//emit(TOLDSpace, new AlgorithmJoinPlatform(occurrence.context, TOLDSpace, "SORT", "Tracker"))
	}

	on BBoxes2DTrackResult {
		
		var ratio_width = 1920.0 / occurrence.bboxes2DTrack.dimWidth
		var ratio_height = 1080.0 / occurrence.bboxes2DTrack.dimHeight
		var frameNumber = occurrence.bboxes2DTrack.frameNumber

		ObjectToBeAnalyzed.clear

		for (var i = 0; i < occurrence.bboxes2DTrack.numberObjects; i++) {
			var X = occurrence.bboxes2DTrack.bboxes.get(4 * i) * ratio_width
			var Y = occurrence.bboxes2DTrack.bboxes.get(4 * i + 1) * ratio_height
			var W = occurrence.bboxes2DTrack.bboxes.get(4 * i + 2) * ratio_width
			var H = occurrence.bboxes2DTrack.bboxes.get(4 * i + 3) * ratio_height
			var classID = occurrence.bboxes2DTrack.classIDs.get(i)
			var globalID = occurrence.bboxes2DTrack.globalIDs.get(i)
			var conf = occurrence.bboxes2DTrack.detConfs.get(i)

			if (ObjectPresentInframe.containsKey(globalID)) {
				ObjectPresentInframe.get(globalID).update(X, Y, W, H, classID, frameNumber, conf)
			} else {
				ObjectPresentInframe.put(globalID,
					new BBoxes2D(new BBOX(X, Y, W, H), conf, globalID, classID, frameNumber))
			}

			ObjectToBeAnalyzed.add(ObjectPresentInframe.get(globalID))
		}
		Signal2Perception(new ArrayList(ObjectToBeAnalyzed))
		if (occurrence.bboxes2DTrack.lastFrame) {
			info("That was it! " )
			//val totalTime = (((System.currentTimeMillis() - this.start) / 1000))
			//info("It took " + totalTime.toString + " seconds")
			//info("Average FPS : " + (occurrence.bboxes2DTrack.frameNumber / totalTime).toString)
		}
	}

	// def has_crossed_counting_line(bbox, line){
	// } 
	
	

}

