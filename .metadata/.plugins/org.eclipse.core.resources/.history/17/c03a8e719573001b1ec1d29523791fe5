/** 
 * 
 */
package be.uclouvain.aptitudeAgents

import be.uclouvain.organisation.platform.AnalystRole
import io.sarl.core.Behaviors
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.lang.core.EventSpace
import java.util.TreeMap
import java.util.UUID
import java.util.ArrayList

/** 
 * @author manjah
 * 
 */
agent Expert {
	uses Logging, Behaviors

	var platformlistenersSpaceIDs : TreeMap<UUID, EventSpace>
	var platformList : ArrayList<UUID>
	on Initialize {
		// Event trigger before the agent begin to live or to be used.
		// You should put all the initialization statements in this block of code
		loggingName = "Expert-" + this.ID
		this.platformlistenersSpaceIDs = occurrence.parameters.get(0) as TreeMap<UUID, EventSpace>
		this.platformList = occurrence.parameters.get(0) as ArrayList<UUID>
		info("Expert agent was started.")
		
	}
	on newMission {

		registerBehavior(new AnalystRole(this), occurrence.missionData.sensitivity)
		val platformdUUID = platformList.get(occurrence.missionData.location);
		val openSpace = platformlistenersSpaceIDs.get(platformdUUID)
	}
}
