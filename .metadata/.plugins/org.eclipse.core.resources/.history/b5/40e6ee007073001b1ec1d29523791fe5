/** 
 * 
 */
package be.uclouvain.aptitudeAgents

import be.uclouvain.organisation.interactivity.element.ElementRole
import io.sarl.core.Behaviors
import io.sarl.core.Logging
import io.sarl.core.MemberJoined
import io.sarl.core.Initialize
import io.sarl.core.InnerContextAccess
import io.sarl.core.Lifecycle
import be.uclouvain.organisation.interactivity.element.ElementInformation
import UDPMessages.UDP_Message_RequestSpawn
import java.util.UUID
import UDPMessages.UDP_Message_RequestWithdraw

/** 
 * @author manjah
 * 
 */
behavior UserRole extends ElementRole {

uses Behaviors, DeviceCapacity, InnerContextAccess, Lifecycle, Behaviors


	on Initialize {
		spawnInContext(Expert, innerContext)
			}

//	on AuthorizationToJoin {
//		wake(new JoinWorld(occurrence.contextID, occurrence.defaultSpaceID))[it.UUID == occurrence.entityID]
//		}

on MemberJoined {
	if (occurrence.agentType == "be.uclouvain.world_elements.Pedestrian") {
			if (getEntityList.get(occurrence.agentID).screenID !== -1) {
			getEntityList.get(occurrence.agentID).screenID = -1

			updateBehavior
		}
	}

}

	on ElementInformation {
		
		val msg =occurrence.information; 
		if (msg instanceof UDP_Message_RequestSpawn) {
			//val worldUUID = //worldList.get(msg.sceneID);
			//val entityID = UUID.fromString(msg.actorUID)
			// val data = new EntityData3D(entityID, new Point3d(msg.position.x, msg.position.y, msg.position.z),
			// entityList.get(entityID))
			// emit(worldlistenersSpaceIDs.get(worldUUID), new AddEntity(getDefaultSpace(), data))[it.UUID == worldUUID]
			// entityList.get(entityID).screenID = msg.sceneID
			
			wakeBehavior(new )
			updateBehavior
			}
			else if (msg instanceof UDP_Message_RequestWithdraw) {
			var entityID = UUID.fromString(msg.actorUID)
				// var worldUUID = worldList.get(entityList.get(entityID).screenID)
			// emit(worldlistenersSpaceIDs.get(worldUUID), new RemoveEntity(Pedestrian, entityID))[it.UUID == worldUUID]
		}
	}


}
