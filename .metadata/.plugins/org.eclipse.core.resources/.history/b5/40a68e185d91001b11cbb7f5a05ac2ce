/** 
 * 
 */
package be.uclouvain.aptitude.agents.algorithm

import be.uclouvain.organisation.platform.ObserverRole
import be.uclouvain.organisation.platform.LeavePlatform
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Logging
import java.io.FileReader
import org.json.simple.JSONObject
import org.json.simple.parser.JSONParser

/** 
 * @author manjah
 * 
 */
behavior DetectorRole extends ObserverRole {
	uses Logging, Detection, DefaultContextInteractions

	var partnerDetectionName : String


	on Initialize {
		setSkill(new DetectionImpl)
		var parser = new JSONParser(); // occurrence.parameters.get(0).toString
		var configPathDetector = occurrence.parameters.get(0).toString
		var jsonDetector = parser.parse(new FileReader(configPathDetector)) as JSONObject;
		enableDataAcquisition(jsonDetector)
	}
	
	on PartnerDetectionFound {
		
		this.partnerDetectionName = occurrence.partnerName
		info("Detection partner found: " + this.partnerDetectionName)
		Thread.sleep(2000)
		disableDataAcquisition(1) // PLAY
		

	// Thread.sleep(10000)
	// sendAction(2) // PAUSE
	// Thread.sleep(5000)
	// this.start -= 5000
	// sendAction(3) 	// RESUME
}

	on BBoxes2DResult{
		emit(new BBoxes2DResult(occurrence.bboxes2D))[it.UUID == observerID]

		 //println("***********************")
		//println("---- etectionD " + occurrence.bboxes2D.frameNumber)
		// println("*  " + Arrays.toString(occurrence.bboxes2D.bboxes))
		// println("*  " + Arrays.toString(occurrence.bboxes2D.classIDs))
		// println("*  " + Arrays.toString(occurrence.bboxes2D.detConfs))
		// println("*  " + occurrence.bboxes2D.lastFrame)
		// println("***********************")
		// if (occurrence.bboxes2D.lastFrame) {
							// info("That was it!")
		// val totalTime = (((System.currentTimeMillis() - this.start) / 1000))
		// info("It took " + totalTime.toString + " seconds")
		// info("Average FPS : " + (occurrence.bboxes2D.frameNumber / totalTime).toString)
		// }
		// if (occurrence.bboxes2D.frameNumber != this.expectedFrame) {
		// println("UNEXPECTED")
		// }
		// this.expectedFrame = occurrence.bboxes2D.frameNumber +1
	}

	on Destroy {
		// Event trigger when the behavior is destroyed from the system.
		// You should put all the resource releasing statements in this block of code.
		info("The behavior was stopped.")
	}

	on LeavePlatform {
		// join(BaseContext.ID, BaseSpace.spaceID.ID)
		info("Observer Leaving")
		disableDataAcquisition(4)
		//leave(PlatformID)
	}
}
