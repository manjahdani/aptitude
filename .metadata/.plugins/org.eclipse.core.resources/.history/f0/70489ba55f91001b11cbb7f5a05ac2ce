/** 
 * 
 */
package be.uclouvain.aptitude.agents.algorithm

import be.uclouvain.aptitude.agents.algorithm.PythonTwinAlgorithm
import be.uclouvain.aptitude.agents.algorithm.messages.BaseMessage
import io.sarl.core.Logging
import io.sarl.core.AgentTask
import org.json.simple.JSONObject
import com.hazelcast.util.UuidUtil
import be.uclouvain.aptitude.agents.algorithm.messages.RequestMessage
import io.sarl.core.Schedules

/** 
 * @author manjah
 * 
 */
abstract skill PythonAccess implements PythonTwinAlgorithm {
	uses Logging, Schedules

	protected var topicRequestSub : String
	

	protected var pendingRequestID : String
	protected var requestTask : AgentTask

	@SuppressWarnings("potential_field_synchronization_problem")
	def install {
		topicRequestSub = CommunicationManager.instance.subscribeTopic("request", this)
	}
	def enableDataAcquisition(o : Object) {

		var jsonConfig = o as JSONObject
		this.pendingRequestID = UuidUtil.newSecureUuidString
		this.requestTask = every(1000) [
			info("Tracking partner not found, send discovery message")
			var requestMessage = new RequestMessage()
			requestMessage.requestID = this.pendingRequestID
			requestMessage.agentID = owner.ID.toString
			requestMessage.jsonConfig = jsonConfig.toString
			CommunicationManager.instance.publishMessage(topicRequestSub, requestMessage)
		]
	}

	override update(m : BaseMessage) {
		// TODO Auto-generated code.
	}

	override disableDataAcquisition(o : Object) {
		// TODO Auto-generated code.
	}
}
