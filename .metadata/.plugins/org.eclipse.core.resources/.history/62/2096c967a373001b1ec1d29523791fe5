/** 
 * 
 */
package be.uclouvain.aptitudeAgents

import io.sarl.core.Initialize
import io.sarl.core.InnerContextAccess
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import java.util.TreeMap

/** 
 * @author manjah
 * 
 */
agent TOLDAgent {
	uses Logging, Lifecycle, InnerContextAccess

 	val AlgorithmDatabase : TreeMap<String,String> = new TreeMap<String,String>
	
	
	// configPath
 	
	on Initialize {
		// Event trigger before the agent begin to live or to be used.
		// You should put all the initialization statements in this block of code.
		
		AlgorithmDatabase.put("YOLO", "F:/aptitude/aptitude-agents/src/main/resources/config/test-YOLO.json")
		AlgorithmDatabase.put("TinyYOLO","F:/aptitude/aptitude-agents/src/main/resources/config/test-TinyYOLO.json")
		AlgorithmDatabase.put("SORT", "F:/aptitude/aptitude-agents/src/main/resources/config/test-SORT.json")
		AlgorithmDatabase.put("DeepSORT", "F:/aptitude/aptitude-agents/src/main/resources/config/test-DeepSORT.json")
		loggingName = "TOLD-" + this.ID
		
		for(k : AlgorithmDatabase.keySet){
			spawnInContext(Algorithm,innerContext,k,0)
		}
		
		info("TOLD agent was started.")
	}


}
