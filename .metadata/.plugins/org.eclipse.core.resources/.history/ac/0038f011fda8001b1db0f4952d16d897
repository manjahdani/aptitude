package be.uclouvain.aptitude.surveillance.views.video;

import java.io.ByteArrayInputStream;
import java.util.Random;

import org.opencv.core.Mat;
import org.opencv.core.MatOfByte;
import org.opencv.core.Point;
import org.opencv.core.Scalar;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.imgproc.Imgproc;
import org.opencv.videoio.VideoCapture;

import com.vaadin.flow.component.AttachEvent;
import com.vaadin.flow.component.DetachEvent;
import com.vaadin.flow.component.UI;
import com.vaadin.flow.component.button.Button;
import com.vaadin.flow.component.dependency.CssImport;
import com.vaadin.flow.component.html.Image;
import com.vaadin.flow.component.html.Paragraph;
import com.vaadin.flow.component.orderedlayout.HorizontalLayout;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.router.PageTitle;
import com.vaadin.flow.router.Route;
import com.vaadin.flow.server.StreamResource;
import com.vaadin.flow.shared.Registration;

import be.uclouvain.aptitude.surveillance.Broadcaster;
import be.uclouvain.aptitude.surveillance.views.main.MainView;

@Route(value = "video", layout = MainView.class)
@PageTitle("Video")
@CssImport("./styles/views/video/video-view.css")
public class VideoView extends VerticalLayout {

	Registration broadcasterRegistration;
	
	private Image image;
	private Paragraph frameNumber;
	private Paragraph averageFPS;
	
	private Button tinySortButton;
	private Button yoloSortButton;
	private Button tinyDeepSORTButton;
	private Button yoloDeepSORTButton;
	
	private VideoCapture cap;
	private Mat mat;

	private int[] R;
	private int[] G;
	private int[] B;

	private long startProc;
	
	private String configPathYOLO = "E:/SARL_0.11/workspace/be-uclouvain-aptitude/src/main/resources/config/test-YOLO.json";
	private String configPathTinyYOLO = "E:/SARL_0.11/workspace/be-uclouvain-aptitude/src/main/resources/config/test-TinyYOLO.json";
	private String configPathSORT = "E:/SARL_0.11/workspace/be-uclouvain-aptitude/src/main/resources/config/test-SORT.json";
	private String configPathDeepSORT = "E:/SARL_0.11/workspace/be-uclouvain-aptitude/src/main/resources/config/test-DeepSORT.json";
	
	private int expectedFrame = 0;

	public VideoView() {
		addClassName("video-view");
		
		
		image = new Image("images/APTITUDE.jpg", "APTITUDE image");
		image.setWidth("800px");
		
		frameNumber = new Paragraph("");
		averageFPS = new Paragraph("");
		
//		this.tinySortButton = new Button("Spawn YOLO Tiny + SORT", e -> {
//			startAgent(configPathTinyYOLO, configPathSORT);
//	    });
//		this.tinyDeepSORTButton = new Button("Spawn YOLO Tiny + DeepSORT", e -> {
//			startAgent(configPathTinyYOLO, configPathDeepSORT);
//	    });
//		this.yoloSortButton = new Button("Spawn YOLO + SORT", e -> {
//			startAgent(configPathYOLO, configPathSORT);
//	    });
//		this.yoloDeepSORTButton = new Button("Spawn YOLO + DeepSORT", e -> {
//			startAgent(configPathYOLO, configPathDeepSORT);
//	    });

		add(image);
		add(frameNumber);
		add(averageFPS);
		
		HorizontalLayout hl = new HorizontalLayout();
		hl.add(yoloSortButton);
		hl.add(yoloDeepSORTButton);
		hl.add(tinySortButton);
		hl.add(tinyDeepSORTButton);
		add(hl);
		
		setPadding(true);
		setMargin(true);
		setSpacing(true);
		
		nu.pattern.OpenCV.loadShared();
		this.cap = new VideoCapture();
		this.mat = new Mat();
		
	    this.R = new int[10000];
	    this.G = new int[10000];
	    this.B = new int[10000];
		Random randNum = new Random();
		for (int i = 0; i < 10000; i++) {
		   this.R[i] = randNum.nextInt(256);
		   this.G[i] = randNum.nextInt(256);
		   this.B[i] = randNum.nextInt(256);
		}
				
	}
	
//	private void startAgent(String configDetector, String configTracker) {
//		try {
//			SRE.getBootstrap().startAgent(CameraAgent.class, configDetector, configTracker);
//			changeSetButtons();
//		} catch (Exception e1) {
//			e1.printStackTrace();
//		}
//	}

	private void changeSetButtons() {
		boolean enabled = !this.tinySortButton.isEnabled();
		this.tinySortButton.setEnabled(enabled);
		this.tinyDeepSORTButton.setEnabled(enabled);
		this.yoloSortButton.setEnabled(enabled);
		this.yoloDeepSORTButton.setEnabled(enabled);
	}
	
    @Override
    protected void onAttach(AttachEvent attachEvent) {
        UI ui = attachEvent.getUI();
        broadcasterRegistration = Broadcaster.register(bboxes2DTrackMessage -> {
        	if (bboxes2DTrackMessage.getFrameNumber() == 0) {
        		this.cap.open("E:/APTITUDE/pytb/videos/traffic_example_no_sound.mp4");
        		this.startProc = System.currentTimeMillis();
        	}
        	if (this.expectedFrame != bboxes2DTrackMessage.getFrameNumber()) {
        		this.cap.set(1, bboxes2DTrackMessage.getFrameNumber());        		
        	}
        	this.expectedFrame = bboxes2DTrackMessage.getFrameNumber() + 1;
        	
        	System.out.println("+ " + bboxes2DTrackMessage.getFrameNumber());
    		long start = System.currentTimeMillis();
    		if (cap.read(this.mat)) {
//    			long read = System.currentTimeMillis();

    			double ratio_width = (double) this.mat.width()/bboxes2DTrackMessage.getDimWidth();
    			double ratio_height = (double) this.mat.height()/bboxes2DTrackMessage.getDimHeight();
    			double x, y, w, h;
    			int id;
    			for (int i = 0; i < bboxes2DTrackMessage.getNumberObjects(); i++) {
		            x = bboxes2DTrackMessage.getBboxes()[4 * i] * ratio_width;
		            y = bboxes2DTrackMessage.getBboxes()[4 * i + 1] * ratio_height;
		            w = bboxes2DTrackMessage.getBboxes()[4 * i + 2] * ratio_width;
		            h = bboxes2DTrackMessage.getBboxes()[4 * i + 3] * ratio_height;
		            id = bboxes2DTrackMessage.getGlobalIDs()[i];
		            Scalar sc = new Scalar(this.R[id], this.G[id], this.B[id]);
		            Imgproc.rectangle(mat, new Point(x, y), new Point(x+w, y+h), sc, 2);
    			}
    			
	    	    MatOfByte mob = new MatOfByte();
	    	    Imgcodecs.imencode(".jpg", mat, mob);
	    	    byte[] byteArray = mob.toArray();

//	    		long transf = System.currentTimeMillis();
//	    		System.out.println("tranf time: " + (transf-start));
	    		
	        	StreamResource resource = new StreamResource("VideoImage.jpg", () -> new ByteArrayInputStream(byteArray));
	            ui.access(() -> {
	            	image.setSrc(resource);
	            	int frame = bboxes2DTrackMessage.getFrameNumber();
	            	frameNumber.setText("Frame number:  " + frame);
	            	double FPS = (double) frame / ((System.currentTimeMillis() - this.startProc)/1000);
	            	averageFPS.setText("Average FPS:  " + String.format("%.1f", FPS));
	            	
	            	if (bboxes2DTrackMessage.isLastFrame()) {
	            		changeSetButtons();
	            	}
	            });
    		}
        });
    }

    @Override
    protected void onDetach(DetachEvent detachEvent) {
        broadcasterRegistration.remove();
        broadcasterRegistration = null;
    }
	
	
}