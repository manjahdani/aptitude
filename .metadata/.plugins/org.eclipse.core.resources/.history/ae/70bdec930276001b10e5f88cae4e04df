/** 
 * 
 */
package be.uclouvain.aptitude.agents.algorithm

import be.uclouvain.aptitude.agents.AlgorithmNeeded
import be.uclouvain.organisation.told.EntityRole
import io.sarl.core.Behaviors
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Logging

/** 
 * @author manjah
 * 
 */
agent Algorithm {
	
	uses Behaviors,Logging, Lifecycle
	
	//var belief : String; 
	var name   : String;
	var level : int
	
	on Initialize {
		level = occurrence.parameters.get(0) as Integer
		name = occurrence.parameters.get(1) as String
		//		if (belief == "YOLO" || belief == "TinyYOLO"){
//			goal = "Detector"
//		}
//		else{
//			goal = "Tracker"
//		}
		loggingName = "ALGORITHM-"+ name + ""+ level +"-" + this.ID
		//info("Algorithm level" + belief + " was started.")
		registerBehavior(new EntityRole(this))
		
		if(level>0)
		{
			switch(occurrence.parameters.get(2)){
				case "counter" :{
				registerBehavior(new ObserverRole(this))
				}
				case "tracker": {
				registerBehavior(new ObserverRole(this))
				}
				case "detector": {
				registerBehavior(new ObserverRole(this))
				}
			}
		}
	}
	on AlgorithmNeeded{
		
		if(occurrence.belief ==name)
		{
			info("I receive a JoinPlatform " + occurrence.task + occurrence.belief)
			spawnInContext(Algorithm, occurrence.contextID, 1,occurrence.belief,
			occurrence.task)
			}
		}
}


		

