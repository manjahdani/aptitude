package be.uclouvain.organisation.told

import be.uclouvain.organisation.AddMember
import be.uclouvain.organisation.AuthorizationToJoin
import be.uclouvain.organisation.TOLDOrganisationInfo
import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.InnerContextAccess
import io.sarl.core.Logging
import io.sarl.core.MemberJoined
import io.sarl.core.MemberLeft
import io.sarl.core.OpenEventSpace
import io.sarl.core.OpenEventSpaceSpecification
import java.util.HashMap
import java.util.UUID
import be.uclouvain.organisation.PlatformOrganisationInfo
import io.sarl.core.ExternalContextAccess
import be.uclouvain.organisation.AuthorizationToJoinContext

/** 
 * Trusted Observations and Learning Database is a database aiming to achieve two goals. 
 * 
 *  - Storing the information communicated by a platform.  
 * 
 *  - Contains ground truth signals dedicated to learning.
 * 
 * @author $Author: manjahdani$
 * @version $0.0.2$
 * @date $16/04/2021$
 * @mavengroupid $be.uclouvain.aptitude$
 * @mavenartifactid $organisation$
 * 
 */
behavior TOLDRole {
	
	uses Behaviors, AccessDatabaseCapacity, InnerContextAccess,Logging, ExternalContextAccess, DefaultContextInteractions
	
	
	protected var platformID : UUID
	protected val privateSpacesListeners = new HashMap<UUID, OpenEventSpace>
	/*
	 * The platform register the context of a platform 
	 */

	@SuppressWarnings("discouraged_occurrence_readonly_use")
	on AddEntry{
		info("Creating entry for " + occurrence.key + occurrence.data)
		create(occurrence.key, occurrence.data)
	}
	on DeleteEntry{
		delete(occurrence.key)
	}
	@SuppressWarnings("discouraged_occurrence_readonly_use")
	on DataEntry {
		//info("Updating key : " + occurrence.key  +" - " + occurrence.class)
		update(occurrence.key, occurrence.data)
	}
	
	/*
	 * Send if available the stored data about it. 
	 */
	@SuppressWarnings("discouraged_occurrence_readonly_use")
	on AddMember{
		info("received add member from " + occurrence.source.UUID.toString.substring(0, 5))
		occurrence.SourceEventSpace.emit(this.ID, new AuthorizationToJoinContext(innerContext, innerContext.getDefaultSpace as OpenEventSpace, occurrence.source.getUUID))
	}
	@SuppressWarnings("discouraged_occurrence_readonly_use")
	on ReadEntry {
		privateSpacesListeners.get(occurrence.source.UUID).emit(this.ID, new QueryAnswer(read(this.ID)))
	}
	on MemberJoined {
				
		var memberID = occurrence.agentID;
		privateSpacesListeners.put(memberID,
			innerContext.getOrCreateSpaceWithID(OpenEventSpaceSpecification, UUID.randomUUID))
		emit(new TOLDOrganisationInfo(innerContext, privateSpacesListeners.get(memberID), read(memberID))) [
			it.UUID == memberID
		]
		privateSpacesListeners.get(memberID).register(asEventListener)

	}

	on PlatformOrganisationInfo {
		info("Platform organisation - " + occurrence.platformName + " encountered ")
		platformID = occurrence.source.UUID
		if (!privateSpacesListeners.containsKey(platformID)){
			info("Platform was not encountered")
			synchronized (this) {
				privateSpacesListeners.put(platformID,occurrence.spaceID)
				occurrence.spaceID.register(asEventListener)
				occurrence.spaceID.emit(new TOLDOrganisationInfo(innerContext, privateSpacesListeners.get(platformID), read(platformID)))[it.UUID==platformID]
			}
		}	
	}
	@SuppressWarnings("discouraged_occurrence_readonly_use")
	on MemberLeft {
		privateSpacesListeners.remove(occurrence.agentID)
	}
}
