/** 
 */
package be.uclouvain.organisation.platform

import be.uclouvain.organisation.PlatformOrganisationInfo
import be.uclouvain.organisation.TOLDOrganisationInfo
import be.uclouvain.organisation.told.util.AlgorithmInfo
import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.OpenEventSpace
import io.sarl.lang.core.AgentContext
import java.util.LinkedList
import java.util.UUID
import java.util.TreeMap
import be.uclouvain.organisation.Identification

/** 
 * Receives data at a certain stage (Raw, Information, Knowledge, Insight) and process it. 
 * Observers are distinct if they process a different Signal or use another Model or both .
 * 
 * It Becomes a multi-layer concept if it involves several entities observing the same target(data).
 * A possible Holonic configuration could have the following layers : 
 * 
 * 			- Multiple Sensors at different location analysing the same scene
 *          - Multiple Algorithms with different beliefs analysing the same signal. 
 * 
 * Example : let's take a junction equipped with three cameras (C_1  ,C_2,C_3) aiming to provide a list of the cars in the scene. 
 * The cameras dispose two algorithms models (M_1 ,M_2). Let us assume, that C_1  uses M_1and M_2 to process the data while others only use M_1. 
 * You have four Observers (O_1,O_2,O_3,O_4) = (C_1 M_1; C_1 M_2; C_2 M_1; C_3 M_1). 
 * A stable and scalable approach would consider two supplementary Observers to gather this as a Holonic system. 
 * On the one hand an Observer O_5 concatenating the perceptions of O_1, O_2 and on the other hand, a sixth Observer for the perceptions of O_5 O_3 O_4. 
 * Notice that Observers O_1and O_2 became Signals for O_5, becoming itself a signal for O_6. 
 * 
 * @author $Author: manjahdani$
 * @version $0.0.2$
 * @date $16/04/2021$
 * @mavengroupid $be.uclouvain.aptitude$
 * @mavenartifactid $organisation$
 */
 
behavior ObserverRole {
	
	uses Logging, Behaviors, DefaultContextInteractions

	protected var TOLDSpace : OpenEventSpace
	protected var TOLDContext : AgentContext
	
	protected var PlatformSpace : OpenEventSpace
	protected var PlatformContext : AgentContext
	

	protected var sensitivity= new LinkedList<Integer>
	
	protected var ObserverADN : AlgorithmInfo	
	
	protected var isMaster : Boolean = false
	
	
	protected var Listeners = new LinkedList<UUID>
	protected var Providers = new LinkedList<UUID>
	
	protected var MissionSpaceList = new TreeMap<UUID,OpenEventSpace>

	@SuppressWarnings("potential_field_synchronization_problem")
	on Initialize {
		ObserverADN = occurrence.parameters.get(0) as AlgorithmInfo
		if(occurrence.parameters.get(2)!=null){
		var ObserverID = occurrence.parameters.get(2) as UUID
		MissionSpaceList.put(ObserverID ,occurrence.parameters.get(1) as OpenEventSpace) //@FIXME maybe there is a huge mistunderstanding of the use of Spaces, maybe we could have address which is simpler
		MissionSpaceList.get(ObserverID).register(asEventListener)
		Listeners.add(occurrence.parameters.get(2) as UUID)}
		info("Received Mission Space from "+ Listeners)
	}

	on Destroy {
		info("The behavior was stopped.")
	}

	@SuppressWarnings("potential_field_synchronization_problem")
	on PlatformOrganisationInfo  { 
		PlatformContext = occurrence.context
		PlatformSpace = occurrence.spaceID
		PlatformSpace.register(asEventListener)
		PlatformSpace.emit(this.ID,new Identification(ObserverADN.name))[it.UUID==PlatformContext.ID]
		for(ObserverID : MissionSpaceList.keySet){
			MissionSpaceList.get(ObserverID).emit(this.ID, new SensititvityRequest)[it.UUID == ObserverID]
		}
		 // Put here because it seems that the change is not fast enough between initalize and here.. anyway no big deal
	}
	
	@SuppressWarnings("potential_field_synchronization_problem")
	on TOLDOrganisationInfo {
		TOLDContext = occurrence.context
		TOLDSpace = occurrence.spaceID
		TOLDSpace.register(asEventListener)
	}

	@SuppressWarnings("potential_field_synchronization_problem")
	on SensititvityRequest {

		// info("I received A Sensititivy Request" + occurrence.source.UUID)
		info("Thank you: " + occurrence.source.UUID + "  Use the following sensitivity" + sensitivity)
		var MissionSpace = (MissionSpaceList.filter[p1, p2|p2.spaceID == occurrence.source.spaceID]).values.get(0)
		var s = isMaster? sensitivity:newLinkedList(sensitivity.pop)
		MissionSpace.emit(this.ID, new MissionSensitivity(s))[it.UUID == occurrence.source.UUID]

	}
	on AddMission{
		MissionSpaceList.put(occurrence.source.UUID, occurrence.SourceEventSpace as OpenEventSpace)
		(occurrence.SourceEventSpace as OpenEventSpace).register(asEventListener)
		if (!Listeners.contains(occurrence.source.UUID)) {
			Listeners.add(occurrence.source.UUID)
			info(Listeners)
			//info(MissionSpaceList)
		}
	}
	@SuppressWarnings("potential_field_synchronization_problem")
	on StopMission {
		if (Listeners.contains(occurrence.source.UUID)){
			info("I received the StopMission")
			emit(new StopMission(occurrence.expertID))
			emit(new LeavePlatform)[it==me]
		}
	}
	
		@SuppressWarnings("potential_field_synchronization_problem")
		on LeavePlatform {
		//join(BaseContext.ID, BaseSpace.spaceID.ID)
		info("ObserverLeaving")
		//leave(PlatformContext.ID)
	}
}


