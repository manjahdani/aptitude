/** 
 * 
 */
package be.uclouvain.aptitudeAgents

import be.uclouvain.aptitude.detection.Detection
import be.uclouvain.aptitude.detection.DetectionImpl
import be.uclouvain.aptitude.other.BBoxes2DResult
import be.uclouvain.aptitude.other.BBoxes2DTrackResult
import be.uclouvain.aptitude.other.PartnerDetectionFound
import be.uclouvain.aptitude.other.PartnerTrackingFound
import be.uclouvain.aptitude.tracking.Tracking
import be.uclouvain.aptitude.tracking.TrackingImpl
import be.uclouvain.aptitudeAgents.util.BBOX
import be.uclouvain.aptitudeAgents.util.BBoxes2D
import be.uclouvain.aptitudeAgents.util.countingLine
import be.uclouvain.organisation.platform.ObserverCapacity
import be.uclouvain.organisation.told.LeavePlatform
import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Destroy
import io.sarl.core.ExternalContextAccess
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.OpenEventSpace
import java.io.FileReader
import java.util.ArrayList
import java.util.TreeMap
import java.util.UUID
import org.arakhne.afc.math.geometry.d2.d.Point2d
import org.json.simple.JSONObject
import org.json.simple.parser.JSONParser

/** 
 * @author manjah
 * 
 */
behavior ObserverRole {
	uses Logging, ObserverCapacity, DefaultContextInteractions, ExternalContextAccess, Logging,Behaviors, Detection, Tracking

	protected var PlatformSpace : OpenEventSpace
	protected var PlatformID : UUID

	protected var ExpertID : UUID

	var configPathYOLO = "F:/aptitude/aptitude-agents/src/main/resources/config/test-YOLO.json"
	var configPathTinyYOLO = "F:/aptitude/aptitude-agents/src/main/resources/config/test-TinyYOLO.json"
	var configPathSORT = "F:/aptitude/aptitude-agents/src/main/resources/config/test-SORT.json"
	var configPathDeepSORT = "F:/aptitude/aptitude-agents/src/main/resources/config/test-DeepSORT.json"

	var partnerDetectionName : String
	var partnerTrackingName : String
	var start : long
	
	// Variables and code line for ObjectCounter :
	val countingLines : TreeMap<String, countingLine> = new TreeMap<String, countingLine>;
	
	val CTA = new countingLine(1235, 700, 309, 664, 1);
	val CTB = new countingLine(1531, 392, 1775, 376, -1)
	
	val ObjectPresentInframe = new TreeMap<Integer,BBoxes2D>
	// end 
	val ObjectToBeAnalyzed = new ArrayList<BBoxes2D>; 
	on Initialize{
		info("My Observer Role started")

		countingLines.put("A", CTA) // ObjectCounter
		countingLines.put("B", CTB) // ObjectCounter
		
		setSkill(new DetectionImpl)
		setSkill(new TrackingImpl)

		var parser = new JSONParser(); // occurrence.parameters.get(0).toString

		var configPathDetector = configPathYOLO
		var jsonDetector = parser.parse(new FileReader(configPathDetector)) as JSONObject;
		requestDetector(jsonDetector)

		var configPathTracker = configPathSORT // occurrence.parameters.get(1).toString
		var jsonTracker = parser.parse(new FileReader(configPathTracker)) as JSONObject;
		requestTracker(jsonTracker)
	}
	on LeavePlatform {
		// join(BaseContext.ID, BaseSpace.spaceID.ID)
		leave(PlatformID)
	}
	//on JoinPlatform {
		//join(occurrence.contextID.getID, occurrence.DefaultSpaceID.getSpaceID.getID)
		//occurrence.DefaultSpaceID.register(asEventListener)
	// }
//	on Initialize {
//		
//		spawn(CameraAgent, configPathTinyYOLO, configPathSORT)
//		Thread.sleep(15000)
//		spawn(CameraAgent, configPathYOLO, configPathSORT)
//		killMe
	//	}
	on PartnerDetectionFound {
		this.partnerDetectionName = occurrence.partnerName
		info("Detection partner found: " + this.partnerDetectionName)
		Thread.sleep(2000)
		sendAction(1) // PLAY
		this.start = System.currentTimeMillis()

			// Thread.sleep(10000)
			// sendAction(2) // PAUSE
		// Thread.sleep(5000)
		// this.start -= 5000
		// sendAction(3) 	// RESUME
	}

	on PartnerTrackingFound {
		this.partnerTrackingName = occurrence.partnerName
		info("Tracking Partner found: " + this.partnerTrackingName)
	}

	on BBoxes2DResult {
		getTrack(occurrence.bboxes2D)

		//println("***********************")
		//println("----  " + occurrence.bboxes2D.frameNumber)
		//println("*  " + Arrays.toString(occurrence.bboxes2D.bboxes))
		//println("*  " + Arrays.toString(occurrence.bboxes2D.classIDs))
		//println("*  " + Arrays.toString(occurrence.bboxes2D.detConfs))
		//println("*  " + occurrence.bboxes2D.lastFrame)
		//println("***********************")
		// if (occurrence.bboxes2D.lastFrame) {
		// info("That was it!")
		// val totalTime = (((System.currentTimeMillis() - this.start) / 1000))
		// info("It took " + totalTime.toString + " seconds")
		// info("Average FPS : " + (occurrence.bboxes2D.frameNumber / totalTime).toString)
		// }
		// if (occurrence.bboxes2D.frameNumber != this.expectedFrame) {
		// println("UNEXPECTED")
		// }
		// this.expectedFrame = occurrence.bboxes2D.frameNumber +1
	}

	on BBoxes2DTrackResult {

		 //println("***********************")
		 //println("*  " + occurrence.bboxes2DTrack.frameNumber)
		 //println("*  " + occurrence.bboxes2DTrack.trackingTime)
		 //println("*  " + Arrays.toString(occurrence.bboxes2DTrack.globalIDs))
		 //println("*  " + Arrays.toString(occurrence.bboxes2DTrack.bboxes))
		 //println("*  " + Arrays.toString(occurrence.bboxes2DTrack.classIDs))
		 //println("*  " + Arrays.toString(occurrence.bboxes2DTrack.detConfs))
		 //println("*  " + occurrence.bboxes2DTrack.lastFrame)
//println("***********************")
		 
		 
		 	var ratio_width =  1920.0/occurrence.bboxes2DTrack.dimWidth
		 	var ratio_height = 1080.0 / occurrence.bboxes2DTrack.dimHeight
			var frameNumber = occurrence.bboxes2DTrack.frameNumber

		 	ObjectToBeAnalyzed.clear
		 	
		 	for (var i = 0; i<occurrence.bboxes2DTrack.numberObjects; i++)
		 	{ 
		 		var X = occurrence.bboxes2DTrack.bboxes.get(4 * i) 	* ratio_width
		 		var Y = occurrence.bboxes2DTrack.bboxes.get(4 * i + 1) * ratio_height
		 		var W = occurrence.bboxes2DTrack.bboxes.get(4 * i + 2) * ratio_width
		 		var H = occurrence.bboxes2DTrack.bboxes.get(4 * i + 3) * ratio_height
		 		var classID = occurrence.bboxes2DTrack.classIDs.get(i)
		 		var globalID = occurrence.bboxes2DTrack.globalIDs.get(i)
		 		var conf = occurrence.bboxes2DTrack.detConfs.get(i)
		 		
		 		if(ObjectPresentInframe.containsKey(globalID)){
		 			ObjectPresentInframe.get(globalID).update(X, Y, W, H, classID, frameNumber, conf)
			}
		 		else {
		 			ObjectPresentInframe.put(globalID,new BBoxes2D(new BBOX(X, Y, W, H), conf, globalID, classID,frameNumber))}
		 			
		 		ObjectToBeAnalyzed.add(ObjectPresentInframe.get(globalID))
		 	}

			attemp_count(new ArrayList(ObjectToBeAnalyzed))
	


			
		
		 
		if (occurrence.bboxes2DTrack.lastFrame) {
			info("That was it! " )
			val totalTime = (((System.currentTimeMillis() - this.start) / 1000))
			info("It took " + totalTime.toString + " seconds")
			info("Average FPS : " + (occurrence.bboxes2DTrack.frameNumber / totalTime).toString)
		}
	}

	
	//def has_crossed_counting_line(bbox, line){
		
	//} 
	
	def attemp_count(boundingBoxes:ArrayList<BBoxes2D>) {
		
		for (bb : boundingBoxes)
		{
			if(bb ==null){
				info("bb is null")
			}
			for (counting_line : countingLines.keySet) {
				if(has_crossed_counting_line(bb.getBBOX, countingLines.get(counting_line)) && !countingLines.get(counting_line).ObjectEncountered(bb.globalID))
				{
					if (countingLines.get(counting_line).Orientation(countingLines.get(counting_line).normale,bb.getDirection) !=0)
						{
						info("Counted at  " +counting_line + ":" + countingLines.get(counting_line).IncrementCounts)} 
					{
						info("Counted Horizontally" + counting_line)
					}
					
				}
		}}

	}
	
	def has_crossed_counting_line(b : BBOX, cl : countingLine) {
			
		val bbox_line1 : ArrayList<Point2d> = newArrayList(new Point2d(b.x, b.y), new Point2d(b.x + b.w, b.y)) // (x, y), (x + w, y)
   		val bbox_line2 : ArrayList<Point2d> = newArrayList(new Point2d(b.x + b.w, b.y),new Point2d(b.x + b.w, b.y + b.h)); // = [(x + w, y), (x + w, y + h)]
		val bbox_line3 :ArrayList<Point2d> = newArrayList(new Point2d(b.x,b.y) , new Point2d(b.x, b.y + b.h));  //= [(x, y), (x, y + h)]
		val bbox_line4 :ArrayList<Point2d> = newArrayList(new Point2d(b.x, b.y + b.h), new Point2d(b.x + b.w, b.y + b.h)); //[(x, y + h), (x + w, y + h)]
		
		if(line_segments_intersect(bbox_line1, cl.getLine) || line_segments_intersect(bbox_line2, cl.getLine) ||
			line_segments_intersect(bbox_line3, cl.getLine) || line_segments_intersect(bbox_line4, cl.getLine)){
				return true
			}
		
		return false
	}
	
	def line_segments_intersect(line1 : ArrayList<Point2d>, line2 : ArrayList<Point2d>) {
		
		var p1=line1.get(0)
		var q1 = line1.get(1)
		var p2 = line2.get(0)
		var q2 = line2.get(1)

		var o1 = get_orientation(p1, q1, p2)
		var o2 = get_orientation(p1, q1, q2)
		var o3 = get_orientation(p2, q2, p1)
		var o4 = get_orientation(p2, q2, q1)
		
		if (o1 != o2 && o3 != o4) {
			return true
		}
		if (o1 == 0 && is_on_segment(p1, p2, q1)) {
			
			return true
		}
		if (o2 == 0 && is_on_segment(p1, q2, q1)) {
			return true
		}
		if (o3 == 0 && is_on_segment(p2, p1, q2)) {
			return true
		}
		if (o4 == 0 && is_on_segment(p2, q1, q2)) {
			return true
		}
		return false
		
	}
	
	def get_orientation(p : Point2d, q:Point2d, r:Point2d){
		
		val a= (q.y-p.y)*(r.x-q.x) - (q.x-p.x)*(r.y-q.y)
		if(a==0)
		{
			return 0 
		}
		else if(a>0){
			return 1
		}
		return 2
	}
	
	def is_on_segment(p : Point2d, q : Point2d, r : Point2d){
		if(q.x <= Math.max(p.x,r.x) && q.x >= Math.min(p.x, r.x) && q.y<=Math.max(p.y, r.y) && q.y>= Math.min(p.y,r.y))
		{
			return true
		}
		return false
	}
	
	on Destroy {

	}

}


/*Test
 * 
 * 
 * info(
 * " X:" + currentBB.get(0).getBBOX.getX + " Y:" + currentBB.get(0).getBBOX.getY + " W:" +
 * currentBB.get(0).getBBOX.getW + " H:" + currentBB.get(0).getBBOX.getH + "Conf:" +
 * currentBB.get(0).getConf + "ID: " + currentBB.get(0).getGlobalID)

 * info(" X:" + currentBB.get(1).getBBOX.getX + " Y:" + currentBB.get(1).getBBOX.getY + " W:" +
 * currentBB.get(1).getBBOX.getW + " H:" + currentBB.get(1).getBBOX.getH + "Conf:" +
 * currentBB.get(1).getConf + "ID: " + currentBB.get(1).getGlobalID)
 * info(
 * " X:" + currentBB.get(currentBB.size - 1).getBBOX.getX + " Y:" +
 * currentBB.get(currentBB.size - 1).getBBOX.getY + " W:" +
 * currentBB.get(currentBB.size - 1).getBBOX.getW + " H:" +
 * currentBB.get(currentBB.size - 1).getBBOX.getH + "Conf:" +
 * currentBB.get(currentBB.size - 1).getConf + "ID: " + currentBB.get(currentBB.size - 1).getGlobalID)
 */