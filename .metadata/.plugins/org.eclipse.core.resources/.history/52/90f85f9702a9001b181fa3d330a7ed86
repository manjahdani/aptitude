/** 
 * 
 */
package be.uclouvain.aptitude.surveillance.algorithm

import be.uclouvain.aptitude.surveillance.algorithm.util.BBoxes2D
import be.uclouvain.organisation.platform.AddAlgorithm
import be.uclouvain.organisation.platform.CounterObserverCapacity
import be.uclouvain.organisation.platform.MissionSensitivity
import be.uclouvain.organisation.platform.ObserverRole
import be.uclouvain.organisation.told.util.AlgorithmInfo
import io.sarl.core.ExternalContextAccess
import io.sarl.core.Initialize
import io.sarl.core.Logging
import java.io.FileReader
import java.nio.file.Files
import java.nio.file.Paths
import java.util.ArrayList
import java.util.TreeMap
import java.util.UUID
import org.json.simple.JSONObject
import org.json.simple.parser.JSONParser
import be.uclouvain.aptitude.surveillance.algorithm.messages.EvaluationMessage
import java.util.Locale

/** 
 * @author manjah
 * 
 */
behavior CompetitiveCounterRole extends ObserverRole {
	uses Logging, ExternalContextAccess, CounterObserverCapacity, Evaluation

	var Comp_Duration : long

	val AVAILABLE_OBSERVERS = newArrayList("SORT")//"DeepSORT") // "SORT",
	
	val ObjectPresentInframe = new TreeMap<Integer, BBoxes2D>
	val ObjectToBeAnalyzed = new ArrayList<BBoxes2D>;
	val CompResults = new TreeMap<UUID,CompetitionResults>
	var EvaluationPartnerName : String;
	
	var gtFile = "F:/data/S04C038/gt/gt.txt"
	
on Initialize {
	sensitivity.add(0)
		//sensitivity.add(1)
		isMaster = true; 
		setSkill(new EvaluationImpl, Evaluation)
		var configPath = "F:/aptitude/be.uclouvain.aptitude.surveillance/src/main/resources/config/evalconfig.json"
		var parser = new JSONParser();
		var configPathEvaluator = configPath
		var jsonEvaluator = parser.parse(new FileReader(configPathEvaluator)) as JSONObject;
		ActivateAccess(jsonEvaluator)
	}

	@SuppressWarnings("potential_field_synchronization_problem")
	on PartnerEvaluationFound {
		EvaluationPartnerName = occurrence.partnerName
		info("I found my partner" + EvaluationPartnerName)
		this.Comp_Duration = System.currentTimeMillis()
	}

	@SuppressWarnings("potential_field_synchronization_problem")
	on MissionSensitivity {
		for (ObserverName : AVAILABLE_OBSERVERS) {
			info("Come here : " + ObserverName)
			PlatformSpace.emit(
				new AddAlgorithm(MissionSpaceList.values.get(0),
					new AlgorithmInfo(ObserverName, "TRACKER")))[it.UUID == PlatformContext.ID] // @FIXME : Be very careful as I am taking the first Space !!!! DANGER
		}
	}
	
	on LastFrame {
		info("Receveid " + occurrence.pred_file_Path + occurrence.frameNumber)
		info("Sending to evaluation")
		
		var predictions = new String(Files.readAllBytes(Paths.get(occurrence.pred_file_Path)));
		var gts = new String(Files.readAllBytes(Paths.get(gtFile)))
		var testID = UUID.randomUUID
		
		CompResults.put(testID, 
			new CompetitionResults(occurrence.source.UUID, 
									occurrence.pred_file_Path, 
									occurrence.total_time_detection, 
									occurrence.total_time_tracking))
									
		sendEvaluationRequest(testID.toString, predictions, gts)
	}

	on EvaluationResult {
		// time2 = System.currentTimeMillis()
		// println(time2 - time1)
		// println(time2 - time3)
		info("Message Evaluation Received")
	
		CompResults.get(UUID.fromString(occurrence.result.requestID)).setValues(occurrence.result)
		
		println("***********************")
		println("           reqID \t" + occurrence.result.requestID)
		CompResults.get(UUID.fromString(occurrence.result.requestID)).EvaluationPrint
		
//		println("HOTA \t" + occurrence.result.HOTA)
//		println("DetA \t" + occurrence.result.detA)
//		println("AssA \t" + occurrence.result.assA)
//		println("DetRe \t" + occurrence.result.detRe)
//		println("DetPr \t" + occurrence.result.detPr)
//		println("AssRe \t" + occurrence.result.assRe)
//		println("AssPr \t" + occurrence.result.assPr)
//		println("LocA \t" + occurrence.result.locA)
	}
}

class CompetitionResults{
	
	var CompetitorID : UUID
	var CompetitorBelief : String
	var DetectionTime : double
	var TrackingTime : double
	var HOTA : double
	var DetA : double
	var AssA : double
	var DetRe : double
	var DetPr : double
	var AssRe : double
	var AssPr : double
	var LocA : double
	var HOTA_Array : double[]
	var MOTA : double
	var MOTP : double

	
	new (id : UUID, s: String , ts:double, tt:double, h : double){
		this.CompetitorID = id
		this.CompetitorBelief = s
		this.DetectionTime = ts
		this.TrackingTime = tt
		this.HOTA  = h
	}
	def setValues(e : EvaluationMessage) {
		this.HOTA = e.getHOTA
		this.DetA = e.getDetA
		this.AssA = e.getAssA
		this.DetRe = e.getDetRe
		this.DetPr = e.getDetPr
		this.AssRe = e.getAssRe
		this.AssPr = e.getAssPr
		this.LocA = e.getLocA
		this.HOTA_Array = e.getHOTA_Array
		this.MOTA = e.getMOTA
		this.MOTP = e.getMOTP
		
	}

	new (id : UUID, s : String, ts : double, tt : double) {
		this.CompetitorID = id
		this.CompetitorBelief = s
		this.DetectionTime = ts
		this.TrackingTime = tt
	}

	def getHOTA_Array(l : double[]) {
		return HOTA_Array
	}

	def getMOTA {
		return this.MOTA  
	}

	def getMOTP {
		return this.MOTP  
	}

	def getLocA {
		return this.LocA 
	}

	def getDetA {
		return this.DetA 
	}

	def getAssA {
		return this.AssA 
	}

	def getDetRe {
		return this.DetRe 
	}

	def getPr {
		return this.DetPr
	}

	def getAssRe {
		return this.AssRe
	}

	def getAssPr {
		return this.AssPr
	}
	
	
	def setHOTA_Array(l : double[])
	{
		this.HOTA_Array=l
	}
	def setMOTA (l:double){
		this.MOTA =l
	}
	def setMOTP (l:double){
		this.MOTP = l
	}
	
	def setLocA(l:double):void{
		this.LocA = l
	}
	
	def setDetA (l: double):void{
		this.DetA=l
	}
	def setAssA (l:double):void{
		this.AssA = l
	}
	def setDetRe (l:double):void{
		this.DetRe=l
	}
	def DetPr(l:double):void{
		this.DetPr=l
	}

	def setAssRe(l : double) : void {
		this.AssRe = l
	}

	def DetAssPr(l : double) : void {
		this.AssPr = l
	}
	
	def setDetectionTime(l : double) {
		this.DetectionTime = l
	}

	def setTrackingTime(l : double) {
		this.TrackingTime=l
	}
	def setHOTA (h : double)
	{
		this.HOTA = h
	}
	def getDetectionTime : double {
		return this.DetectionTime
	}

	def getTrackingTime : double {
		return this.TrackingTime
	}

	def getHOTA : double {
		return this.HOTA
	}
	
	def EvaluationPrint() : void {
		println(CompetitorID.toString)
		println(CompetitorBelief)
		System.out.printf(Locale.FRANCE, "%-10.4f%n", HOTA)
		System.out.printf(Locale.FRANCE, "%-10.4f%n", DetectionTime)
		System.out.printf(Locale.FRANCE, "%-10.4f%n",TrackingTime)
		println("HOTA_ARRAY" + HOTA_Array.toString)
		System.out.format("***********************")
	}
}