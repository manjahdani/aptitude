package be.uclouvain.organisation.platform

import be.uclouvain.organisation.AuthorizationToJoin
import be.uclouvain.organisation.LocalDatabaseRequest
import be.uclouvain.organisation.PlatformOrganisationInfo
import be.uclouvain.organisation.TOLDOrganisationInfo
import be.uclouvain.organisation.told.util.AlgorithmInfo
import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.ExternalContextAccess
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.OpenEventSpace
import io.sarl.lang.core.AgentContext
import io.sarl.lang.core.EventSpace
import java.util.UUID
import java.util.concurrent.atomic.AtomicInteger
import be.uclouvain.organisation.platform.util.MissionData

/** 
 * 
 * The Analyst gathers information about a mission and collects Events of Interest or more generally
 * intelligence (e.g. statistics) for the Client. The role could recommend actions as well. The concept
 * is not necessarily holonic.
 * 
 * As an example, an Analyst received 175 events of incidents involving bikes and cars from one
 * Algorithm. After analysing the incidents, it could draw recommendations to the Client to take
 * actions such as a preventive campaign or new installations.
 * 
 * We advise Analysts specializing to one scenario; consequently, you need two Analysts to perform the counting of vehicles and detect traffic offenses. 
 * However, those Analysts could use the same Observer if they rely on those perceptions. 
 * Therefore, we advise an Analyst rely on one and only one Observer (itself composed of other Observers). 
 * 
 * @author $Author: manjahdani$
 * @version $0.0.2$
 * @date $16/04/2021$
 * @mavengroupid $be.uclouvain.aptitude$
 * @mavenartifactid $organisation$
 */
behavior AnalystRole {
	
	uses Logging, Behaviors,DefaultContextInteractions, ExternalContextAccess
	
	protected var platformContext : AgentContext
	protected var platformSpace : OpenEventSpace //Private channel 
	
	protected var TOLDContext : AgentContext
	protected var TOLDSpace : OpenEventSpace // Private channel

	protected var missionSpace : OpenEventSpace
	
	
	val sensitivity = new AtomicInteger()
	/** 
	 * Receiving this event, the behavior has to update its fields of perception.
	 */
	val availableObservers = newArrayList("careful", "dynamic", "dynamic ",
		"balanced")
	
	var myObserver : UUID
	@SuppressWarnings("potential_field_synchronization_problem")
	on Initialize {
		sensitivity.set((occurrence.parameters.get(0) as MissionData).sensitivity)
		info("starts mission of vehicle counting with sensitivity:  " + availableObservers.get(sensitivity.get))
	}
	
	@SuppressWarnings("potential_field_synchronization_problem")
	
	// @FIXME There are global behavior organisational Behavior
	on PlatformOrganisationInfo {
		//info("Joining the Platform organisation: " + occurrence.spaceID + " (" + occurrence.context + ").")
		platformContext = occurrence.context
		platformSpace = occurrence.spaceID
		platformSpace.register(asEventListener)
		info("asks for algorithm performing vehicle counting to platform")
		platformSpace.emit(new LocalDatabaseRequest(defaultContext))[it.UUID == platformContext.ID]
		platformSpace.emit(new AddAlgorithm(missionSpace, new AlgorithmInfo("APTITUDE", "COUNTER")))
	}
	@SuppressWarnings("potential_field_synchronization_problem")
	on AuthorizationToJoin {
		info("Received authorization to perform a mission" + occurrence.defaultSpaceID)
		missionSpace = occurrence.defaultSpaceID;
		missionSpace.register(asEventListener)
	}
	@SuppressWarnings("potential_field_synchronization_problem")
	on TOLDOrganisationInfo{
		TOLDContext = occurrence.context
		TOLDSpace = occurrence.spaceID
		TOLDSpace.register(asEventListener)
	}
	@SuppressWarnings("potential_field_synchronization_problem")
	on SensititvityRequest{
		info("user sensitivity is : " + availableObservers.get(sensitivity.get))
		myObserver=occurrence.source.UUID
		emit(platformContext.defaultSpace, new MissionSensitivity(newLinkedList(sensitivity.get))
		)[it.UUID==occurrence.source.UUID]
	}
}
