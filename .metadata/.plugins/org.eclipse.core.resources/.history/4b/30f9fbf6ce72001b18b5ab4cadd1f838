package be.uclouvain.aptitude.agents

import be.uclouvain.aptitude.detection.Detection
import be.uclouvain.aptitude.detection.DetectionImpl
import be.uclouvain.aptitude.other.BBoxes2DResult
import be.uclouvain.aptitude.other.PartnerDetectionFound
import be.uclouvain.aptitude.other.PartnerTrackingFound
import be.uclouvain.aptitude.tracking.TrackingImpl
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import io.sarl.core.Schedules
import java.io.FileReader
import org.json.simple.JSONObject
import org.json.simple.parser.JSONParser
import be.uclouvain.aptitude.tracking.Tracking
import be.uclouvain.aptitude.other.BBoxes2DTrackResult
import java.util.Arrays

agent BootAgent {
	uses DefaultContextInteractions, Lifecycle

	on Initialize {
		var configPathYOLO = "F:/aptitude/SARL-Example/src/main/resources/config/test-YOLO.json"
		var configPathTinyYOLO = "F:/aptitude/SARL-Example/src/main/resources/config/test-TinyYOLO.json"
		var configPathSORT = "F:/aptitude/SARL-Example/src/main/resources/config/test-SORT.json"
		var configPathDeepSORT = "F:/aptitude/SARL-Example/src/main/resources/config/test-DeepSORT.json"
		spawn(CameraAgent, configPathYOLO, configPathSORT)
//		Thread.sleep(15000)
//		spawn(CameraAgent, configPathTinyYOLO, configPathDeepSORT)
		killMe
	}

}

@SuppressWarnings("discouraged_reference")
agent CameraAgent {
	uses Schedules, Lifecycle, Logging, Detection, Tracking, DefaultContextInteractions

	var partnerDetectionName : String
	var partnerTrackingName : String
	var start : long

	on Initialize {
		setSkill(new DetectionImpl)
		setSkill(new TrackingImpl)

		var parser = new JSONParser();

		var configPathDetector = occurrence.parameters.get(0).toString
		var jsonDetector = parser.parse(new FileReader(configPathDetector)) as JSONObject;
		requestDetector(jsonDetector)

		var configPathTracker = occurrence.parameters.get(1).toString
		var jsonTracker = parser.parse(new FileReader(configPathTracker)) as JSONObject;
		requestTracker(jsonTracker)
	}

	on PartnerDetectionFound {
		this.partnerDetectionName = occurrence.partnerName
		info("Detection partner found: " + this.partnerDetectionName)
		Thread.sleep(2000)
		sendAction(1) // PLAY
		this.start = System.currentTimeMillis()
		
//		Thread.sleep(10000)
//		sendAction(2) // PAUSE
//		Thread.sleep(5000)
//		this.start -= 5000
//		sendAction(3) 	// RESUME
	}

	on PartnerTrackingFound {
		this.partnerTrackingName = occurrence.partnerName
		info("Tracking Partner found: " + this.partnerTrackingName)
	}

	on BBoxes2DResult {
		getTrack(occurrence.bboxes2D)

		// println("***********************")
//		 println("----  " + occurrence.bboxes2D.frameNumber)
		// println("*  " + Arrays.toString(occurrence.bboxes2D.bboxes))
		// println("*  " + Arrays.toString(occurrence.bboxes2D.classIDs))
		// println("*  " + Arrays.toString(occurrence.bboxes2D.detConfs))
		// println("*  " + occurrence.bboxes2D.lastFrame)
		// println("***********************")
		// if (occurrence.bboxes2D.lastFrame) {
		// info("That was it!")
		// val totalTime = (((System.currentTimeMillis() - this.start) / 1000))
		// info("It took " + totalTime.toString + " seconds")
		// info("Average FPS : " + (occurrence.bboxes2D.frameNumber / totalTime).toString)
		// }
//		if (occurrence.bboxes2D.frameNumber != this.expectedFrame) {
//			println("UNEXPECTED")
//		}
//		this.expectedFrame = occurrence.bboxes2D.frameNumber +1
	}

	on BBoxes2DTrackResult {
		
		println("***********************")
		println("*  " + occurrence.bboxes2DTrack.frameNumber)
		println("*  " + occurrence.bboxes2DTrack.trackingTime)
		println("*  " + Arrays.toString(occurrence.bboxes2DTrack.globalIDs))
		println("*  " + Arrays.toString(occurrence.bboxes2DTrack.bboxes))
		println("*  " + Arrays.toString(occurrence.bboxes2DTrack.classIDs))
		println("*  " + Arrays.toString(occurrence.bboxes2DTrack.detConfs))
		println("*  " + occurrence.bboxes2DTrack.lastFrame)
		println("***********************")
		if (occurrence.bboxes2DTrack.lastFrame) {
			info("That was it!")
			val totalTime = (((System.currentTimeMillis() - this.start) / 1000))
			info("It took " + totalTime.toString + " seconds")
			info("Average FPS : " + (occurrence.bboxes2DTrack.frameNumber / totalTime).toString)
		}
	}

	on Destroy {
		killMe
	}
}
