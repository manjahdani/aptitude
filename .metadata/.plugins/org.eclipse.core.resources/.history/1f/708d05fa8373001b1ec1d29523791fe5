/** 
 * 
 */
package be.uclouvain.organisation.told

import be.uclouvain.organisation.told.entity.EntityCapacity
import com.google.common.util.concurrent.AtomicDouble
import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.ExternalContextAccess
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.OpenEventSpace
import io.sarl.lang.core.AgentContext
import io.sarl.lang.core.EventSpace
import java.util.UUID
import org.eclipse.osgi.service.environment.EnvironmentInfo

/** 
 * @author manjah
 * 
 */
behavior EntityRole {
	uses EntityCapacity, Behaviors, DefaultContextInteractions, ExternalContextAccess, Logging

	/** 
	 * The field of perception of the Agent that is CLOSE.
	 */
	// var feelingField : PerceptionField

	/** 
	 * The field of perception of the Agent that is VISIBLE.
	 */
	// var visualField : PerceptionField
	protected var BaseContext : AgentContext
	protected var BaseSpace : EventSpace

	protected var PlatformSpace : OpenEventSpace
	protected var PlatformID : UUID

	

	/** 
	 * Receiving this event, the behavior has to update its fields of perception.
	 */
	on Initialize {
		BaseContext = getDefaultContext
		BaseSpace = getDefaultSpace
	}

	on EnvironmentInfo {
		// info("Joining the Environment organisation: " + occurrence.spaceID + " ("+ ").")
		EnvironmentID = occurrence.source.getUUID
		EnvironmentEntitySpace = occurrence.spaceID
		EnvironmentEntitySpace.register(asEventListener)
		setEnvironmentInfo(EnvironmentID, EnvironmentEntitySpace)
	}

	on OrganisationInfo {
		// info("Joining the World organisation: " + occurrence.spaceID + " (" + occurrence.context + ").")
		WorldID = occurrence.source.getUUID
		WorldEntitySpace = occurrence.spaceID
		WorldEntitySpace.register(asEventListener)
		setWorldInfo(WorldID, occurrence.spaceID)
	}

	on LeaveWorld {
		join(BaseContext.ID, BaseSpace.spaceID.ID)
		leave(WorldID)
	}

	on JoinWorld {
		join(occurrence.contextID.getID, occurrence.DefaultSpaceID.getSpaceID.getID)
		leave(defaultContext.getID)
		occurrence.DefaultSpaceID.register(asEventListener)
	}
}
