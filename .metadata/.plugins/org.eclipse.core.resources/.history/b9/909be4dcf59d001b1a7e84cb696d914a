/** 
 * 
 */
package be.uclouvain.aptitude.surveillance

import be.uclouvain.aptitude.surveillance.algorithm.Algorithm
import be.uclouvain.organisation.told.AccessDatabaseCapacity
import be.uclouvain.organisation.told.TOLDRole
import be.uclouvain.organisation.told.VirtualDatabaseSkill
import be.uclouvain.organisation.told.util.AlgorithmInfo
import io.sarl.core.Behaviors
import io.sarl.core.Initialize
import io.sarl.core.InnerContextAccess
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import java.util.ArrayList
import java.util.HashMap
import java.util.UUID
import be.uclouvain.organisation.PlatformOrganisationInfo
import io.sarl.core.OpenEventSpace

/** 
 * 
 * The agent TOLD keeps record of current and past knowledge. 
 * The size of the database is a parameter and therefore we could have local TOLD 
 * that communicates to a higher TOLD itself communicating to a bigger database. 
 * The TOLD agent creates within its context spaces, as many agents as there are different tasks. 
 * Therefore a space for Detectors, Trackers, Vehicle Counter and broadly speaking each class of algorithms.    
 * 
 * @author $Author: manjahdani$
 * @version $0.1$
 * @date $31/03/2021$
 * @mavengroupid $be.uclouvain.aptitude$
 * @mavenartifactid $surveillance$
 */ 
agent TOLDAgent extends Paraddis {
	uses Logging, Lifecycle, InnerContextAccess, Behaviors

 	val INIT_TASKS : ArrayList<String> = newArrayList("DETECTOR", "TRACKER", "COUNTER") // @parameters
	var PlatformTOLDSpace : OpenEventSpace
	on Initialize {
		
		loggingName = "TOLD-" + this.ID
		info("Ready to share my stored Knowledge.")
		val S = setSkill(new VirtualDatabaseSkill, AccessDatabaseCapacity)
		registerBehavior(new TOLDRole(this))
		
		var registeredAlgorithms : HashMap<UUID, AlgorithmInfo> = new HashMap(S.database.filter [ p1, p2 |p2 instanceof AlgorithmInfo]) // Make sure that we only consider the algorithmsINFO entries
		
		for (t : INIT_TASKS){
				spawnInContext(Algorithm, innerContext, new AlgorithmInfo(t, "none", t),new HashMap(registeredAlgorithms.filter[p1, p2|p2.task == t])) // provide the level 0, the task and the list of existing agents that supports the task
			}
		
	}

	@SuppressWarnings("potential_field_synchronization_problem")
	on PlatformOrganisationInfo {
		// info("Me TOLD I am going to listen to Platform" + occurrence.spaceID)
		PlatformTOLDSpace = occurrence.spaceID
		PlatformTOLDSpace.register(asEventListener)
	}
}



