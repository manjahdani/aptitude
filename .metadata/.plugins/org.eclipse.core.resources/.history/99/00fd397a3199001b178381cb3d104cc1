/** 
 * 
 */
package be.uclouvain.aptitude.surveillance

import io.sarl.core.Destroy
import io.sarl.core.InnerContextAccess
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import io.sarl.core.Schedules

/** 
 * The agent gives global trait to agents. 
 * 
 * @author $Author: manjahdani$
 * @version $0.0.1$
 * @date $31/03/2021$
 * @mavengroupid $be.uclouvain.aptitude$
 * @mavenartifactid $surveillance$
 * 
 */
 
event CommitSuicide

agent Paraddis {
	uses Lifecycle, Logging, InnerContextAccess, Schedules

	protected var AgentType : String = 'Unknown'
	
//on Initialize {
	//	// Event trigger before the agent begin to live or to be used.
	//
	//				/* 
	//	 * The goal in the statements below is to help us setting the AgentType in 
	//	 * order to have an idea of which agents is producing which <<log
	//	 */
	//	val Classa = this.class.toString // to get the class of the agent
	//	 synchronized (AgentType)
	//	 switch (Classa) {
	//	 case "class be.uclouvain.launcher.bootAgent": {
	//	  AgentType = "Boot"}
	//	  case "class be.uclouvain.aptitudeAgents.PlatformAgent":{
	//	  	AgentType="Platform"
	//	  }
	//	  default:{
	//	  	AgentType ='AgentNotKnown' 
	//	  	info(Classa)
	//	  	}}
	//
	//	loggingName = AgentType + "-" + this.ID
	//	 synchronized (AgentType)
	//info(" agent was started.")
	//}
	on Destroy {
		// synchronized (AgentType)
			info("agent was stopped.")
	}

	on CommitSuicide {

		/* 
		 * When receiving this, the agent tries
		 * 1. to cancel all the tasks he was busy with
		 * 2. 
		 * 
		*/
		
		//info("I received a CommitSuicide : " + occurrence.fromMe + " : " +occurrence.source.UUID) 

		

		if (hasMemberAgent) {
			//info("I have sub-agents")
			if(!getActiveTasks.contains("wait-task"))
			{
				val waitTask = task("wait-task")
				waitTask.every(1000) [
				if (!hasMemberAgent) {
					CancelTasks
					waitTask.cancel
					killMe
				} else {
					innerContext.defaultSpace.emit(this.ID,new CommitSuicide)[it!=me]
				}
			]
		}
		}
		else {
			CancelTasks
			killMe
		}
	}
	def CancelTasks{
		if (!getActiveTasks.isEmpty) {
			for (e : getActiveTasks) {
				//info("task in progress" + e)
				task(e).cancel}}
				//info("Done cancelling " + getActiveTasks)}
	}
}
