/** 
 * 
 */
package be.uclouvain.organisation.platform

import be.uclouvain.organisation.OrganisationInfo
import be.uclouvain.organisation.told.AlgorithmJoinPlatform
import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.ExternalContextAccess
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.OpenEventSpace
import io.sarl.lang.core.AgentContext
import io.sarl.lang.core.EventSpace
import java.util.UUID
import java.util.concurrent.atomic.AtomicInteger

/** 
 * @author manjah
 * 
 */
behavior AnalystRole {
	uses Logging, Behaviors,DefaultContextInteractions, ExternalContextAccess

	protected var BaseContext : AgentContext
	protected var BaseSpace : EventSpace
	
	protected var PlatformContext : AgentContext
	protected var TOLDSpace : OpenEventSpace
	protected var PlatformID : UUID
	
	val Sensitivity = new AtomicInteger()
	/** 
	 * Receiving this event, the behavior has to update its fields of perception.
	 */
	on Initialize {
		BaseContext = getDefaultContext
		BaseSpace = getDefaultSpace
		Sensitivity.set(occurrence.parameters.get(0) as Integer)
		info("I am an analyst and will solve a problem with the sensitivity  " + Sensitivity.get)
	}

	on OrganisationInfo {
		//info("Joining the Platform organisation: " + occurrence.spaceID + " (" + occurrence.context + ").")
		PlatformContext = occurrence.context
		PlatformID = occurrence.source.getUUID
		TOLDSpace = occurrence.spaceID
		TOLDSpace.register(asEventListener)
		emit(TOLDSpace, new AlgorithmJoinPlatform(occurrence.context,occurrence.spaceID,"APTITUDE","Counter"))
	}
	on SensititvityRequest{
		emit(PlatformContext.defaultSpace, new MissionSensitivity(Sensitivity.get)
		)[it.UUID==occurrence.source.UUID]
	}
}
