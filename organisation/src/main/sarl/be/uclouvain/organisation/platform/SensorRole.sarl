/** 
 * 
 */
package be.uclouvain.organisation.platform

import be.uclouvain.organisation.platform.events.AddMission
import be.uclouvain.organisation.platform.events.HyperParametersRequest
import be.uclouvain.organisation.platform.events.ProcessingHyperParameters
import be.uclouvain.organisation.platform.events.Ready2Process
import be.uclouvain.organisation.platform.util.SurveillanceMissionData
import java.util.Collections
import java.util.HashMap
import java.util.UUID
import be.uclouvain.organisation.platform.events.StopMission
import be.uclouvain.organisation.AgentPerformance
import io.sarl.api.core.Logging
import io.sarl.api.core.Schedules
import io.sarl.api.core.ExternalContextAccess
import io.sarl.api.core.Behaviors
import io.sarl.api.core.DefaultContextInteractions
import io.sarl.api.core.OpenEventSpace

/** 
 * @author manjah
 * 
 */
abstract behavior SensorRole extends ScenarioRole {
	uses Logging, Schedules, ExternalContextAccess, Behaviors, DefaultContextInteractions,AgentPerformance

	protected val listeners = Collections.synchronizedMap(new HashMap<UUID, OpenEventSpace>) // Private spaces between the client and the role
	
	
	on ProcessingHyperParameters {
		var start = System.nanoTime // Measure of the performance
		debug("param received " + "MID = " + occurrence.missionID + " hp " + occurrence.param.hyperParametersAsAString)
		missionList.get(occurrence.missionID).update(occurrence.param)
		accumulateTime(System.nanoTime - start) 		// Measure of the performance
	}

	on AddMission {
		var start = System.nanoTime // Measure of the performance
		
		val missionSpace = retrieveOrCreateOpenSpaceWithID(occurrence.communicationChannelID)
		val clientID = occurrence.source.ID
		val missionID = occurrence.missionID
		//info("Mission request from "  + clientID + "\n sid = " + missionSpace.spaceID.ID + "\n mID = " + missionID )
		var accepted = true // @TODO LOW develop criteria for the admission of the mission
		if (accepted) {
			val newMission = new SurveillanceMissionData(missionID, clientID, organizationContext.get.ID)
			missionList.put(occurrence.missionID, newMission)
			listeners.put(clientID, missionSpace)
			missionSpace.registerStrongParticipant(asEventListener)
			waitMissionParam(occurrence.missionID)
			emit(missionSpace, new HyperParametersRequest(occurrence.missionID))[it.ID == clientID]
		}
		
		accumulateTime(System.nanoTime - start) 	// Measure of the performance
	}

	on StopMission {
		var start = System.nanoTime // Measure of the performance
		assert listeners.containsKey(occurrence.source.ID),"Listener unknown, possible hack"
		listeners.get(occurrence.source.ID).unregister(asEventListener)
		listeners.remove(occurrence.source.ID)
		accumulateTime(System.nanoTime - start) 	// Measure of the performance
	}
	
	override Ready2Process {
		var start = System.nanoTime // Measure of the performance
		emitToParent(new Ready2Process)
		accumulateTime(System.nanoTime - start) 	// Measure of the performance
	}
	def waitMissionParam(mID : UUID) {

		task("rMP".concat(mID.toString)).every(1000) [
			val MD = missionList.get(mID)
			if (MD.hyperParameters.paramKnown) {
				info("Sensor role |param{s= " + MD.cautionLevel +" dynamicAdaptation=" + MD.isDynamicAdaptationEnabled + "}|mID "+mID)
				processingMissionWithID(mID)
				task("rMP".concat(mID.toString)).cancel
				loggingName = this.ID + "-ALGORITHM-" + ADN.get.name + "-" + ADN.get.level + "-" +
					ADN.get.platformName + "-" + computation_location
				
			} else {
				//info("Waiting for command MID = " + mID + " hp " + MD.hyperParametersAsAString)
			}
		]
	}

	def processingMissionWithID(mID : UUID) {
		var start = System.nanoTime // Measure of the performance
		wake(new ProcessMission(missionList.get(mID)))[me]
		accumulateTime(System.nanoTime - start) 		// Measure of the performance
	}

	def enableDataAcquisition(mID : UUID, signalType : String) {
		var start = System.nanoTime // Measure of the performance
		wake(new RecruitSignal(missionList.get(mID), signalType))[me]
		accumulateTime(System.nanoTime - start) 		// Measure of the performance
	}
}
