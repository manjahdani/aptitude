/** 
 * 
 */
package be.uclouvain.organisation.platform

import be.uclouvain.organisation.Role
import be.uclouvain.organisation.platform.events.ComputationalRessources
import be.uclouvain.organisation.platform.events.LeavePlatform
import be.uclouvain.organisation.platform.events.StopMission
import be.uclouvain.organisation.told.util.AlgorithmInfo
import java.util.Collections
import java.util.HashMap
import java.util.UUID
import java.util.concurrent.atomic.AtomicBoolean
import java.util.concurrent.atomic.AtomicReference
import be.uclouvain.organisation.platform.util.SurveillanceMissionData
import be.uclouvain.organisation.AgentPerformance
import io.sarl.api.core.Logging
import io.sarl.api.core.Schedules
import io.sarl.api.core.Initialize
import io.sarl.api.core.Destroy

/** 
 * @author manjah
 * 
 */
abstract behavior ScenarioRole extends Role {
	uses Logging, Schedules, AgentPerformance

	protected val ADN = new AtomicReference<AlgorithmInfo>
	protected val computation_location = new AtomicReference<String>
	protected val checkList = Collections.synchronizedMap(new HashMap<String, Boolean>)
	protected val isRoleActive = new AtomicBoolean(true)
	protected val missionList = Collections.synchronizedMap(new HashMap<UUID, SurveillanceMissionData>) // A map between mission ID that it needs to answer to and their data
	
	on Initialize {
		var start : long = System.nanoTime(); // Measure performance
		checkList.put("context", false)
		checkList.put("computation_location", false)
		ADN.set(occurrence.parameters.get(0) as AlgorithmInfo)
		setup()
		accumulateTime(System.nanoTime - start) 		// Measure performance
	}
	
	def setup() {
		
		
		debug("Setup of the role "+ this.class.toString)
		task(this.class.toString).every(1000) [
				if (areAllTrue(checkList.values)) {
					Ready2Process
				task(this.class.toString).cancel
				} else {
				//info("Waiting for orga and ressources" + checkList)
				}
		]
	}

	def Ready2Process{
		//Do nothing
	}
	
	on Destroy {
		// info("The behavior was stopped.")
	}

	on ComputationalRessources {
		var start : long = System.nanoTime(); // Measure performance
		//info("received computation_location: " + occurrence.client_id)
		computation_location.set(occurrence.client_id)
		checkList.replace("computation_location", true)
		accumulateTime(System.nanoTime - start) 		// Measure performance
	}
	on PlatformOrganizationInfo {
		var start : long = System.nanoTime(); // Measure performance
		debug("received PlatformOrganisation")
		
		updateContextInfo(occurrence.contextID, occurrence.privateCommunicationChannelID)
		ADN.get.platformName = occurrence.platformName
		checkList.replace("context", true)
		accumulateTime(System.nanoTime - start) 		// Measure performance
	}

	on StopMission {
		var start : long = System.nanoTime(); // Measure performance
		info("Stop Mission " + occurrence.missionID  + " current mission" +missionList.keySet)
		assert missionList.containsKey(occurrence.missionID),"Mission unknown, possible breach"
		missionList.remove(occurrence.missionID)
		accumulateTime(System.nanoTime - start) 		// Measure performance
	}

	on LeavePlatform { // @TODO HIGH program a behavior on LeavePlatform
		// join(BaseContext.ID, BaseSpace.spaceID.ID)
		// info("ObserverLeaving")
		// leave(PlatformContext.ID)
	}

	abstract def processingMissionWithID(mID : UUID)
	
	def areAllTrue(array : boolean[]) {
		
		for (b : array)
			if(!b) return false;
		return true;
	}
}
