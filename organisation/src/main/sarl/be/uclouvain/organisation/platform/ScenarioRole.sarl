/** 
 * 
 */
package be.uclouvain.organisation.platform

import be.uclouvain.organisation.Role
import be.uclouvain.organisation.platform.events.ComputationalRessources
import be.uclouvain.organisation.platform.events.LeavePlatform
import be.uclouvain.organisation.platform.events.StopMission
import be.uclouvain.organisation.told.util.AlgorithmInfo
import io.sarl.core.Destroy
import io.sarl.core.ExternalContextAccess
import io.sarl.core.Initialize
import io.sarl.core.Logging
import java.util.Collections
import java.util.HashMap
import java.util.concurrent.atomic.AtomicBoolean
import java.util.concurrent.atomic.AtomicReference
import java.util.UUID

/** 
 * @author manjah
 * 
 */
abstract behavior ScenarioRole extends Role {
	uses Logging, ExternalContextAccess

	
	
	protected var ADN = new AtomicReference<AlgorithmInfo>
	protected var computation_location = new AtomicReference<String>
	protected val checkList = Collections.synchronizedMap(new HashMap<String, Boolean>)
	protected val isRoleActive = new AtomicBoolean(true)
	
	on Initialize {
		checkList.put("context", false)
		checkList.put("computation_location", false)
		ADN.set(occurrence.parameters.get(0) as AlgorithmInfo)
		setup()
	}

	abstract def setup()

	on Destroy {
		// info("The behavior was stopped.")
	}

	on ComputationalRessources {
		//info("received computation_location: " + occurrence.client_id)
		computation_location.set(occurrence.client_id)
		checkList.replace("computation_location", true)
	}
	on PlatformOrganizationInfo {

		updateContextInfo(occurrence.context, occurrence.privateCommunicationChannelID)
		ADN.get.platformName = occurrence.platformName
		checkList.replace("context", true)
	}
	
	on StopMission { //@TODO HIGH program a behavior on stopMission
		/** 
		if (listeners.keySet.contains(occurrence.source.ID)) {
			info("I received the StopMission")
			listeners.remove(occurrence.source.ID)
		} else {
			info("I do not recognize the provider" + occurrence.expertID)
		 * }
		 */
	}
	on LeavePlatform { // @TODO HIGH program a behavior on LeavePlatform
		// join(BaseContext.ID, BaseSpace.spaceID.ID)
		// info("ObserverLeaving")
		// leave(PlatformContext.ID)
	}

	abstract def processingMissionWithID(mID : UUID)
	
	def areAllTrue(array : boolean[]) {
		for (b : array)
			if(!b) return false;
		return true;
	}

	abstract def startRole()

	//abstract def processingMissionWithID(mID : UUID)

}
