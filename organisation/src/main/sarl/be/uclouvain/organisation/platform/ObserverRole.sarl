package be.uclouvain.organisation.platform

import be.uclouvain.organisation.events.SignalID
import be.uclouvain.organisation.platform.events.AddAlgorithm
import be.uclouvain.organisation.platform.events.AddMission
import be.uclouvain.organisation.platform.events.HyperParametersRequest
import be.uclouvain.organisation.platform.events.LeavePlatform
import be.uclouvain.organisation.platform.events.ProcessingHyperParameters
import be.uclouvain.organisation.platform.events.StopMission
import be.uclouvain.organisation.platform.util.SurveillanceMissionData
import java.util.Collections
import java.util.HashMap
import java.util.UUID
import be.uclouvain.organisation.AgentPerformance
import io.sarl.api.core.Logging
import io.sarl.api.core.Behaviors
import io.sarl.api.core.ExternalContextAccess
import io.sarl.api.core.Schedules
import io.sarl.api.core.OpenEventSpaceSpecification
import io.sarl.api.core.OpenEventSpace

/** 
 * Receives data at a certain stage (Raw, Information, Knowledge, Insight) and process it. 
 * Observers are distinct if they process a different Signal or use another Model or both .
 * 
 * It Becomes a multi-layer concept if it involves several entities observing the same target(data).
 * A possible Holonic configuration could have the following layers : 
 * 
 * 			- Multiple Sensors at different location analysing the same scene
 *          - Multiple Algorithms with different beliefs analysing the same signal. 
 * 
 * Example : let's take a junction equipped with three cameras (C_1  ,C_2,C_3) aiming to provide a list of the cars in the scene. 
 * The cameras dispose two algorithms models (M_1 ,M_2). Let us assume, that C_1  uses M_1and M_2 to process the data while others only use M_1. 
 * You have four Observers (O_1,O_2,O_3,O_4) = (C_1 M_1; C_1 M_2; C_2 M_1; C_3 M_1). 
 * A stable and scalable approach would consider two supplementary Observers to gather this as a Holonic system. 
 * On the one hand an Observer O_5 concatenating the perceptions of O_1, O_2 and on the other hand, a sixth Observer for the perceptions of O_5 O_3 O_4. 
 * Notice that Observers O_1and O_2 became Signals for O_5, becoming itself a signal for O_6. 
 * 
 * 
 * 
 * @author $Author: manjahdani$
 * @version $0.0.2$
 * @date $16/04/2021$
 * @mavengroupid $be.uclouvain.aptitude$
 * @mavenartifactid $organisation$
 */
 
abstract behavior ObserverRole extends ScenarioRole {
	
	uses Logging, Behaviors, ExternalContextAccess, Schedules, AgentPerformance

	protected val providers = Collections.synchronizedMap(new HashMap<UUID, OpenEventSpace>) // Private spaces between the role and data providers
	//protected var processingParameters = Collections.synchronizedMap(new HashMap<UUID, HyperParameters>) // 
	protected val orderedMissionList = Collections.synchronizedMap(new HashMap<UUID, SurveillanceMissionData>) // A map between mission ID that it ordered to another observer and their data
	protected val external_internal_Map = Collections.synchronizedMap(new HashMap<UUID, UUID>) // {key := uid} of an external mission, {value:= uid of the ordered mission}
	
	on HyperParametersRequest {
		var start : long = System.nanoTime(); // Measure performance
		// We decide that derived role handles the parameters request of inner-agents.
		// Removing the flag results in nullException as the role
		// receives a request from a innerAgent but did not include it in its providers.
		var providerID = occurrence.source.ID
		// info("Param requests from agentID :=" + providerID.toString.substring(0, 5))
		val MD = orderedMissionList.get(occurrence.missionID)
		info(
			"Transmit |param{s= " + MD.cautionLevel + " dynamicAdaptation=" + MD.isDynamicAdaptationEnabled +
				"}|mID = " +MD.missionID.toString.substring(0,5) + " to " + providerID.toString.substring(0, 5))
		emit(providers.get(providerID), new ProcessingHyperParameters(
			occurrence.missionID, orderedMissionList.get(occurrence.missionID).hyperParameters))[it.ID == providerID]
		accumulateTime(System.nanoTime - start) 		// Measure performance
	}
	on SignalID {
		var start : long = System.nanoTime(); // Measure performance
		val signalID = occurrence.signalID
		val mID= occurrence.missionID
		
		//if(!providers.containsKey(signalID)){
			orderedMissionList.get(mID).providerID = signalID
			// create a new private communication space between the signal and observer and listen to it
			val sID = UUID.randomUUID
			val comSpace = organizationContext.get.getOrCreateSpaceWithID(OpenEventSpaceSpecification,
				sID)
			comSpace.registerStrongParticipant(asEventListener)
			providers.put(signalID, comSpace)
			info("Received provider ID sending space id -" + comSpace.spaceID.ID)
			emit(organizationContext.get.defaultSpace, new AddMission(occurrence.missionID, sID)) [
				it.ID == signalID
			]
		
		//else{
			//info("Known signal = " + signalID)
			//emit(providers.get(signalID),new AddMission(occurrence.missionID, providers.get(signalID).spaceID.ID))[it.ID == signalID]
		//}
		accumulateTime(System.nanoTime - start) 		// Measure performance
	}

	on LeavePlatform {
		// join(BaseContext.ID, BaseSpace.spaceID.ID)
		// info("Detector Leaving")
		
		// leave(PlatformID)
	}
	

	
	on RecruitSignal {
		var start : long = System.nanoTime(); // Measure performance
		missionList.put(occurrence.missionData.missionID, occurrence.missionData)
		requestAlgorithm(occurrence.missionData.missionID, occurrence.task)
		processingMissionWithID(occurrence.missionData.missionID)
		accumulateTime(System.nanoTime - start) 		// Measure performance
	}
	
	def processingMissionWithID(mID : UUID) {
		var start : long = System.nanoTime(); // Measure performance
		external_internal_Map.put(mID,this.ID)
		orderedMissionList.put(mID, missionList.get(mID))
		accumulateTime(System.nanoTime - start) 		// Measure performance
	}

	
	on StopMission {
		var start : long = System.nanoTime(); // Measure performance
		

		val providersID = providers.keySet.clone
		for (p : providersID) {
			emit(providers.get(p), new StopMission(external_internal_Map.get(occurrence.missionID)))[!me]
			providers.remove(p)
		}
		orderedMissionList.remove(occurrence.missionID)
		accumulateTime(System.nanoTime - start) 		// Measure performance
	}

	
	on ProcessMission {
		var start : long = System.nanoTime(); // Measure performance
		missionList.put(occurrence.missionData.missionID, occurrence.missionData)
		processingMissionWithID(occurrence.missionData.missionID)
		accumulateTime(System.nanoTime - start) 		// Measure performance
	}

	def requestAlgorithm(mID : UUID, algoTask : String) {

		info("Observer recruits request t = " + algoTask)
		
		if (privateOrganizationSpace.get !== null) {
			emit(privateOrganizationSpace.get, new AddAlgorithm(mID, algoTask))
		} else {
			task("recuitSignal".concat(mID.toString)).every(100) [
				if (privateOrganizationSpace.get !== null) {
					emit(privateOrganizationSpace.get, new AddAlgorithm(mID, algoTask))
					task("recuitSignal".concat(mID.toString)).cancel
				} else {
					//info("trying to recruit but no platform")
				}
			]
		}
		
	}
}


