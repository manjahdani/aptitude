/** 
 * 
 */
package be.uclouvain.organisation

import io.sarl.lang.core.AgentContext
import io.sarl.core.OpenEventSpace
import java.util.UUID

/** 
 * Positive answer to a request to join a context .
 * The source of this event is the holon that has been requested.
 * 
 * <h4>For an Agent</h4>
 * This event is received by the agent's requesting to join another holon context.
 * 
 * <h4>For a Behavior</h4>
 * Each Behavior instance that needs to communicate with an organisation that is not in the base_organisation (AnalystRole,...)  
 * 
 * <h4>For a Skill</h4>
 * No skill receives this event.
 * 
 * <h4>For Agent Members</h4>
 * The member agents do not receive this event from the parent agent because they are not yet created when the agent is spawned.@TODO "It's not clear, I do think that the sub-members should get it. 
 * 
 * @FIXME To remove maybe useless
 * 
 * @author $Author: manjahdani$
 * @version $0.0.1$
 * @date $31/03/2021$
 * @mavengroupid $be.uclouvain.aptitude$
 * @mavenartifactid $organisation$
 */

event AuthorizationToJoin {

	/** 
	  * Context of the holon that fired the event    
	  */
	val contextID : AgentContext

	/** 
	 * Default Space of the holon that fired the event    
	 */
	val defaultSpace : OpenEventSpace
	
	val entityID : UUID

	/* 
	 * Constructor
	 * @param	ctxt	The context to join
	 * @param	sid	    The space in the context to join
	 * 
	 * @FIXME : Develop an generic version
	 */
	new(ctxt : AgentContext, sid : OpenEventSpace, id : UUID) {
		this.contextID = ctxt
		this.defaultSpace = sid
		this.entityID = id
	}
}
