/** 
 */
package be.uclouvain.organisation.told.entity

import be.uclouvain.organisation.TOLDOrganisationInfo
import io.sarl.core.Behaviors
import io.sarl.core.OpenEventSpace
import io.sarl.lang.core.AgentContext
import io.sarl.core.Logging

/** 
 * The concept-generic role of Entity seeks knowledge to update : 
 * 
 * - Decision-making policy upon occurrence of events
 *  	-(closing a street after accidents, auto-blocking mechanisms in case) 
 * 
 * - The model it uses to describe the world : 
 * 		- eg. Retraining a model after new ground truth data   
 * 
 * @author $Author: manjahdani$
 * @version $0.0.1$
 * @date $31/03/2021$
 * @mavengroupid $be.uclouvain.aptitude$
 * @mavenartifactid $organisation$
 */
behavior EntityRole {
	
	uses Behaviors, Logging
	/*
	 * The entity register the initial base
	 * @TODO : The entity does not need to have a BaseContext ? It does not make sens it only has to know the context of current TOLD. 
	 * The approach is therefore not scalable 
	 */
	
	protected var TOLDContext : AgentContext 
	protected var TOLDSpace : OpenEventSpace


	@SuppressWarnings("potential_field_synchronization_problem")
	on TOLDOrganisationInfo {
		info("met TOLD - " + occurrence.context.ID.toString.substring(0, 5))
		TOLDContext = occurrence.context
		TOLDSpace = occurrence.privateCommunicationChannel
		
		//TOLDSpace.register(asEventListener)
	}
}
