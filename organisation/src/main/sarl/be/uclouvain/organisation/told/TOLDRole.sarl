package be.uclouvain.organisation.told

import be.uclouvain.organisation.OrganizationalRole
import be.uclouvain.organisation.events.AddMember
import be.uclouvain.organisation.events.AuthorizationToJoinContext
import be.uclouvain.organisation.events.JoinOrganisation
import be.uclouvain.organisation.told.events.AddEntry
import be.uclouvain.organisation.told.events.DataEntry
import be.uclouvain.organisation.told.events.DeleteEntry
import be.uclouvain.organisation.told.events.Query
import be.uclouvain.organisation.told.events.QueryAnswer
import be.uclouvain.organisation.told.events.ReadEntry
import be.uclouvain.organisation.told.util.AlgorithmInfo
import io.sarl.core.ContextJoined
import io.sarl.core.ExternalContextAccess
import io.sarl.core.InnerContextAccess
import io.sarl.core.Logging
import java.util.HashMap
import java.util.UUID

/** 
 * Trusted Observations and Learning Database is a database aiming to achieve two goals. 
 * 
 *  - Storing the information communicated by a platform.  
 * 
 *  - Contains ground truth signals dedicated to learning.
 * 
 * @author $Author: manjahdani$
 * @version $0.0.2$
 * @date $16/04/2021$
 * @mavengroupid $be.uclouvain.aptitude$
 * @mavenartifactid $organisation$
 * 
 */

behavior TOLDRole extends OrganizationalRole {
	
	uses AccessDatabaseCapacity, InnerContextAccess,Logging, ExternalContextAccess
	
	on AddEntry {
		
		debug("Creating key : " + occurrence.key + " - " + occurrence.class)
		create(occurrence.key, occurrence.data)
	}
	on DeleteEntry{
		delete(occurrence.key)
	}

	on DataEntry {
		update(occurrence.key, occurrence.data)
	}
	
	/*
	 * Send if available the stored data about it. 
	 */

	
	on AddMember{
		val sourceContextID = occurrence.source.spaceID.contextID
		emit(getContext(sourceContextID).defaultSpace,
				new AuthorizationToJoinContext(this.ID, innerContext.defaultSpace.spaceID.ID)) [
				it.ID == occurrence.memberID
			]
	}
	
	on ContextJoined{
		debug("Joining context " + occurrence.holonContextID)
		if(occurrence.holonContextID!= this.ID){
			
			emit(getContext(occurrence.holonContextID).defaultSpace,new JoinOrganisation(this.ID,innerContext.defaultSpace.spaceID.ID))
		[it.ID == occurrence.holonContextID]
	}}

	on ReadEntry {
		debug("Reading entry and sending -" + read(occurrence.key))
		emit(privateSpacesListeners.get(occurrence.source.ID), new QueryAnswer(read(occurrence.key)))
	}

	on Query {
		assert privateSpacesListeners.keySet.contains(occurrence.source.ID), "Unknown access"
		switch (occurrence.message) {
		case "AlgorithmInfo" :{
			emit(privateSpacesListeners.get(occurrence.source.ID),new QueryAnswer(
										new HashMap(database.filter[p1, p2|p2 instanceof AlgorithmInfo])))
			}
		default:{
			warning("Unknwon message type" + occurrence.message)
		}
		}
	}
	def getOrganizationInfo(memberID : UUID) : TOLDOrganizationInfo{
		
		return new TOLDOrganizationInfo(this.ID, privateSpacesListeners.get(memberID).spaceID.ID, read(memberID))
	}
}
