/** 
 * 
 */
package be.uclouvain.organisation

import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.InnerContextAccess
import io.sarl.core.Logging
import io.sarl.core.MemberJoined
import io.sarl.core.MemberLeft
import io.sarl.core.OpenEventSpace
import io.sarl.core.OpenEventSpaceSpecification
import java.util.HashMap
import java.util.UUID
import io.sarl.lang.core.AgentContext
import java.util.Collections

/** 
 * Global behaviour that derived organisational roles must follow. 
 * 
 * @author $Author: manjahdani$
 * @version $0.0.3$
 * @date $10/01/2022$
 * @mavengroupid $be.uclouvain.aptitude$
 * @mavenartifactid $organisation$
 */
abstract behavior OrganizationalRole {
	uses InnerContextAccess,Behaviors, DefaultContextInteractions, Logging

	protected val privateSpacesListeners = Collections.synchronizedMap(new HashMap<UUID, OpenEventSpace>)
	
	// Create a private channel between the recruited holon and the super-holon. 
	on MemberJoined {

		val memberID = occurrence.agentID
		val sid = UUID.randomUUID
		privateSpacesListeners.put(memberID,
			innerContext.getOrCreateSpaceWithID(OpenEventSpaceSpecification, sid ))
		privateSpacesListeners.get(memberID).registerStrongParticipant(asEventListener)

		info("sending organisation info to " + memberID.toString.substring(0, 5) + 
		" with private Space [\n id = " + privateSpacesListeners.get(memberID).spaceID.ID + "\n contextID = " +
			privateSpacesListeners.get(memberID).spaceID.contextID + "]\n")
		
		if (occurrence.inDefaultSpace) {
			emit(getOrganizationInfo(memberID))[it.ID == memberID]
		}
		else{
			wake(getOrganizationInfo(memberID))[it.ID==memberID]}
		
	}

	// Remove the channel. 
	on MemberLeft {
		privateSpacesListeners.remove(occurrence.agentID)
	}
	abstract def getOrganizationInfo(memberID : UUID) : OrganizationInfo

	def retrieveOrCreateOpenSpaceWithID(ctxt : AgentContext,sid : UUID) {
		return ctxt.getOrCreateSpaceWithID(OpenEventSpaceSpecification, sid)
	}
}
