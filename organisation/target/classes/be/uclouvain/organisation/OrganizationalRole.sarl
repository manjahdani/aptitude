/** 
 * 
 */
package be.uclouvain.organisation

import java.util.Collections
import java.util.HashMap
import java.util.UUID
import io.sarl.api.core.InnerContextAccess
import io.sarl.api.core.Behaviors
import io.sarl.api.core.ExternalContextAccess
import io.sarl.api.core.Logging
import io.sarl.api.core.OpenEventSpace
import io.sarl.api.core.OpenEventSpaceSpecification
import io.sarl.api.core.MemberJoined
import io.sarl.api.core.MemberLeft

/** 
 * Global behaviour that derived organisational roles must follow. 
 * 
 * @author $Author: manjahdani$
 * @version $0.0.3$
 * @date $10/01/2022$
 * @mavengroupid $be.uclouvain.aptitude$
 * @mavenartifactid $organisation$
 */
abstract behavior OrganizationalRole {
	uses InnerContextAccess,Behaviors, ExternalContextAccess,Logging

	protected val privateSpacesListeners = Collections.synchronizedMap(new HashMap<UUID, OpenEventSpace>)
	
	// Create a private channel between the recruited holon and the super-holon. 
	on MemberJoined {
		
		//info("sending organisation info to " + memberID.toString.substring(0, 5) + 
		//" with private Space [\n id = " + privateSpacesListeners.get(memberID).spaceID.ID + "\n contextID = " +
		//	privateSpacesListeners.get(memberID).spaceID.contextID + "]\n")
		if (occurrence.source.ID==this.ID) {
			
			val memberID = occurrence.agentID
			val sid = UUID.randomUUID
			debug("Sending orga info to" + memberID)
			privateSpacesListeners.put(memberID, innerContext.getOrCreateSpaceWithID(OpenEventSpaceSpecification, sid))
			privateSpacesListeners.get(memberID).registerStrongParticipant(asEventListener)
			wake(getOrganizationInfo(memberID))[it.ID==memberID]
		}
	}

	// Remove the channel. 
	on MemberLeft {
		privateSpacesListeners.remove(occurrence.agentID)
	}
	abstract def getOrganizationInfo(memberID : UUID) : OrganizationInfo

	def retrieveOrCreateOpenSpaceWithID(ctxt : UUID,sid : UUID) {
		return getContext(ctxt).getOrCreateSpaceWithID(OpenEventSpaceSpecification, sid)
	}
}
