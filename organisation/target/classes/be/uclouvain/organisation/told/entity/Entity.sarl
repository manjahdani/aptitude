/** 
 */
package be.uclouvain.organisation.told.entity

import be.uclouvain.organisation.Role
import be.uclouvain.organisation.events.AuthorizationToJoinContext
import be.uclouvain.organisation.told.TOLDOrganizationInfo
import io.sarl.core.ExternalContextAccess
import io.sarl.core.Logging

/** 
 * The concept-generic role of Entity seeks knowledge to update : 
 * 
 * - Decision-making policy upon occurrence of events
 *  	-(closing a street after accidents, auto-blocking mechanisms in case) 
 * 
 * - The model it uses to describe the world : 
 * 		- eg. Retraining a model after new ground truth data   
 * 
 * @author $Author: manjahdani$
 * @version $0.0.1$
 * @date $31/03/2021$
 * @mavengroupid $be.uclouvain.aptitude$
 * @mavenartifactid $organisation$
 */
behavior EntityRole extends Role{
	
	uses Logging, ExternalContextAccess
	/*
	 * The entity registerStrongParticipant the initial base
	 * @TODO : The entity does not need to have a BaseContext ? It does not make sens it only has to know the context of current TOLD. 
	 * The approach is therefore not scalable 
	 */

	on TOLDOrganizationInfo {
		//info("met TOLD - " + occurrence.context.ID.toString.substring(0, 5))
		organizationContext.set(occurrence.context)
		privateOrganizationSpace.set(
		retrieveOrCreateOpenSpaceWithID(occurrence.privateCommunicationChannelID))
		startRole
		//TOLDSpace.registerStrongParticipant(asEventListener)
	}
	def startRole (){
		//Do Nothing
	}
	on AuthorizationToJoinContext {
		info("receives authorisation to join the context of - " + occurrence.source.ID.toString.substring(0, 5) +
				" and space " + occurrence.defaultSpaceID)
		join(occurrence.contextID, occurrence.defaultSpaceID)
	}
}
