/** 
 * 
 */
package be.uclouvain.organisation

import io.sarl.core.OpenEventSpace
import io.sarl.lang.core.AgentContext
import java.util.concurrent.atomic.AtomicReference
import java.util.UUID
import io.sarl.core.OpenEventSpaceSpecification
import io.sarl.core.Behaviors
import io.sarl.core.Logging

/** 
 * @author manjah
 * 
 */
abstract behavior Role {
	uses Behaviors, Logging

	protected val organizationContext = new AtomicReference<AgentContext> // context of the organisation Platform
	protected var privateOrganizationSpace = new AtomicReference<OpenEventSpace> // private space between the algorithm and the organisation Platform
	

	def updateContextInfo(ctxt : AgentContext, sid : UUID) {
		info("joins organization : " + ctxt.ID)
		organizationContext.set(ctxt) // Update the organization
		privateOrganizationSpace.set(organizationContext.get.getOrCreateSpaceWithSpec(OpenEventSpaceSpecification,sid))
		privateOrganizationSpace.get.registerStrongParticipant(asEventListener)
		info("with a private space : " + sid)
	}
	
	def retrieveOrCreateOpenSpaceWithID(sid:UUID) {
		assert organizationContext.get !== null, "Organization is not known"
		
		return organizationContext.get.getOrCreateSpaceWithSpec(OpenEventSpaceSpecification,
			sid)
	}
}
