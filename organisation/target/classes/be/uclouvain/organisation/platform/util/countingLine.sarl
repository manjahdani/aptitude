package be.uclouvain.organisation.platform.util

import java.util.concurrent.atomic.AtomicInteger
import org.arakhne.afc.math.geometry.d2.d.Point2d
import java.util.ArrayList
import org.arakhne.afc.math.geometry.d2.d.Vector2d
import java.util.TreeMap

/** 
 * The class represents a crossable counting line.
 * 
 * @param : lx : X coordinate of the left point A  
 * @param : ly : Y coordinate of the left point A
 * @param : rX : X coordinate of the right point B
 * @param : rY : Y coordinate of the right point B
 * @param : numberOfClass : The number of object's classification 
 * 
 * @author manjahdani
 * @version 0.0.2
 * @date $17/06/2021$
 * @mavengroupid $be.uclouvain.aptitude$
 * @mavenartifactid $surveillance$
 * 
 */
class CountingLine {

	public var X_A : int // X coordinate of the left point A
	public var Y_A : int // Y coordinate of the left point A
	public var X_B : int // X coordinate of the right point A
	public var Y_B : int // Y coordinate of the right point A
	
	public val crossedObjects = new ArrayList<Integer>
	public val counts = new TreeMap<Integer, AtomicInteger>

	new (lX : int, lY : int, rX : int, rY : int, numberOfClass : int) {
		this.X_A = lX
		this.Y_A = lY
		this.X_B = rX
		this.Y_B = rY

		/* 
		 * Initialise the counting. 
		 * The mapping of the class number and the its representation is specified in an external file. 
		 * 
		 */
		for (var i = 0; i < numberOfClass; i++) {
			counts.put(i, new AtomicInteger(0))
		}
	}

	def getCounts {
		return this.counts
	}

	def incrementCount(classID : int) {
		this.counts.get(classID).andIncrement
	}

	def getLine {
		return newArrayList(new Point2d(X_A, Y_A), new Point2d(X_B, Y_B))
	}

	def hasCrossed(ID : int) {

		if (crossedObjects.contains(ID)) {
			return true
		} else {
			crossedObjects.add(ID)
			return false
		}
	}

}



/** 
 * The class represents a crossable counting line with a direction.
 * 
 * @param : lx : X coordinate of the left point A  
 * @param : ly : Y coordinate of the left point A
 * @param : rX : X coordinate of the right point B
 * @param : rY : Y coordinate of the right point B
 * @param : numberOfClass : The number of object's classification
 * @param : d  : direction  @FIXME MEDIUM not clear
 * 
 * @author $manjahdani$
 * @version $0.0.1$
 * @date $31/03/2021$
 * @mavengroupid $be.uclouvain.aptitude$
 * @mavenartifactid $surveillance$
 * 
 */
class OrientedCountingLine extends CountingLine {

	val ANGLE_ALONGSIDE = Math.PI * 80 / 180;
	val ANGLE_OPPOSITE = Math.PI * 120 / 180;
	
	public var direction : int; 
  	val normale : Vector2d;
  	
	new (lX : int, lY : int, uX : int, uY : int, numberOfClass : int, d : int) {
	
		super(lX,lY, uX,uY, numberOfClass)
		this.direction = d
		this.normale = get_normale(new Point2d(lX,lY), new Point2d(uX,uY), direction)
		}
		
	def getNormale{
		return this.normale
	}

	def get_normale(P1 : Point2d, P2:Point2d, flag : int) {

    // Flag :  1  gives the normal towards South or West
    // Flag : -1  gives the normal towards North or East
    
    var A:Point2d = P1
    var B:Point2d = P2
    
    if (P1.x > P2.x) { // Make sure that A is with the point with inferior X
        A = P2
        B  = P1}
        
    var m = (B.y-A.y)/(B.x-A.x) //#slope
    var norm_n = Math.sqrt(( m*m ) + 1)*flag
    return (new Vector2d(-m/norm_n, 1/norm_n))
	}
	
	def Orientation(v : Vector2d){
		
		var angle=this.normale.angle(v)
		
		if (angle < ANGLE_ALONGSIDE) {
			return 1
		}
		if (angle > ANGLE_OPPOSITE) {
			return -1
		}		
		return 0
		
	}
}




