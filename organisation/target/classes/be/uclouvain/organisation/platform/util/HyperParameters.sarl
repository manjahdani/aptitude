/** 
 * 
 */
package be.uclouvain.organisation.platform.util

import java.util.Collections
import java.util.concurrent.atomic.AtomicBoolean
import java.util.concurrent.atomic.AtomicInteger
import java.util.HashMap


/** 
 * @author manjah
 * 
 */
class HyperParameters implements Comparable<HyperParameters> {

	public val cautionLevel= new AtomicInteger(-1)
	public val dynamicAdaptationEnabled = new AtomicBoolean(false)
	protected var checkList = Collections.synchronizedMap(new HashMap<String, Boolean>)
	new () {
		checkList.put("CautionLevelSetKnownAndNotNull", false)
		checkList.put("DynamicAdaptationKnownAndNotNull", false)
	}
	new (cl : int, o : boolean) {
		this.cautionLevel.set(cl)
		this.dynamicAdaptationEnabled.set(o)
		checkList.put("CautionLevelSetKnownAndNotNull", true)
		checkList.put("DynamicAdaptationKnownAndNotNull", true)
	}

	def isDynamicAdaptationEnabled : boolean {
		return dynamicAdaptationEnabled.get
	}

	def getCautionLevel() {
		return this.cautionLevel.get
	}

	def setCautionLevel(newCL : int) {
		assert newCL >= 0, "Level of caution is negative value"
		checkList.replace("CautionLevelSetKnownAndNotNull", true)
		this.cautionLevel.set(newCL)
	}

	def getCheckList() {
		return this.checkList
	}

	def setDynamicAdaptation(b : boolean) {
		checkList.replace("DynamicAdaptationKnownAndNotNull", true)
		this.dynamicAdaptationEnabled.set(b)
	}

	def updateParameters(cl : int, isDAE : boolean) {

		setCautionLevel(cl)
		setDynamicAdaptation(isDAE)
	}

	def paramKnown() {
		return areAllTrue(checkList.values)
	}

	def areAllTrue(array : boolean[]) {
		for (b : array)
			if(!b) return false;
		return true;
	}

	def getHyperParametersAsAString() {
		return 'cl = '.concat(getCautionLevel.toString).concat("   b = ").concat(isDynamicAdaptationEnabled.toString)
	}
	
	// @FIXME HIGH develop a proper comparison !!!
	def compareTo(o : HyperParameters) : int {
		return (cautionLevel.get - o.cautionLevel.get)
	}
	
}
