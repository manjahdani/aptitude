/** 
 */
package be.uclouvain.organisation.platform

import be.uclouvain.organisation.OrganizationInfo
import be.uclouvain.organisation.OrganizationalRole
import be.uclouvain.organisation.events.AuthorizationToJoinContext
import be.uclouvain.organisation.events.AuthorizationToPerformMission
import be.uclouvain.organisation.events.RequestToJoin
import be.uclouvain.organisation.platform.events.Request2PerformMission
import be.uclouvain.organisation.platform.events.StopMission
import be.uclouvain.organisation.told.TOLDOrganizationInfo
import io.sarl.core.Behaviors
import io.sarl.core.ExternalContextAccess
import io.sarl.core.Initialize
import io.sarl.core.InnerContextAccess
import io.sarl.core.Logging
import io.sarl.core.OpenEventSpace
import io.sarl.core.OpenEventSpaceSpecification
import java.util.HashMap
import java.util.UUID
import java.util.concurrent.atomic.AtomicReference

/** 
 * The Platform manages the storage and/or computing of resources. A Platform could include sub-Platforms (holonic). 
 * At the top level, the role manages the resources from a holistic perspective. At the lower level, the role manages directly the hardware.
 *
 * As an example, a city-scale network of cameras remains a Platform that could be divided into
 * sub-Platforms; namely the level of crossroads. Likewise, the level could be divided again to reach
 * the atomic level of the hardware consisting of a camera and a processor.
 * 
 * @FIXME LOW Check whether it makes sens the use of OpenEvent rather than EvenSpecification. 
 * 
 * @author $Author: manjahdani$
 * @version $0.0.3$
 * @date $11/06/2021$
 * @mavengroupid $be.uclouvain.aptitude$
 * @mavenartifactid $organisation$
 *   
 */


behavior PlatformRole extends OrganizationalRole {
	uses Behaviors, InnerContextAccess, ExternalContextAccess, Logging

	protected var TOLDID = new AtomicReference<UUID>
	
	protected val missionSpace= new HashMap<UUID, OpenEventSpace> // @FIXME MEDIUM one has to investivagete whether it is usefulUsed for the communications among observers.
	val location = new AtomicReference<String>
	

	on Initialize {
		location.set(occurrence.parameters.get(0).toString)
	}


	on TOLDOrganizationInfo {
		TOLDID.set(occurrence.source.ID)
		info("met TOLD organisation - " + TOLDID.toString.substring(0, 5))
		if (!privateSpacesListeners.containsKey(TOLDID.get)) { // Not Encountered
			info("TOLD was not encountered")
			var pChannel = retrieveOrCreateOpenSpaceWithID(occurrence.context, occurrence.privateCommunicationChannelID)

			privateSpacesListeners.put(TOLDID.get, pChannel)
			pChannel.registerStrongParticipant(asEventListener)
			emit(pChannel,
				new PlatformOrganizationInfo(innerContext, privateSpacesListeners.get(TOLDID).spaceID.ID, location.get)) [
				it.ID == TOLDID.get
			]
		//PlatformTOLDSpace.registerStrongParticipant(asEventListener)
		//PlatformTOLDSpace.emit(new JoinOrganisation(innerContext))
	}}
	
	on Request2PerformMission {
		// RuleManagement(new MembershipInfoRule(occurrence.source, occurrence.SourceEventSpace, occurrence.entityData))
		// if (true) {
		
		val observerID = occurrence.source.ID
		info("received request to add a mission from " + observerID.toString.substring(0, 5))
		//@FIXME MEDIUM Implement an IF itstatement
		val missionSpaceInPlatformID = UUID.randomUUID // @FIXME MEDIUM MAKE SURE THIS DOES NOT CAUSE A PROBLEM
		missionSpace.put(occurrence.missionData.missionID,
			innerContext.getOrCreateSpaceWithID(OpenEventSpaceSpecification, missionSpaceInPlatformID)) 
		emit(privateSpacesListeners.get(observerID), 
			new AuthorizationToPerformMission(occurrence.missionData.missionID, missionSpaceInPlatformID)
		)[it.ID == observerID]
	}

	
	on RequestToJoin {
		info("receives a request to welcome a new agent")
		emit(occurrence.emitterSpace, 
			new AuthorizationToJoinContext(this.ID, innerContext.defaultSpace.spaceID.ID)) [
				it.ID == occurrence.source.ID
			]
	}
	
	on StopMission {
		// if(RuleManagement())
		//info(" I received a Stop Misson" + occurrence.expertID)
		//wake(new LeavePlatform)
	}
	
	def getOrganizationInfo(memberID : UUID) : OrganizationInfo {

		return (new PlatformOrganizationInfo(innerContext, privateSpacesListeners.get(memberID).spaceID.ID, location.get))
	}
}



