/** 
 * 
 */
package be.uclouvain.aptitude.surveillance

import be.uclouvain.organisation.OrganizationInfo
import io.sarl.core.Behaviors
import io.sarl.core.Destroy
import io.sarl.core.ExternalContextAccess
import io.sarl.core.InnerContextAccess
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import io.sarl.core.MemberJoined
import io.sarl.core.OpenEventSpaceSpecification
import io.sarl.core.Schedules
import java.util.UUID
import io.sarl.core.Initialize
import be.uclouvain.organisation.AgentPerformance
import io.sarl.lang.core.Event

/** 
 * The agent gives global trait to agents. 
 * 
 * @author $Author: manjahdani$
 * @version $0.0.1$
 * @date $31/03/2021$
 * @mavengroupid $be.uclouvain.aptitude$
 * @mavenartifactid $surveillance$
 * 
 */
 


agent Paraddis {
	uses Lifecycle, Logging, InnerContextAccess, Schedules, Behaviors, ExternalContextAccess

	protected var AgentType : String = 'Unknown'
	
	on Initialize {
		
		setSkill(new MeasureAgentPerformance, AgentPerformance)
		
	}
	on Destroy {
		info("Stopped.")
	}
	on MemberJoined {
		debug(" noticed " + occurrence.agentType.replaceAll("be.uclouvain.aptitude.surveillance.", " - ") +
				" - &ID : " + occurrence.agentID.toString.substring(0, 5) + "message sent from" + occurrence.source.ID)
	}
	on OrganizationInfo {
		debug("Registering in the private space of organisation " + occurrence.contextID)
		val context = getContext(occurrence.contextID) // Update the organization
		context.getOrCreateSpaceWithID(OpenEventSpaceSpecification, occurrence.privateCommunicationChannelID).registerStrongParticipant(asEventListener)
	}


	on CommitSuicide {
		
		//debug("received commitSuicide : " + occurrence.fromMe + " : " + occurrence.source.ID) 
		terminateAgent
	}

	def terminateAgent {

		/* 
		 * Protocol 
		 * 1. Kill sub-holons 
		 * 2. Cancel tasks
		 * 3. terminate agent
		 */
		
		if (hasMemberAgent) {
			KillMembers
		} else if (!getActiveTasks.isEmpty) {

			CancelTasks
		} else {
			killMe
		}
	}

	def isInContext(contextID : UUID) {

		for (ctxt : allContexts) {
			if (ctxt.ID == contextID) {
				return true
			}
		}
		return false
	}
	
	def KillMembers {
		
		
		for (h : memberAgents) {
			
			wake(new CommitSuicide)[it.ID == h]
		}
		val waitTask = task("wait-member-killed-task")
		waitTask.every(2000) [
			if (!hasMemberAgent) {
				CancelTasks
			}
		]
	}
	
	def CancelTasks{
		
		var tasksInProgress = getActiveTasks
		for (t : tasksInProgress) {
			task(t).cancel
			tasksInProgress.remove(t)
			// @DEBUG info("done cancelling : " + getActiveTasks)
	}
	val waitTask = task("final-task")
	waitTask.every(1000)[
		if(tasksInProgress.isEmpty){
			waitTask.cancel
			killMe	
		}
	]
}
}

behavior PerformanceCounter{
	uses AgentPerformance
	on Event {
		incrementMessage
	}
}