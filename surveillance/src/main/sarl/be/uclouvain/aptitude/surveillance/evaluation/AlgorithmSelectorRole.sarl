/** 
 * 
 */
package be.uclouvain.aptitude.surveillance.evaluation

import be.uclouvain.aptitude.surveillance.algorithm.LastFrame
import be.uclouvain.aptitude.surveillance.algorithm.util.EvaluationResults
import be.uclouvain.aptitude.surveillance.algorithm.util.Metric
import be.uclouvain.organisation.Role
import be.uclouvain.python_access.EvaluationResult
import be.uclouvain.python_access.PartnerEvaluationFound
import be.uclouvain.python_access.messages.EvaluationMessage
import io.sarl.core.Behaviors
import io.sarl.core.Initialize
import io.sarl.core.Logging
import java.nio.file.Files
import java.nio.file.Paths
import java.util.UUID

/** 
 * @TODO : To complete
 * 
 * @author  $ manjahdani$
 * @version $0.0.1$
 * @date $17/06/2021$
 * @mavengroupid $be.uclouvain.aptitude$
 * @mavenartifactid $surveillance$
 * 
 */
behavior AlgorithmSelectorRole extends Role { 
	
	uses AlgorithmSelection, Logging, Evaluation, Behaviors
	
	protected var compDuration : long
	protected var numberTests = 0 
	
	protected var score : Metric; 
	protected var gts : String
	
	on Initialize {

		score = occurrence.parameters.get(3) as Metric
		gts = new String(Files.readAllBytes(Paths.get(score.gtFilePatch)))
		setSkill(new AlgorithmSelectionSkill(score.params), AlgorithmSelection)
		selfSpace.registerStrongParticipant(asEventListener)
}

	
	on PartnerEvaluationFound {
		//partnerName = occurrence.partnerName
		
		//info("Eval found partner " + occurrence.partnerName)
		this.compDuration = System.currentTimeMillis()
	}

	
	on LastFrame {
		info("Obtained the path to observations " + occurrence.pred_file_Path +"\n"
			+ " that stopped at frame " 
			+ occurrence.frameNumber
		)
		
		var predictions = new String(Files.readAllBytes(Paths.get(occurrence.pred_file_Path)));
		var testID = UUID.randomUUID
		info("Sending to evaluation" + testID)
		addEvalutionResults(testID,
			new EvaluationResults(
				occurrence.source.ID, 
				occurrence.observerID, 
				occurrence.pred_file_Path, 
				occurrence.total_time_detection,
				occurrence.total_time_tracking, 
				occurrence.frameNumber))
		sendEvaluationRequest(testID.toString, predictions, gts)
	}

	/* 
	 * @FIXME HIGH Not general
	 */
	on EvaluationResult {

		synchronized (this) {
			 info("Message Evaluation Received")
			if (processEvaluationMessage(occurrence.result.requestID, occurrence.result)) {
				numberTests += 1
				info("Recording the result" +"numberTests of Competitor " + occurrence.result.requestID)
				info("HOTA" + occurrence.result.HOTA)
				if (numberTests == 1) {
					var selected = selectAlgorithm()
					
					selfSpace.emit(this.ID,new CompetitionOver(selected.providerID,selected.competitorID))


				}
			}
			else{
				info("Could not succed to add " +occurrence.result.uuid)
			}
			}
			// print(Result) 
	}
	
	def print(result : EvaluationMessage) {
		
		 info("HOTA \t" + result.HOTA,'\n'+
		 "DetA \t" + result.detA,'\n'+
		 "AssA \t" + result.assA,'\n'+
		 "DetRe \t" + result.detRe,'\n'+
		 "DetPr \t" + result.detPr,'\n'+
		 "AssRe \t" + result.assRe,'\n'+
		 "AssPr \t" + result.assPr,'\n'+
		 "LocA \t" + result.locA,'\n')
	}
}
