/** 

 */
package be.uclouvain.aptitude.surveillance.platform

import be.uclouvain.aptitude.surveillance.Paraddis
import be.uclouvain.organisation.platform.PlatformCapacity
import be.uclouvain.organisation.platform.PlatformSkill
import be.uclouvain.organisation.platform.events.LocalDatabaseRequest
import be.uclouvain.organisation.platform.util.PlatformConfig
import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.InnerContextAccess
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import io.sarl.core.OpenEventSpaceSpecification
import java.util.UUID
import java.util.concurrent.atomic.AtomicReference
import be.uclouvain.aptitude.surveillance.platform.events.AgentPlatform
import be.uclouvain.organisation.platform.events.Ready
import be.uclouvain.aptitude.surveillance.algorithm.Algorithm
import java.util.HashMap
import be.uclouvain.organisation.told.util.AlgorithmInfo
import be.uclouvain.organisation.told.events.QueryAnswer

/**
 * 
 * 
 * @author $Author: manjahdani$
 * @version $0.0.1$
 * @date $31/03/2021$
 * @mavengroupid $be.uclouvain.aptitude$
 * @mavenartifactid $organisation$
 */

agent PlatformAgent extends Paraddis {

	uses Logging, Behaviors, InnerContextAccess, Lifecycle, DefaultContextInteractions

	 
	
	val platformConfig : AtomicReference<PlatformConfig> = new AtomicReference<PlatformConfig>
	

	on Initialize {
		platformConfig.set(occurrence.parameters.get(0) as PlatformConfig)
		loggingName = this.ID + "-Platform-" + platformConfig.get.location + "-" + platformConfig.get.getLevel()
		registerBehavior(new PlatformEntityRole(this))
		emit(new LocalDatabaseRequest(this.ID,innerDefaultSpace.spaceID.ID))[!me]
		
		if (platformConfig.get.getLevel > 0) {
			val openChannel = innerContext.getOrCreateSpaceWithID(OpenEventSpaceSpecification, UUID.randomUUID)
			openChannel.registerStrongParticipant(asEventListener)
			emitToParent(new AgentPlatform(platformConfig.get.location, this.ID, openChannel))
			setSkill(new PlatformSkill(platformConfig.get), PlatformCapacity)
			registerBehavior(new SurveillancePlatformRole(this), platformConfig.get.getLocation)
		} else {
			registerBehavior(new ManagerPlatformRole(this), platformConfig.get.getLocation, occurrence.parameters.get(1))
		}
	}
	
	on QueryAnswer {
		if(platformConfig.get.level==0){
		info("Query received")		
		var registeredAlgorithms = occurrence.answerObject as HashMap<UUID, AlgorithmInfo>
		for (t : platformConfig.get.tasks.keySet) {
		 spawnInContext(Algorithm, innerContext, platformConfig.get.tasks, new AlgorithmInfo(t, "none", t),
		 new HashMap(registeredAlgorithms.filter[p1, p2|p2.task == t])) 
		 }}
	}
	
	on Ready {
		info("Ready to receive operating mission")
		for (swc : platformConfig.get.subPlatformConfig) {
			val randomID = UUID.randomUUID
			spawnInContextWithID(PlatformAgent, randomID, innerContext, swc)
		}
	}
}
