
package be.uclouvain.aptitude.surveillance.algorithm

import be.uclouvain.organisation.platform.MissionSensitivity
import be.uclouvain.organisation.platform.ObserverRole
import be.uclouvain.organisation.platform.AlgorithmJoinPlatform
import be.uclouvain.organisation.platform.LeavePlatform
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Destroy
import io.sarl.core.ExternalContextAccess
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.OpenEventSpace
import java.io.FileReader
import java.util.TreeMap
import java.util.UUID
import org.json.simple.JSONObject
import org.json.simple.parser.JSONParser

/** 
 * @author manjah
 * 
 */
behavior TrackerRole extends ObserverRole {
	uses Logging, PythonTwinObserverAccess, ExternalContextAccess, DefaultContextInteractions

	var partnerTrackingName : String

	protected var PlatformSpace : OpenEventSpace
	protected var PlatformID : UUID
	val intensityMap = new TreeMap<Integer, Integer> 
	
	val availableObservers = newArrayList("TinyYOLO", "YOLO")
	on Initialize {
		intensityMap.put(0, 1)
		intensityMap.put(1, 0)
		intensityMap.put(2, 0)
		intensityMap.put(3, 1)
		setSkill(new TrackingImpl)
		var parser = new JSONParser(); 
		var configPathTracker = occurrence.parameters.get(0).toString
		var jsonTracker = parser.parse(new FileReader(configPathTracker)) as JSONObject;
		ActivateAccess(jsonTracker)
	}

	on Destroy {
		info("The behavior was stopped.")
	}

	@SuppressWarnings("potential_field_synchronization_problem")
	on PartnerTrackingFound {
		this.partnerTrackingName = occurrence.partnerName
		info("Tracking Partner found: " + this.partnerTrackingName)
	}
	on LeavePlatform {
		// join(BaseContext.ID, BaseSpace.spaceID.ID)
		info("ObserverTrackerLeaving")
		// sendAction(4)
			// leave(PlatformID)
	}

	on MissionSensitivity {
		sensitivity.set(occurrence.s)
		val Observer = availableObservers.get(intensityMap.get(sensitivity.get))
		info("Come here : " + Observer)
		emit(TOLDSpace, new AlgorithmJoinPlatform(PlatformContext, TOLDSpace, Observer, "Detector"))
	}

	on BBoxes2DTrackResult {
		emit(new BBoxes2DTrackResult(occurrence.bboxes2DTrack))[it.UUID == observerID]
		 //println("***********************")
		 //println("* Tracking " + occurrence.bboxes2DTrack.frameNumber)
		// println("*  " + occurrence.bboxes2DTrack.trackingTime)
		// println("*  " + Arrays.toString(occurrence.bboxes2DTrack.globalIDs))
		// println("*  " + Arrays.toString(occurrence.bboxes2DTrack.bboxes))
		// println("*  " + Arrays.toString(occurrence.bboxes2DTrack.classIDs))
		// println("*  " + Arrays.toString(occurrence.bboxes2DTrack.detConfs))
		// println("*  " + occurrence.bboxes2DTrack.lastFrame)
		// println("***********************")
	}
	@SuppressWarnings("discouraged_occurrence_readonly_use")
	on BBoxes2DResult {
		
		Signal2Perception(occurrence.bboxes2D)
		//getPerception(occurrence.bboxes2D)
	}
}
