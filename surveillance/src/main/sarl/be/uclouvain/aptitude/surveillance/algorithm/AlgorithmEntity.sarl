/** 
 * 
 */
package be.uclouvain.aptitude.surveillance.algorithm

import be.uclouvain.aptitude.surveillance.algorithm.tracker.TrackingPerception
import be.uclouvain.aptitude.surveillance.algorithm.util.BBoxe2D
import be.uclouvain.organisation.TOLDOrganisationInfo
import be.uclouvain.organisation.told.AddEntry
import be.uclouvain.organisation.told.DataEntry
import be.uclouvain.organisation.told.DeleteEntry
import be.uclouvain.organisation.told.QueryAnswer
import be.uclouvain.organisation.told.entity.EntityRole
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import java.io.File
import java.io.FileWriter
import be.uclouvain.aptitude.surveillance.algorithm.tracker.TrackingTaskOver
import io.sarl.core.ExternalContextAccess

/** 
 * @author manjah
 * 
 */
 
behavior AlgorithmEntity extends EntityRole {
	
	uses Logging, Lifecycle, ExternalContextAccess

	var predfile = new File("F:\\Database\\".concat(this.ID.toString) + ".txt")

	on TOLDOrganisationInfo {
		debug("Creating new file to registerStrongParticipant prediction")
		emit(occurrence.privateCommunicationChannel, new AddEntry(this.ID, new FileWriter(predfile)))
	}
	on TrackingPerception { //Filter the recording of the results if its not sent by the role.
		
		assert TOLDSpace !== null,"TOLDSpace, null"
	
		if (occurrence.source.ID == this.ID) {
		debug("recording tracking")
		assert occurrence.perceptions !== null, "Perceptions are null"
		var a = occurrence.perceptions as BBoxe2D[]
		
		emit(TOLDSpace, new DataEntry(this.ID,a))
		}
	}
	on TrackingTaskOver {
		//info("Entity role asking to close the entry")
		emit(TOLDSpace,new DeleteEntry(this.ID))
		killMe
	}
	on QueryAnswer{
//		info("Received this object" + occurrence.answerObject as FileWriter)
//		info("Closing the file")
//		(occurrence.answerObject as FileWriter).close
	}
}



/*
 * predfile = new File("F:\\" +"Final".concat(platformName).concat(this.ID.toString) + ".txt")
 * gt = new FileWriter(predfile)
 * 
 * predfile = new File("F:\\" + DetectorName.concat(observerADN.name).concat(platformName).concat(this.ID.toString) + ".txt")
 * gt = new FileWriter(predfile)
 */