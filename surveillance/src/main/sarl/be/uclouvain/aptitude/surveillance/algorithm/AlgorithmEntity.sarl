/** 
 * 
 */
package be.uclouvain.aptitude.surveillance.algorithm

import be.uclouvain.aptitude.surveillance.algorithm.tracker.events.TrackingPerception
import be.uclouvain.aptitude.surveillance.algorithm.util.BBoxe2D
import be.uclouvain.organisation.events.AddMember
import be.uclouvain.organisation.platform.PlatformOrganizationInfo
import be.uclouvain.organisation.told.entity.EntityRole
import be.uclouvain.organisation.told.events.AddEntry
import be.uclouvain.organisation.told.events.DataEntry
import be.uclouvain.organisation.told.events.DeleteEntry
import be.uclouvain.organisation.told.events.QueryAnswer
import io.sarl.core.ExternalContextAccess
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import java.io.File
import java.io.FileWriter
import io.sarl.core.Behaviors
import be.uclouvain.aptitude.surveillance.evaluation.EvaluatorEntityRole
import be.uclouvain.aptitude.surveillance.evaluation.CreateEvaluatorEntity
import be.uclouvain.organisation.platform.events.StopMission

/** 
 * @author manjah
 * 
 */
 
behavior AlgorithmEntity extends EntityRole {
	
	uses Logging, Lifecycle, ExternalContextAccess,Behaviors

	var predfile :File
	
	
	on Initialize{
		predfile = new File(occurrence.parameters.get(0).toString)
	}
	on PlatformOrganizationInfo {
		emit(getContext(occurrence.contextID).defaultSpace, new AddMember(this.ID))
	}
	on TrackingPerception { //Filter the recording of the results if its not sent by the role.
		
		assert organizationContext.get !== null,"TOLDSpace, null"
	
		if (occurrence.source.ID == this.ID) {
		debug("recording tracking")
		assert occurrence.perceptions !== null, "Perceptions are null"
		var a = occurrence.perceptions as BBoxe2D[]
		
		emit(privateOrganizationSpace.get, new DataEntry(this.ID, a))
		}
	}
	on StopMission {
		info("Entity role asking to close the entry")
		emit(privateOrganizationSpace.get,new DeleteEntry(this.ID))
		killMe
	}
	on QueryAnswer{
//		info("Received this object" + occurrence.answerObject as FileWriter)
//		info("Closing the file")
//		(occurrence.answerObject as FileWriter).close
	}
	override Ready2Work{
		//info("Creating new file to register prediction")
		emit(privateOrganizationSpace.get, new AddEntry(this.ID, new FileWriter(predfile)))
	}

	on CreateEvaluatorEntity {
		registerBehavior(new EvaluatorEntityRole(this.owner),
			"F:\\Database\\EvaluationResults\\".concat(this.ID.toString) + ".txt",organizationContext.get.ID,privateOrganizationSpace.get.spaceID.ID)
	}
}
