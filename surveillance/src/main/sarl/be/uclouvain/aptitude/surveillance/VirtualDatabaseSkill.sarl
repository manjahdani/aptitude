package be.uclouvain.aptitude.surveillance

import be.uclouvain.aptitude.surveillance.algorithm.util.BBoxe2D
import be.uclouvain.organisation.told.AccessDatabaseCapacity
import be.uclouvain.organisation.told.util.AlgorithmInfo
import io.sarl.core.Logging
import java.io.FileWriter
import java.util.HashMap
import java.util.UUID

/** 
 * @TODO : Descrribe
 * 
 * @author $Author: manjahdani$
 * @version $0.0.2$
 * @date $16/04/2021$
 * @mavengroupid $be.uclouvain.aptitude$
 * @mavenartifactid $organisation$
 * 
 */
skill VirtualDatabaseSkill implements AccessDatabaseCapacity {
	uses Logging

	protected val database : HashMap<UUID, Object> = new HashMap<UUID, Object> // UUID has been chosen to ensure privacy @TODO : Develop
	
	def install {
		database.put(UUID.randomUUID,
			new AlgorithmInfo("YOLO", "F:/aptitude/surveillance/src/main/resources/config/test-YOLO.json", "DETECTOR"))
		database.put(UUID.randomUUID,
			new AlgorithmInfo("TinyYOLO", "F:/aptitude/surveillance/src/main/resources/config/test-TinyYOLO.json",
			"DETECTOR"))
		database.put(UUID.randomUUID,new AlgorithmInfo("SORT", "F:/aptitude/surveillance/src/main/resources/config/test-SORT.json", "TRACKER"))
		database.put(UUID.randomUUID,new AlgorithmInfo("DeepSORT", "F:/aptitude/surveillance/src/main/resources/config/test-DeepSORT.json","TRACKER"))
		database.put(UUID.randomUUID,new AlgorithmInfo("APTITUDE", "NoneForTheMoment","COUNTER"))
		database.put(UUID.randomUUID,"a")
	}

	def prepareUninstallation {
		// Function invoked when the skill is preparing to be uninstalled from the owner, but before the owner is destroyed.
		// You should put all the resource release statements that should be executed before the owner is destroyed.
		//info("Preparing the uninstallation of the skill")
	}

	def uninstall {
		// Function invoked when the skill is uninstalled from the owner, and after the owner is destroyed.
		// You should put all the resource release statements in this block of code.
		info("Uninstalling the skill")
	}

	override delete(key : UUID) {
		database.remove(key)
	}

	def create(id : UUID, data : Object){
		database.put(id, data)
	}

	def read(key:UUID) : Object {
		return database.get(key)
	}
	
	def getdatabase{
		return this.database
	}
	override update(id : UUID, data : Object) {
		
		if(data instanceof BBoxe2D[]){
			updateGroundtruth(database.get(id) as FileWriter, data)
		}
	}
	synchronized def updateGroundtruth(gt : FileWriter, perception : BBoxe2D[]) {
		for (p : perception) {
			gt.write((p.frame + 1).toString + "," + p.globalID.toString + "," + p.x.intValue.toString + "," +
					p.y.intValue.toString + "," + p.w.intValue.toString + "," + p.h.intValue.toString + "," + 
				 "-1" +
				  "," + "-1" + "," + "-1" + "," + "-1" + "\n")
			}
		}
}
