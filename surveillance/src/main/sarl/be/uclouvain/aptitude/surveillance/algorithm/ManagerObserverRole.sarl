/** 
 * 
 */
package be.uclouvain.aptitude.surveillance.algorithm

import be.uclouvain.organisation.platform.ObserverRole
import be.uclouvain.organisation.platform.util.HyperParameters
import be.uclouvain.organisation.platform.util.Metadata
import io.sarl.core.AgentSpawned
import io.sarl.core.Behaviors
import io.sarl.core.InnerContextAccess
import io.sarl.core.Logging
import java.util.Collections
import java.util.HashMap
import java.util.TreeMap
import java.util.UUID
import be.uclouvain.organisation.platform.util.SurveillanceMissionData
import java.util.concurrent.atomic.AtomicBoolean
import io.sarl.core.OpenEventSpaceSpecification
import io.sarl.core.DefaultContextInteractions
import be.uclouvain.organisation.platform.events.AddMission
import io.sarl.lang.core.Event
import be.uclouvain.organisation.platform.events.Ready2Process
import be.uclouvain.organisation.events.JoinOrganisation

/** 
 * @author manjah
 * 
 */
abstract behavior ManagerObserverRole extends ObserverRole {
	uses Logging, Behaviors,InnerContextAccess, DefaultContextInteractions

	protected val SENSORS = Collections.synchronizedMap(new TreeMap<String, Metadata>) // Possible Sensors @FIXME HIGH should be given by the Analyst which makes it configurable ?
	protected val internal_externalMap = Collections.synchronizedMap(new HashMap<UUID, UUID>) // {key := uid} of the an internal mission, {value:= uid of the ordered mission}
	
	protected val innerProcess_ParametersMap = Collections.synchronizedMap(new TreeMap<HyperParameters,UUID>)
	protected val isDynamicAdaptionEnabled = new AtomicBoolean(false) // @FIXME MEDIUM not a proper way as it depends on the allocated resources. Maybe introducing a budget is better representative. 
	
	//	//protected val detector_innerTrackerMap = Collections.synchronizedMap(new HashMap<String, UUID>)
	// protected val innerTracker_detectorsMap = Collections.synchronizedMap(new HashMap<UUID, String>)
	on RoleRegistered {
		info("Received role Registered from " + occurrence.source.ID)
		wake(new JoinOrganisation(organizationContext.get.ID, organizationContext.get.defaultSpace.spaceID.ID)) [
			it.ID == occurrence.source.ID
		]
	}

	on AgentSpawned {		
		val mbID = occurrence.agentID
		if (memberAgents.contains(mbID)) {
			info("inner agent - " + mbID)
		    wake(provideRoleMessage(mbID))[it.ID == mbID]
		}
	}
	
	def provideRoleMessage(mbID:UUID) : Event{
		return new RegisterUnitaryRole
	}

	def processingMissionWithID(mID : UUID){
		for (s : SENSORS.keySet) {
			val internalMissionID = UUID.randomUUID // create a random uid for a sub-mission aimed at answering the mission with uid = mID 
			internal_externalMap.put(internalMissionID, mID) // table {key := uid} of the an internal mission, {value:= uid of the ordered mission}
			val newInternalMission = new SurveillanceMissionData(internalMissionID, this.ID, organizationContext.get.ID,
				SENSORS.get(s).performance, isDynamicAdaptionEnabled.get)
			orderedMissionList.put(internalMissionID, newInternalMission)
			innerProcess_ParametersMap.put(
				new HyperParameters(SENSORS.get(s).performance, 
									isDynamicAdaptionEnabled.get), 
				internalMissionID)
			var comSpace = organizationContext.get.getOrCreateSpaceWithID(OpenEventSpaceSpecification, UUID.randomUUID) // An internal space to communicate with other roles.
			comSpace.registerStrongParticipant(asEventListener)
			providers.put(internalMissionID, comSpace)
			emitToParent(new AlgorithmNeeded(innerContext, s, internalMissionID))
		}
	}

	on Ready2Process {
		info("Agent - " + occurrence.source.ID +" is ready to operate")
		val mbID = occurrence.source.ID
		wake(new AddMission(mbID, providers.get(mbID).spaceID.ID)) [
			it.ID == mbID
		]
	}

}
