/** 
 * 
 */
package be.uclouvain.aptitude.surveillance.algorithm.util

import be.uclouvain.aptitude.surveillance.algorithm.util.EvaluationResults
import java.util.UUID
import be.uclouvain.organisation.platform.util.HyperParameters

/** 
 * @author manjah
 * 
 */
class APTITUDE_EvaluationResults extends EvaluationResults implements Comparable<APTITUDE_EvaluationResults> {
	
	val beta : HyperParameters

	new (pid : UUID, id : UUID, s : String, ts : double, tt : double, f : int, hp :HyperParameters){
		super(pid,id,s,ts,tt,f)
		this.beta=hp
	}
	def getFps {
		return (this.trackingTime + this.detectionTime) / this.frame
	}

	def getEffiency {
		return (0.51 - 2 * fps) / (0.49)
	}
	
	def getBeta{
		return this.beta.cautionLevel
	}
	def APTITUDE_score {
		return HOTA + beta.cautionLevel*effiency
	}

	def compareTo(o : APTITUDE_EvaluationResults) : int {
		if(APTITUDE_score > o.APTITUDE_score){
			return 1
		}
		else{
			return -1
		}

	}
}
