/** 
 * 
 */
package be.uclouvain.aptitude.surveillance.algorithm

import be.uclouvain.organisation.events.JoinOrganisation
import be.uclouvain.organisation.platform.events.AlgorithmJoinPlatform
import be.uclouvain.organisation.told.util.AlgorithmInfo
import be.uclouvain.organisation.util.OrganisationID

import io.sarl.lang.core.Agent
import java.util.HashMap
import java.util.UUID
import java.util.concurrent.atomic.AtomicReference
import io.sarl.api.core.Logging
import io.sarl.api.core.Lifecycle
import io.sarl.api.core.Behaviors
import io.sarl.api.core.InnerContextAccess
import io.sarl.api.core.Initialize
import io.sarl.api.core.AgentSpawned

/** 
 * @author manjah
 * 
 */
behavior ManagerAlgorithmRole {
	uses Logging, Lifecycle, InnerContextAccess,Behaviors
	
	val subAlgorithmsPlatformMap = new HashMap<UUID, OrganisationID>
	val INIT_TASKS = new HashMap<String, Class<? extends Agent>>
	protected val ADN = new AtomicReference<AlgorithmInfo>
	on Initialize {
		ADN.set(occurrence.parameters.get(1) as AlgorithmInfo)
		INIT_TASKS.putAll(occurrence.parameters.get(0) as HashMap<String, Class<? extends Agent>>)
	}
	on AlgorithmJoinPlatform {
		debug("deploys " + ADN.get.task + " named " + occurrence.name + " performing in platform " +
			occurrence.source.ID)
		val cloneID = UUID.randomUUID
		subAlgorithmsPlatformMap.put(cloneID, new OrganisationID(
												occurrence.contextID,
												occurrence.defaultSpaceID))
		
		spawnInContextWithID(INIT_TASKS.get(ADN.get.task), cloneID, innerContext, INIT_TASKS,
			ADN.get.cloneChildWithID(cloneID))
	}
	on AgentSpawned{
		if (subAlgorithmsPlatformMap.keySet.contains(occurrence.agentID)) {
			//info("Invitation to become manager to - " + occurrence.agentID)
			wake(new BecomeManager)[it.ID==occurrence.agentID]
		}	
	}
	on RoleRegistered{
		wake(
			new JoinOrganisation(
			subAlgorithmsPlatformMap.get(occurrence.source.ID).contextID,
			subAlgorithmsPlatformMap.get(occurrence.source.ID).defaultSpaceID
			))[it.ID == occurrence.source.ID]
	}

}
