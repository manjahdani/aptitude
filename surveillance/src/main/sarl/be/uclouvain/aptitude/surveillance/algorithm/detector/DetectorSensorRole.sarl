/** 
 * 
 */
package be.uclouvain.aptitude.surveillance.algorithm.detector

import be.uclouvain.organisation.platform.SensorRole
import be.uclouvain.python_access.BBoxes2DResult
import be.uclouvain.python_access.BBoxes2DSignal
import be.uclouvain.python_access.messages.BBoxes2DMessage
import io.sarl.core.ExternalContextAccess

behavior DetectorSensorRole extends SensorRole {
	
	uses ExternalContextAccess

	on BBoxes2DResult {
		val signal = Signal2Transmit(occurrence.bboxes2D)
		//warning("Received detection" + occurrence.bboxes2D.frameNumber + "listeners"+ listeners.keySet)
		for (listenersSpace : listeners.values) {
			emit(listenersSpace, signal)[!me]
		}
	}

	def Signal2Transmit(signal : BBoxes2DMessage) {
		return new BBoxes2DSignal(signal, ADN.get.name)
	}
	
}