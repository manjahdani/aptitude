/** 
 * 
 */
package be.uclouvain.aptitude.surveillance

import be.uclouvain.organisation.events.JoinOrganisation
import be.uclouvain.organisation.platform.events.LocalDatabaseRequest
import be.uclouvain.organisation.platform.events.Ready
import be.uclouvain.organisation.told.AccessDatabaseCapacity
import be.uclouvain.organisation.told.TOLDRole
import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.ExternalContextAccess
import io.sarl.core.Initialize
import io.sarl.core.InnerContextAccess
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import java.util.Collections
import java.util.HashMap
import java.util.UUID
import java.util.concurrent.atomic.AtomicReference
import be.uclouvain.organisation.util.OrganisationID

/** 
 * 
 * The agent TOLD keeps record of current and past knowledge. 
 * The size of the database is a parameter and therefore we could have local TOLD 
 * that communicates to a higher TOLD itself communicating to a bigger database. 
 * The TOLD agent creates within its context spaces, as many agents as there are different tasks. 
 * Therefore a space for Detectors, Trackers, Vehicle Counter and broadly speaking each class of algorithms.    
 * 
 * @author $Author: manjahdani$
 * @version $0.0.2$
 * @date $31/03/2021$
 * @mavengroupid $be.uclouvain.aptitude$
 * @mavenartifactid $surveillance$
 */
 
  
agent TOLDAgent extends Paraddis {
	
	uses Logging, Lifecycle, InnerContextAccess, Behaviors,ExternalContextAccess, DefaultContextInteractions
	
	val config = new AtomicReference<TOLDConfig>
	val distributionMap = Collections.synchronizedMap(new HashMap<UUID, OrganisationID>) 
	  
	on Initialize {
		setSkill(new VirtualDatabaseSkill, AccessDatabaseCapacity)
		registerBehavior(new TOLDRole(this))
		config.set(occurrence.parameters.get(0) as TOLDConfig)
		loggingName = this.ID + "-TOLD" + "-" + config.get.level
		info("ready to share my stored knowledge.")
		emitToParent(new Ready)
	}
	on LocalDatabaseRequest {
		info("LocalDBRequest from - " + occurrence.contextID)
		val randomID = UUID.randomUUID
		var holonConfig = config.get.addSubTOLD(new TOLDConfig(config.get.level + 1), randomID)
		distributionMap.put(randomID, new OrganisationID(occurrence.contextID, occurrence.defaultSpaceID))
		spawnInContextWithID(TOLDAgent, randomID, innerContext, holonConfig)
	}
	on Ready {
		val contextID = distributionMap.get(occurrence.source.ID).contextID
		val defSid = distributionMap.get(occurrence.source.ID).defaultSpaceID
		wake(new JoinOrganisation(contextID, defSid))[it.ID == occurrence.source.ID]
	}
	on JoinOrganisation{
		debug("Joining organisation " + occurrence.contextID)
		join(occurrence.contextID, occurrence.defaultSpaceID)
	}
}




