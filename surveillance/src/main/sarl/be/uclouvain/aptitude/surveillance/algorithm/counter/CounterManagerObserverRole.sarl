/** 
 * 
 */
package be.uclouvain.aptitude.surveillance.algorithm.counter

import be.uclouvain.organisation.platform.ObserverRole
import io.sarl.core.Initialize
import io.sarl.core.Logging
import java.util.UUID
import be.uclouvain.organisation.platform.util.Metadata
import java.util.Collections
import java.util.HashMap
import be.uclouvain.organisation.platform.util.HyperParameters
import java.util.TreeMap
import be.uclouvain.organisation.platform.util.SurveillanceMissionData
import io.sarl.core.Behaviors
import io.sarl.core.OpenEventSpaceSpecification
import io.sarl.core.DefaultContextInteractions
import be.uclouvain.aptitude.surveillance.algorithm.AlgorithmNeeded
import io.sarl.core.InnerContextAccess
import io.sarl.core.AgentSpawned
import be.uclouvain.organisation.events.JoinPlatform
import be.uclouvain.organisation.platform.events.AddMission
import be.uclouvain.aptitude.surveillance.algorithm.RegisterUnitaryRole
import be.uclouvain.aptitude.surveillance.algorithm.RoleRegistered
import be.uclouvain.aptitude.surveillance.algorithm.ManagerObserverRole

/** 
 * @author manjah
 * 
 */
behavior CounterManagerObserverRole extends ManagerObserverRole {
	uses Logging,Behaviors, DefaultContextInteractions,InnerContextAccess

	protected val innerTracker_ParametersMap = Collections.synchronizedMap(new HashMap<UUID, HyperParameters>)
	
	protected val internal_externalMap = Collections.synchronizedMap(new HashMap<UUID, UUID>) // First is internal and then external

	on Initialize {
		AVAILABLE_INPUT.put("APTITUDE", new Metadata(0, "VEHICLE", 50))
		info("Multi Counter Manager Observer Role started")
	}
	

	
	def processingMissionWithID(mID : UUID) {
		info("Counter Observer processing mission - " + mID)
		val internalMissionID = UUID.randomUUID
		internal_externalMap.put(internalMissionID, mID)
		val newInternalMission = new SurveillanceMissionData(internalMissionID, this.ID, organizationContext.get.ID, 0,
			true)
		orderedMissionList.put(internalMissionID, newInternalMission)
		innerTracker_ParametersMap.put(internalMissionID, new HyperParameters(0, true))
		var comSpace = organizationContext.get.getOrCreateSpaceWithID(OpenEventSpaceSpecification, UUID.randomUUID) // An internal space to communicate with other roles.
		comSpace.registerStrongParticipant(asEventListener)
		providers.put(internalMissionID, comSpace)
		emitToParent(new AlgorithmNeeded(innerContext, "APTITUDE", internalMissionID))
	}

	on ReadyToCount {
		
		val mbID = occurrence.source.ID
		wake(new AddMission(mbID, providers.get(mbID).spaceID.ID)) [
			it.ID == mbID
		]
	}
	
	
	def startRole {
		warning("Counter Manager Role Started in organisation")
	}
	
}
