/** 
 * 
 */
package be.uclouvain.aptitude.surveillance.algorithm

import be.uclouvain.organisation.platform.ObserverRole
import be.uclouvain.python_access.PythonTwinAccessCapacity
import io.sarl.core.Logging
import be.uclouvain.organisation.platform.events.PauseMission
import be.uclouvain.organisation.platform.events.ResumeMission
import be.uclouvain.organisation.platform.events.StartMission
import java.util.concurrent.atomic.AtomicInteger
import be.uclouvain.organisation.platform.events.StopMission
import io.sarl.core.Destroy

/** 
 * @author manjah
 *      
 * PLAY = 1 // No frame 
 * PAUSE = 2 // No frame pause le thread
 * RESUME = 3 // No frame
 * STOP = 4  // Le sort de sa boucle pour qu'il puisse accueillir d'autres requÃªtes  
 * RESTART = 5 // Seek avec la frame 0
 * SEEK = 6   //  Seek
 * KILL = 7 // Kill the agent ?
 * 
 */
abstract behavior PythonTwinObserverRole extends ObserverRole {
	uses Logging, PythonTwinAccessCapacity
	
	val counter = new AtomicInteger(0)
	on PauseMission {
		warning("Pause Mission from " + occurrence.source.ID)
		orderedMissionList.get(occurrence.missionID).setMissionInative
		pauseMission
	}
	
	on Destroy{
		warning("Killing python twin")
		updateStreamAccess(7)
	}
	on StartMission {
		if (occurrence.frameNumber > 0) {
			info("UpdatingStreamAccess - Seeking frame " + occurrence.frameNumber)
			
			updateStreamAccess(6, occurrence.frameNumber)
			}
		
		if (counter.get > 0) {
			info("UpdatingStreamAccess - Action 3 Starting at frame " + occurrence.frameNumber)
			updateStreamAccess(3)
		}
		else {
			info("UpdatingStreamAccess - Action 1 Starting at frame " + occurrence.frameNumber)
			counter.set(1)
			updateStreamAccess(1)
		}
		
	}

	on StopMission {
		warning("Pausing Python TWIN")
		updateStreamAccess(4)
	}

	on ResumeMission {
		orderedMissionList.get(occurrence.missionID).setMissionActive
		resumeMission(occurrence.reInitialization)
	}
	
	def pauseMission {
		for (o : orderedMissionList.values) {
			if (!o.isMissionActive) {
				isRoleActive.set(false)
				updateStreamAccess(2)
			}
	}}
	
	def resumeMission(reInit : boolean) {
		if (reInit) {
			info("Resume Mission request")
			updateStreamAccess(5)
		}
		if (!isRoleActive.get) {
			info("ReStartingStream")
			updateStreamAccess(3)
		}
	}
}
