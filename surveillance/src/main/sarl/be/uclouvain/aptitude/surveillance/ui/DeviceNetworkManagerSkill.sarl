/** 
 * 
 */
package be.uclouvain.aptitude.surveillance.ui

import UDPMessages.ActorStats
import UDPMessages.UDP_Message_AckRequestAllStats
import UDPMessages.UDP_Message_AckRequestSpawn
import UDPMessages.UDP_Message_AckRequestWithdraw
import UDPMessages.UDP_Message_AuthenticateMobile
import UDPMessages.UDP_Message_Base
import UDPMessages.UDP_Message_RequestSpawn
import UDPMessages.UDP_Message_RequestStats
import UDPMessages.UDP_Message_RequestWithdraw
import be.uclouvain.organisation.interactivity.element.ElementInformation
import be.uclouvain.organisation.interactivity.inputDevice.InputSkill
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Logging
import java.util.HashMap
import java.util.UUID

/** 
 * @TODO: write a description
 * 
 * @author: manjahdani$
 * @version $0.0.1$
 * @date $31/03/2021$
 * @mavengroupid $be.uclouvain.aptitude$
 * @mavenartifactid $surveillance$
 * 
 */
skill DeviceNetworkManagerSkill extends InputSkill {
	
	uses Logging, DefaultContextInteractions

	var clientSender = new UDPSender()
	val mobileAddress =new HashMap<UUID, String> //@FIXME : Hashtable is synchronization safe. Maybe one should spend the time to know whether it is necessary or not to have concurrency. 
	val mobileIPAddress = new HashMap<String, UUID>
	val parentID : UUID
	new (p : int, holonID : UUID) {
		super(p)
		this.parentID = holonID
	}
	def messageAnalysis(data : UDP_Message_Base, IPadrss : String) {
		//info(data.method)
		switch (data.method) {
			case "authenticateMobile": {
				if (!mobileAddress.containsValue(IPadrss)) {
					val ID = UUID.randomUUID()
					mobileAddress.put(ID, IPadrss)
					mobileIPAddress.put(IPadrss, ID)
					authenticateUser(ID, data as UDP_Message_AuthenticateMobile)
					}
			}
			case "requestSpawn": {
				requestSpawn(data as UDP_Message_RequestSpawn, IPadrss)
			}
			case "requestWithdraw": {
				requestWithdraw(data as UDP_Message_RequestWithdraw, IPadrss)
			}
			default: {
				info("Unknown Messages" + data)
			}
		}
	}

	def authenticateUser (mobileID : UUID, data : UDP_Message_AuthenticateMobile) {
		
		emit(new AuthenticateUser(mobileID,data))[it.UUID==parentID]
	}
	def getMobileAddress() {
		return this.mobileAddress
	}

	def requestWithdraw(data : UDP_Message_RequestWithdraw, adrs : String) {
		var msgOut = new UDP_Message_AckRequestWithdraw(data.sequenceNumber)
		clientSender.SendData(msgOut, adrs, 65003)
		emit(new ElementInformation(data))[it.UUID == mobileIPAddress.get(adrs)]
	}

	def requestSpawn(data : UDP_Message_RequestSpawn, adrs : String) {
		clientSender.SendData(new UDP_Message_AckRequestSpawn(data.sequenceNumber), adrs, 65003)
		emit(new ElementInformation(data))[it.UUID == mobileIPAddress.get(adrs)]
	}

	def requestStats(data : UDP_Message_RequestStats, adrs : String) {

		var allStats : ActorStats[] = newArrayOfSize(1)
		allStats.set(0, new ActorStats(data.actorUID, "2"))
		clientSender.SendData(new UDP_Message_AckRequestAllStats(data.actorUID, allStats), adrs, 65003)
	}
}


