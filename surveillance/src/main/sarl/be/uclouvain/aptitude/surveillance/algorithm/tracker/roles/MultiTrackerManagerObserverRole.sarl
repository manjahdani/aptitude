/** 
 * 
 */
package be.uclouvain.aptitude.surveillance.algorithm.tracker.roles

import be.uclouvain.organisation.events.JoinPlatform
import io.sarl.core.AgentSpawned
import io.sarl.core.Logging
import io.sarl.core.InnerContextAccess
import be.uclouvain.organisation.platform.ObserverRole
import io.sarl.core.Behaviors
import io.sarl.core.Initialize
import java.util.TreeMap
import be.uclouvain.organisation.platform.util.Metadata
import be.uclouvain.organisation.platform.util.SurveillanceMissionData
import java.util.UUID
import java.util.Collections
import java.util.HashMap
import be.uclouvain.organisation.platform.util.HyperParameters
import io.sarl.core.OpenEventSpaceSpecification
import io.sarl.core.DefaultContextInteractions
import be.uclouvain.aptitude.surveillance.algorithm.AlgorithmNeeded
import be.uclouvain.aptitude.surveillance.algorithm.RegisterUnitaryRole
import be.uclouvain.aptitude.surveillance.algorithm.RoleRegistered
import be.uclouvain.aptitude.surveillance.algorithm.tracker.events.ReadyToTrack
import be.uclouvain.organisation.platform.events.AddMission

/** 
 * @author manjah
 * 
 */
behavior MultiTrackerManagerObserverRole extends ObserverRole {
	uses Logging,InnerContextAccess, Behaviors, InnerContextAccess, DefaultContextInteractions

	protected val innerTracker_ParametersMap = Collections.synchronizedMap(new HashMap<UUID, HyperParameters>)
	val AVAILABLE_INPUT = new TreeMap<String, Metadata> // @FIXME HIGH should be given by the Analyst which makes it configurable ?
	protected val internal_externalMap = Collections.synchronizedMap(new HashMap<UUID, UUID>)// First is internal and then external
	on Initialize {
		AVAILABLE_INPUT.put("SORT", new Metadata(0, "VEHICLE", 50))
		//AVAILABLE_INPUT.put("DeepSORT", new Metadata(1, "VEHICLE",200)) //@TODO Set realistic budget
		info("Multi Tracker Manager Observer Role started")
	}

	
	def startRole { 

		warning("Nothing to be done")
	}


	
	def processingMissionWithID(mID : UUID) { // @FIXME HIGH HIGH HIGH manual
		warning("Multi Tracker Manager Sensor Role processing mission" + mID)
		val internalMissionID = UUID.randomUUID
		internal_externalMap.put(internalMissionID,mID)
		val newInternalMission = new SurveillanceMissionData(internalMissionID, this.ID, organizationContext.get.ID, 0,
			false)
		orderedMissionList.put(internalMissionID, newInternalMission)
		innerTracker_ParametersMap.put(internalMissionID, new HyperParameters(0, false))
		var comSpace = organizationContext.get.getOrCreateSpaceWithID(OpenEventSpaceSpecification, UUID.randomUUID) // An internal space to communicate with other roles.
		comSpace.registerStrongParticipant(asEventListener)
		providers.put(internalMissionID, comSpace)
		emitToParent(new AlgorithmNeeded(innerContext, "SORT", internalMissionID))
	}

	
	on AgentSpawned {
		val mbID = occurrence.agentID
		if (memberAgents.contains(mbID)) {
			info("inner tracker - " + mbID)
			wake(new RegisterUnitaryRole)[it.ID == mbID]

		}
	}

	on RoleRegistered {
		wake(new JoinPlatform(organizationContext.get, ADN.get.platformName))[it.ID == occurrence.source.ID]
	}

	on ReadyToTrack {
		val mbID = occurrence.source.ID
		wake(new AddMission(mbID, providers.get(mbID).spaceID.ID)) [
			it.ID == mbID
		]
	}
	
}
