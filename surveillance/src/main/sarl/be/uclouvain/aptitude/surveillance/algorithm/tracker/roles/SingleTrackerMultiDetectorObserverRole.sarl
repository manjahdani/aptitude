/** 
 * 
 */
package be.uclouvain.aptitude.surveillance.algorithm.tracker.roles

import be.uclouvain.aptitude.surveillance.algorithm.LastFrame
import be.uclouvain.aptitude.surveillance.algorithm.tracker.events.ResumeTrackingMission
import be.uclouvain.aptitude.surveillance.algorithm.tracker.events.TrackingRequest
import be.uclouvain.organisation.platform.ObserverRole
import be.uclouvain.organisation.platform.events.ScenarioInfo
import be.uclouvain.organisation.platform.events.ScenarioInfoRequest
import be.uclouvain.organisation.platform.util.HyperParameters
import io.sarl.core.AgentSpawned
import io.sarl.core.Behaviors
import io.sarl.core.ExternalContextAccess
import io.sarl.core.Initialize
import io.sarl.core.InnerContextAccess
import io.sarl.core.Logging
import java.util.Collections
import java.util.HashMap
import java.util.LinkedList
import java.util.UUID
import be.uclouvain.python_access.BBoxes2DSignal
import be.uclouvain.organisation.events.JoinOrganisation

/** 
 * @author manjah
 * 
 */
 
behavior SingleTrackerMultiDetectorObserverRole extends ObserverRole {
	uses Logging, InnerContextAccess , Behaviors, ExternalContextAccess
	
	protected val detector_innerTrackerMap = Collections.synchronizedMap(new HashMap<String, UUID>)
	protected val innerTracker_detectorsMap = Collections.synchronizedMap(new HashMap<UUID, String>)
	protected val innerTracker_ParametersMap = Collections.synchronizedMap(new HashMap<UUID, HyperParameters>)

	val hyperParametersToBeTested  = Collections.synchronizedList(new LinkedList<HyperParameters>)
	
	protected val activeProviders = Collections.synchronizedMap(new HashMap<String, UUID>) // Detector and its ID

	on Initialize {
		info("Multi-tracker role started.")
		emit(selfSpace, new ScenarioInfoRequest)
		hyperParametersToBeTested.addAll(occurrence.parameters.get(1) as LinkedList<HyperParameters>)
	}

	on ScenarioInfo {
		assert occurrence.client_id !== null, "Received computatation_location null"
		computation_location.set(occurrence.client_id)
		updateContextInfo(occurrence.organizationContext.ID, occurrence.privateCommunicationChannelID)
		checkList.replace("context", true)
		checkList.replace("computation_location", true)
	}
	on TrackingRequest {
		
		val agentID = occurrence.agentID
		info("Reactivating Access - " + agentID + " - " + innerTracker_detectorsMap.get(agentID) + "for mID" + occurrence.missionID)
		if (innerTracker_detectorsMap.get(agentID) == "YOLO-COCO"){
			info("We are more in a horizontal view")
		}
		else if (innerTracker_detectorsMap.get(agentID) == "YOLO") {
			info("We are in a vertical view")
		}
		wake(new ResumeTrackingMission(occurrence.missionID,innerTracker_detectorsMap.get(agentID)))[it.ID==this.ID]
	}	
	
	on LastFrame {
		
		var detectorToPause = innerTracker_detectorsMap.get(occurrence.source.ID)
		info("Pausing my provider = " + detectorToPause)
		var detectorID = activeProviders.get(detectorToPause)
		
		val mData = orderedMissionList.values.findFirst[signalID==detectorID]
		info("Pausing mission" + mData.missionID + detectorID)
		//wake
		//emit(providers.get(detectorID), new PauseMission(mData.missionID))[it.ID == detectorID]
	}

	on BBoxes2DSignal {
		
		if(occurrence.bboxes2D.frameNumber <5){
		warning("Sending results of frame #" + occurrence.bboxes2D.frameNumber + 
			" from " + occurrence.providerName + " to " + detector_innerTrackerMap.get(occurrence.providerName))
		
		}
		// We send to the sub-process meant to analyse the data of the provider. 
		// For example, agent 1 process the data sent from detector A. 
		//wake(new BBoxes2DResult(occurrence.bboxes2D))[it.ID == detector_innerTrackerMap.get(occurrence.providerName)] 
	}
	
	on AgentSpawned {
		// In this, we choose that the missionID is equivalent to the subprocess ID
		val mbID = occurrence.agentID
		if(memberAgents.contains(mbID)){
		wake(new JoinOrganisation(organizationContext.get.ID, organizationContext.get.defaultSpace.spaceID.ID))[it.ID ==mbID]
		}
	}
	
	override processingMissionWithID(mID : UUID) {
		throw new UnsupportedOperationException("TODO: auto-generated method stub")
	}
	
	
}
