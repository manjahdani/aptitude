package be.uclouvain.aptitude.surveillance.algorithm.counter

import be.uclouvain.aptitude.surveillance.algorithm.util.Metric
import be.uclouvain.aptitude.surveillance.evaluation.AlgorithmSelectorRole
import be.uclouvain.aptitude.surveillance.evaluation.Evaluation
import be.uclouvain.aptitude.surveillance.evaluation.EvaluationImpl
import be.uclouvain.organisation.platform.ObserverRole
import be.uclouvain.python_access.PythonTwinAccessCapacity
import io.sarl.core.Behaviors
import io.sarl.core.Logging

/** 
 * @TODO : To complete
 * 
 * @author  $ manjahdani$
 * @version $0.0.1$
 * @date $17/06/2021$
 * @mavengroupid $be.uclouvain.aptitude$
 * @mavenartifactid $surveillance$
 * 
 */
behavior CompetitiveCounterRole extends ObserverRole {
	
	uses Logging, Behaviors

	val AVAILABLE_TRACKERS = newArrayList("SORT") // "DeepSORT") // "SORT", //@FIXME MEDIUM Software parameters ?
	val CONFIG_PATH = "F:/aptitude/surveillance/src/main/resources/config/evalconfig.json"
	
	override startProcessingRole {
		setSkill(new EvaluationImpl, Evaluation, PythonTwinAccessCapacity)
		if (MD.dynamicAdaptationEnabled) {
			info("Let the competition start !")
			registerBehavior(new AlgorithmSelectorRole(this.owner),
								CONFIG_PATH, observerADN.name, 
								computation_location,
								new Metric("APTITUDE", "F:/pythonToolbox/pytb-agent/videos/".concat(MD.location).concat("/gt/gt.txt"),
								processingParameters))
			for (tracker : AVAILABLE_TRACKERS) {
				info("requests tracker: " + tracker)
				requestAlgorithm(tracker, "TRACKER")
			}
		}
		else{
			registerBehavior(new CounterRole(owner))
			for (tracker : AVAILABLE_TRACKERS) {
				info("requests tracker: " + tracker)
				requestAlgorithm(tracker, "TRACKER")
			}
		}

	}

}
