
package be.uclouvain.aptitude.surveillance.algorithm.counter

import be.uclouvain.aptitude.surveillance.algorithm.util.Metric
import be.uclouvain.aptitude.surveillance.evaluation.AlgorithmSelectorRole
import be.uclouvain.organisation.SignalID
import be.uclouvain.organisation.platform.AddMission
import be.uclouvain.organisation.platform.HyperParametersRequest
import be.uclouvain.organisation.platform.ObserverRole
import be.uclouvain.organisation.platform.ProcessingHyperParameters
import io.sarl.core.Behaviors
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.OpenEventSpaceSpecification
import java.util.ArrayList
import java.util.UUID

/** 
 * @TODO : To complete
 * 
 * @author  $ manjahdani$
 * @version $0.0.1$
 * @date $17/06/2021$
 * @mavengroupid $be.uclouvain.aptitude$
 * @mavenartifactid $surveillance$
 * 
 */
behavior CompetitiveCounterRole extends ObserverRole {
	
	uses Logging, Behaviors

	val AVAILABLE_TRACKERS = newArrayList("SORT")//"DeepSORT") // "SORT", //@FIXME its logiciel parameters or not ? 
	
	
	on Initialize {
		isMaster = true;
	}

	on HyperParametersRequest {

		var providerID = occurrence.source.UUID
		info("received sensitivity request from -" + providerID.toString.substring(0, 5) +
				" .... \n sending the following sensitivity" + sensitivity)

		providers.get(providerID).emit(this.ID, new ProcessingHyperParameters(sensitivity, isMaster)) [
			it.UUID == providerID
		]
	}
	
	@SuppressWarnings("potential_field_synchronization_problem")
	on ProcessingHyperParameters {
		info("I received sensitivity - " + occurrence.s)
		sensitivity = occurrence.s
		var parameters = new ArrayList<String>
		parameters.add(sensitivity.toString)
		registerBehavior(new AlgorithmSelectorRole(this.owner), new Metric("APTITUDE", "F:/data/".concat(platformName).concat("/gt/gt.txt"), parameters))
		if (isMaster) {
			info("Let the competition start !")
		for (tracker : AVAILABLE_TRACKERS) {
			info("requests tracker: " + tracker)
			requestAlgorithm(tracker,"TRACKER")
			}
		}
	}

	on SignalID {
		val dataSource = occurrence.signalID // provider
		
		// Creation of a communication space between the data source and the role @FIXME is it allowed to use the platform Context?
		val comChannel = platformContext.getOrCreateSpaceWithID(OpenEventSpaceSpecification, UUID.randomUUID) 
		comChannel.register(asEventListener)
		providers.put(dataSource,comChannel)
		info("received provider ID \n sending the missionSpace" + providers.get(dataSource).spaceID.ID.toString.substring(0,5))
		platformContext.defaultSpace.emit(this.ID, new AddMission(providers.get(dataSource))) [
			it.UUID == dataSource
		] 	// @FIXME : I am sending null ?
	}

	

	

}
