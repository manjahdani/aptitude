/** 
 * 
 */
package be.uclouvain.aptitude.surveillance.evaluation

import be.uclouvain.python_access.CommunicationManager
import be.uclouvain.python_access.messages.BaseMessage
import be.uclouvain.python_access.messages.EvaluationMessage
import be.uclouvain.python_access.messages.RequestMessage
import io.sarl.core.Behaviors
import io.sarl.core.Schedules
import be.uclouvain.python_access.PythonTwinAccess
import be.uclouvain.python_access.EvaluationResult
import be.uclouvain.python_access.PartnerEvaluationFound
import io.sarl.core.Logging
import java.util.UUID

/** 
 * @TODO: write a description
 * 
 * @author $Author: manjahdani$
 * @version $0.0.1$
 * @date $31/03/2021$
 * @mavengroupid $be.uclouvain.aptitude$
 * @mavenartifactid $surveillance$
 * 
 */
skill EvaluationImpl extends PythonTwinAccess implements Evaluation {

	uses Behaviors, Schedules, Logging

	def update(m : BaseMessage) {
		if (m instanceof EvaluationMessage) {
			if (m.ack) {
				wake(new EvaluationResult(m))
			}
		} else if (m instanceof RequestMessage) {
			onRequestMessage(m)
		}
	}

	private def onRequestMessage(message : RequestMessage) {
		if (message.ack && message.requestID == this.pendingRequestID) {
			requestTask.cancel
			CommunicationManager.instance.unsubscribeTopic(topicRequestSub.toString)
			topicRequestSub = null
			val topicName = "evaluation_" + owner.ID.toString + "_" + message.clientName
			topicSignalAcquisition = CommunicationManager.instance.subscribeTopic(topicName, this)
			info("EvalPartnerFound")
			wake(new PartnerEvaluationFound(message.clientName))
		}
	}

	def sendEvaluationRequest(requestID : String, predictions : String, gts : String) {

		sendEvaluationRequest(requestID, predictions, gts, -1)

	}

	def sendEvaluationRequest(requestID : String, predictions : String, gts : String, maxFrame : int) {
		var evalMessage = new EvaluationMessage()
		evalMessage.requestID = UUID.fromString(requestID)
		evalMessage.predictions = predictions
		evalMessage.gts = gts
		if (maxFrame != -1) {
			evalMessage.maxFrame = maxFrame
		}
		CommunicationManager.instance.publishMessage(topicSignalAcquisition.toString, evalMessage)
	}
	
	def start {
		
	}
	
}
