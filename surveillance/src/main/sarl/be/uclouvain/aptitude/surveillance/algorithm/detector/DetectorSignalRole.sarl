/** 
 * 
 */
package be.uclouvain.aptitude.surveillance.algorithm.detector

import be.uclouvain.organisation.platform.SensorRole
import be.uclouvain.python_access.BBoxes2DResult
import io.sarl.core.Destroy
import io.sarl.core.ExternalContextAccess
import io.sarl.core.Logging
import java.util.UUID
import io.sarl.core.DefaultContextInteractions
import be.uclouvain.aptitude.surveillance.algorithm.detector.events.ReadyToDetect
import be.uclouvain.organisation.platform.ProcessMission

behavior DetectorSignalRole extends SensorRole {
	
	uses Logging, ExternalContextAccess,DefaultContextInteractions
	
	
	on Destroy {
		info("The behavior was stopped.")
	}

	
	def startRole {
		emitToParent(new ReadyToDetect)
	}

	def processingMissionWithID(mID : UUID) {
		setSkill(new DetectorPythonTwin(ADN.get.belief, ADN.get.platformName, computation_location.get))
		emit(selfSpace, new ProcessMission(missionList.get(mID)))
	}
	
}