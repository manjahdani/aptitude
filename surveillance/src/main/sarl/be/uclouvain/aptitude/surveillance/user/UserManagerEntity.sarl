package be.uclouvain.aptitude.surveillance.user

import be.uclouvain.aptitude.surveillance.platform.AgentPlatform
import be.uclouvain.aptitude.surveillance.ui.AuthenticateUser
import be.uclouvain.organisation.OrganizationInfo
import be.uclouvain.organisation.OrganizationalRole
import be.uclouvain.organisation.interactivity.InteractivityOrganizationInfo
import be.uclouvain.organisation.platform.PlatformOrganizationInfo
import be.uclouvain.organisation.told.events.AuthorizedMission
import be.uclouvain.organisation.told.events.NewMission
import io.sarl.core.Behaviors
import io.sarl.core.ExternalContextAccess
import io.sarl.core.InnerContextAccess
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import io.sarl.core.OpenEventSpace
import io.sarl.lang.core.AgentContext
import java.util.HashMap
import java.util.LinkedList
import java.util.UUID
import java.util.Collections

/** 
 * @TODO to comment
 * 
 * @author $Author: manjahdani$
 * @version $0.0.2$
 * @date $11/02/2022$
 * @mavengroupid $be.uclouvain.aptitude$
 * @mavenartifactid $surveillance$
 * 
 */
behavior UserManagerEntity extends OrganizationalRole{
	uses Lifecycle, InnerContextAccess, Behaviors,Logging, ExternalContextAccess

	protected var platformSpace : OpenEventSpace
	protected var platformContext : AgentContext
	
	val usersList : LinkedList<UUID> = new LinkedList<UUID>
	var PlatformListenersSpaceIDs = Collections.synchronizedMap(new HashMap<String, OpenEventSpace>)
	
	//var subHolons= new HashMap<UUID, OpenEventSpace>
	

	on PlatformOrganizationInfo {
		info("User manager met platform Organisation")
		synchronized(this){
		platformContext = occurrence.context
		platformSpace = retrieveOrCreateOpenSpaceWithID(platformContext,occurrence.privateCommunicationChannelID)
		platformSpace.registerStrongParticipant(asEventListener)}
	}
	
	on AgentPlatform {
		info(" Reception of the open-chanel of platform agent -" + occurrence.name)
		PlatformListenersSpaceIDs.put(occurrence.name, occurrence.topic)
	}
	
	on AuthenticateUser {
		info("Authentification of user " + occurrence.userID)
		usersList.add(occurrence.userID)
		spawnInContextWithID(
			User,
			occurrence.userID,
			innerContext,
			new HolonicUserConfig(1, 
									 	occurrence.data.playerUID,
									 	accessRight(occurrence.data.playerUID))) //FIXME LOW the user level is not automatic
	}
	
	on NewMission {
		info("receives external order for a new mission in " + occurrence.location +" from " + occurrence.source.ID.toString.substring(0,5))
		assert privateSpacesListeners.keySet.contains(occurrence.source.ID),"User not met"
		info("User Known, sending the Authorization to sid " + privateSpacesListeners.get(occurrence.source.ID).spaceID.ID)
	 
		emit(privateSpacesListeners.get(occurrence.source.ID),
			new AuthorizedMission(occurrence.mission, 
				PlatformListenersSpaceIDs.get(occurrence.location), occurrence.location
			))
	}
	 
	def accessRight (s:String){
		return PlatformListenersSpaceIDs.keySet 		// @TODO Develop a user rights access !
	}
	
	def getOrganizationInfo(memberID : UUID) : OrganizationInfo {
		return new InteractivityOrganizationInfo(innerContext, privateSpacesListeners.get(memberID).spaceID.ID)
	}
	
}
