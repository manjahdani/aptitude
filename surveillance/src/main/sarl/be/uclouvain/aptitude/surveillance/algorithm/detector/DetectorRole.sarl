/** 
 * 
 */
package be.uclouvain.aptitude.surveillance.algorithm.detector

import be.uclouvain.organisation.platform.ObserverRole
import be.uclouvain.python_access.BBoxes2DResult
import io.sarl.core.Behaviors
import io.sarl.core.Destroy
import io.sarl.core.Logging
import io.sarl.core.ExternalContextAccess
import java.util.UUID

/** 
 * @TODO: write a description
 * 
 * @author $Author: manjahdani$
 * @version $0.0.1$
 * @date $31/03/2021$
 * @mavengroupid $be.uclouvain.aptitude$
 * @mavenartifactid $surveillance$
 * 
 */
behavior DetectorRole extends ObserverRole {
	
	uses Logging, Behaviors, ExternalContextAccess
	
	on BBoxes2DResult {
		//info("Detector - frameNumber- lastframe " + occurrence.bboxes2D.frameNumber + occurrence.bboxes2D.lastFrame)
		for (listenersSpace : listeners.values) {
			emit(listenersSpace, new BBoxes2DResult(occurrence.bboxes2D, observerADN.get.name))[it.ID !== this.ID]
		}
	}


	// on RestartDetector{
		//info("Restarting")
		//var spaceToSend = listeners.get(listeners.get(0))
		//listeners.clear
		
		//listeners.put(occurrence.source.ID, spaceToSend)
	 //@FIXME HIGH not robust ! 
	//}
	on Destroy {
		info("The behavior was stopped.")
	}

	
	def startRole {
		
	}
	
	def processingMissionWithID(mID : UUID) {
		setSkill(new DetectorPythonTwin)
		registerBehavior(new SingleDetectorRole(this.owner), observerADN.get.belief, observerADN.get.name, computation_location)
	}
	
}

event PauseMission

event RestartDetector{
	var bel : String
	new (a : String){
		this.bel = a}
} 