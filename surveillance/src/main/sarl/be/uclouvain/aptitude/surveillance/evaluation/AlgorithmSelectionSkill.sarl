/** 
 * 
 */
package be.uclouvain.aptitude.surveillance.evaluation

import be.uclouvain.aptitude.surveillance.MetaMorphNet.util.APTITUDE_EvaluationResults
import be.uclouvain.aptitude.surveillance.MetaMorphNet.util.EvaluationResults
import be.uclouvain.python_access.messages.EvaluationMessage
import java.util.HashMap
import java.util.TreeSet
import java.util.UUID
import io.sarl.api.core.Logging
import io.sarl.api.core.Behaviors

/** 
 * @author manjah
 * 
 */
skill AlgorithmSelectionSkill implements AlgorithmSelection {
	uses Logging, Behaviors

	val compResults = new HashMap<UUID, APTITUDE_EvaluationResults>

	
	def addEvalutionResults(testID : UUID, s : APTITUDE_EvaluationResults) {
		compResults.put(testID,s)
	}	
	
	def processEvaluationMessage(testID : UUID, e : EvaluationMessage) : boolean {
		if(compResults.get(testID).HOTA==0){
			compResults.get(testID).setValues(e)
			compResults.get(testID).updateMetrics
			
			info("\n HOTA - { " + compResults.get(testID).HOTA +" }"+
				'\n Detection time - { ' + compResults.get(testID).detectionTime +" }" 
				 + '\n Tracking time - { ' + compResults.get(testID).trackingTime +" }")
			wake(new RegisterEvaluationMessage(compResults.get(testID)))[it.ID == this.ID]
			return true
		}
		return false
	}
	
	synchronized def selectAlgorithm : EvaluationResults {
		
		val rankedResults : TreeSet<APTITUDE_EvaluationResults> =new TreeSet(compResults.values)
	/**
		for(r : rankedResults){
			info("\n *************") 
			info("\n Competitor, " + r.competitorID) 
			info("\n Detection time, " + r.detectionTime)
			info("\n Tracking time, " + r.trackingTime)
	    	info("\n HOTA, "+ r.HOTA)
	    	info( "\n Efficiency, " + r.efficiency)
	    	info("\n APTITUDE_Score, " + r.APTITUDE_score)
		}*/
		return rankedResults.get(0)
	}
	
}
