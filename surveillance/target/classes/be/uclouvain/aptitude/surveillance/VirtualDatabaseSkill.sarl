/** 
 * 
 */
package be.uclouvain.aptitude.surveillance

import be.uclouvain.organisation.told.AccessDatabaseCapacity
import io.sarl.core.Logging
import java.util.UUID
import be.uclouvain.organisation.told.util.AlgorithmInfo
import java.util.HashMap
import java.io.FileWriter
import be.uclouvain.aptitude.surveillance.algorithm.util.BBoxe2D

/** 
 * @author manjah
 * 
 */
skill VirtualDatabaseSkill implements AccessDatabaseCapacity {
	uses Logging

	protected val database : HashMap<UUID, Object> = new HashMap<UUID, Object> // UUID has been chosen to ensure privacy @TODO : Develop
	
	val A = ","+"-1"+","+"-1"+","+"-1"+","+"-1"+"\n"

	def install {
		database.put(UUID.randomUUID,
			new AlgorithmInfo("YOLO", "F:/aptitude/surveillance/src/main/resources/config/test-YOLO.json", "DETECTOR",1))
		database.put(UUID.randomUUID,
			new AlgorithmInfo("TinyYOLO", "F:/aptitude/surveillance/src/main/resources/config/test-TinyYOLO.json",
			"DETECTOR",1))

		database.put(UUID.randomUUID,
			new AlgorithmInfo("YOLO-COCO", 
							   "F:/aptitude/surveillance/src/main/resources/config/test-YOLO-COCO.json",
							   "DETECTOR",
							   1))
			
		database.put(UUID.randomUUID,
			new AlgorithmInfo("SORT", "F:/aptitude/surveillance/src/main/resources/config/test-SORT.json", "TRACKER",
			1))

		database.put(UUID.randomUUID,new AlgorithmInfo("DeepSORT", "F:/aptitude/surveillance/src/main/resources/config/test-DeepSORT.json","TRACKER",1))
		database.put(UUID.randomUUID, new AlgorithmInfo("APTITUDE", "NoneForTheMoment", "COUNTER", 1))
		
		database.put(UUID.randomUUID,
			new AlgorithmInfo("BACKGROUND", "F:/aptitude/surveillance/src/main/resources/config/BACKGROUND.json", "DETECTOR",
			1))
		
		database.put(UUID.randomUUID,"a")
	}
	override update(key : UUID, data : Object) {
		debug("updating for " + key)

		assert database.keySet.contains(key), "The key is not present"
		
		if (data instanceof BBoxe2D[]) {
			updateGroundtruth(database.get(key) as FileWriter, data)
		} else {
			debug("I do not recognize the class" + data.class)
		}
	}
	
	synchronized def updateGroundtruth(writer : FileWriter, boxe2ds : BBoxe2D[]) {
		
		
		for (p:boxe2ds){
			aux(writer,(p.frame+1).toString, p.globalID.toString, p.x.intValue.toString, p.y.intValue.toString, p.w.intValue.toString, p.h.intValue.toString)
			
		}// @FIXME LOW For historical reason we did this non sens. Something wrong 
		
	}
	
	synchronized def aux(writer:FileWriter, frame:String, globalID:String, x:String, y:String, w:String, h:String){
		
		writer.write(frame+","+globalID+","+x+","+y+","+w+","+h+A)
	}
	
	


	override delete(key : UUID) {
		// TODO Auto-generated code.
		debug("Deleting..." + key)
		assert database.keySet.contains(key),"Cannot remove a key not present in database"
		
		if (database.get(key) instanceof FileWriter) {
			(database.get(key) as FileWriter).close
			debug("closed the file of " + key)
		} else {
			info("Object of " + key + " not FileWriter")
		}
		database.remove(key)
	}

	def getDatabase : HashMap<UUID, Object> {
		return this.database
	}

	override read(key : UUID) : Object {
		debug("reading for " + key.toString.substring(0, 5))
		if (!database.keySet.contains(key)) {
			debug("The key is not in the data-base, temporarily added a null object")
			database.put(key, null)
			return null
		} else if (database.get(key) === null) {
			info("key present but value is null")
			return null
		}
		debug("Access OK returning - " + database.get(key))
		return database.get(key)
	}

	override create(key : UUID, data : Object) {
		
		debug("creating for " + key.toString.substring(0, 5) + " an object " + data)
		database.put(key, data)
	}
}
