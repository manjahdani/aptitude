package be.uclouvain.aptitude.surveillance

import be.uclouvain.organisation.events.AuthorizationToPerformMission
import be.uclouvain.organisation.platform.ObserverRole
import be.uclouvain.organisation.platform.events.Request2PerformMission
import be.uclouvain.organisation.platform.util.SurveillanceMissionData
import io.sarl.core.Behaviors
import io.sarl.core.ExternalContextAccess
import io.sarl.core.Initialize
import io.sarl.core.Logging
import java.util.UUID
import java.util.concurrent.ConcurrentLinkedQueue

/** 
 * 
 * The Analyst gathers information about a mission and collects Events of Interest or more generally
 * intelligence (e.g. statistics) for the Client. The role could recommend actions as well. The concept
 * is not necessarily holonic.
 * 
 * As an example, an Analyst received 175 events of incidents involving bikes and cars from one
 * Algorithm. After analysing the incidents, it could draw recommendations to the Client to take
 * actions such as a preventive campaign or new installations.
 * 
 * We advise Analysts specializing to one scenario; consequently, you need two Analysts to perform the counting of vehicles and detect traffic offenses. 
 * However, those Analysts could use the same Observer if they rely on those perceptions. 
 * Therefore, we advise an Analyst rely on one and only one Observer (itself composed of other Observers). 
 * 
 * @author $Author: manjahdani$
 * @version $0.0.3 $
 * @date $14/01/2022$
 * @mavengroupid $be.uclouvain.aptitude$
 * @mavenartifactid $organisation$
 */
behavior AnalystRole extends ObserverRole{
	
	uses Logging, Behaviors, ExternalContextAccess
	
	val availableObservers = newArrayList("careful", "dynamic", "dynamic ","balanced")
	
	val missionQueue = new ConcurrentLinkedQueue<SurveillanceMissionData>
	
	on Initialize {
		missionQueue.add(occurrence.parameters.get(1) as SurveillanceMissionData)
	}
	
	def startRole() {
		info("asks for algorithm performing vehicle counting to platform")
		val mission = missionQueue.poll
		missionList.put(mission.missionID, mission)
		emit(privateOrganizationSpace.get, new Request2PerformMission(mission))
	}
	
	
	on AuthorizationToPerformMission {
		info("Received authorisation to perform a mission within the space : " + occurrence.missionSpaceInPlatformID)
		providers.put(this.ID,retrieveOrCreateOpenSpaceWithID(occurrence.missionSpaceInPlatformID)); 
		providers.get(this.ID).registerStrongParticipant(asEventListener) 
		processingMissionWithID(occurrence.missionID)
	}
	
	def processingMissionWithID(mID : UUID) {
		info("starts mission of vehicle counting with sensitivity:  " +
			availableObservers.get(missionList.get(mID).cautionLevel))
		processingParameters.put(mID,missionList.get(mID).hyperParameters)
		requestAlgorithm(mID, "APTITUDE", "COUNTER")
	}
	
}
