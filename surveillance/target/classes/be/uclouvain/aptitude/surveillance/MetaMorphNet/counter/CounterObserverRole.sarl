package be.uclouvain.aptitude.surveillance.MetaMorphNet.counter

import be.uclouvain.aptitude.surveillance.MetaMorphNet.tracker.events.TrackingPerception
import be.uclouvain.aptitude.surveillance.MetaMorphNet.tracker.events.TrackingRequest
import be.uclouvain.aptitude.surveillance.MetaMorphNet.util.BBoxe2D
import be.uclouvain.aptitude.surveillance.evaluation.CompetitionOver
import be.uclouvain.aptitude.surveillance.ui.DisplayCapacity

import java.util.ArrayList
import java.util.HashMap
import java.util.UUID
import be.uclouvain.aptitude.surveillance.MetaMorphNet.MissionResults

import java.util.concurrent.atomic.AtomicInteger
import be.uclouvain.aptitude.surveillance.evaluation.EvaluationImpl
import be.uclouvain.aptitude.surveillance.evaluation.AlgorithmSelectorRole
import be.uclouvain.aptitude.surveillance.evaluation.Evaluation
import be.uclouvain.aptitude.surveillance.MetaMorphNet.util.Metric
import io.sarl.api.core.Logging
import io.sarl.api.core.ExternalContextAccess
import io.sarl.api.core.Behaviors
import be.uclouvain.organisation.platform.ObserverRole
import io.sarl.api.core.Initialize
import be.uclouvain.python_access.PythonTwinAccessCapacity
import be.uclouvain.organisation.platform.ObserverCapacity
import be.uclouvain.organisation.platform.events.StopMission
import be.uclouvain.organisation.platform.util.SurveillanceMissionData
import be.uclouvain.organisation.platform.events.Request2PerformMission
import be.uclouvain.organisation.events.AuthorizationToPerformMission

/** 
 * The CounterRole is a behaviour that an agent Algorithm endorses upon a mission to count vehicles
 * 
 * 
 * @author $Author: manjahdani$
 * @version $0.0.2$
 * @date $16/04/2021$
 * @mavengroupid $be.uclouvain.aptitude$
 * @mavenartifactid $surveillance$
 * 
 */

behavior CounterObserverRole extends ObserverRole { 
	
	uses Logging, CounterObserverCapacity, DisplayCapacity, ExternalContextAccess, Behaviors
	
	val objectPresentInframe = new HashMap<Integer, BBoxe2D>
	val objectToBeAnalyzed = new ArrayList<BBoxe2D>;
	var lineCoords = #[1235, 700, 309, 664, 1477, 324, 1676, 310] //@FIXME MEDIUM MANUAL
	// end
	val numberOfSimulations = new AtomicInteger(0)
	val MAXIMUM_EVALUATIONS = 5
	val CONFIG_PATH = "F:/aptitude/surveillance/src/main/resources/config/evalconfig.json" // @FIXME HIGH Manual

	on Initialize {
		info("Counting starts from now !")
		setSkill(new CountingSkill, CounterObserverCapacity)
		// setSkill(new DisplaySkill)
		warning("Let the evaluation start")


	}

	override processingMissionWithID(mID : UUID) {
		orderedMissionList.put(mID, missionList.get(mID))
		warning("Counter observer processing mid {" +mID +"}")
		setSkill(new EvaluationImpl(CONFIG_PATH, ADN.get.name, computation_location.get), Evaluation,
			PythonTwinAccessCapacity)
		registerBehavior(new AlgorithmSelectorRole(this.owner), 
							 CONFIG_PATH, 
							 ADN.get.name, 
							 computation_location,
							 new Metric("APTITUDE",
					    				"F:/pythonToolbox/pytb-agent/videos/".concat(ADN.get.platformName).concat("/gt/gt.txt")),
					        			 MAXIMUM_EVALUATIONS) 	// @FIXME HIGH Manual
	}

	on TrackingPerception {
		if (occurrence.frameNumber % 100 == 0 || occurrence.frameNumber<5) {
			info("Already processed " + occurrence.frameNumber + " frame. Current counting is")
			DisplayPerception(1)
		}
		objectToBeAnalyzed.clear
		for (p : occurrence.perceptions) {
			if (objectPresentInframe.containsKey(p.globalID)) {
			objectPresentInframe.get(p.globalID).update(p)
		}
		else{
			objectPresentInframe.put(p.globalID, p)
		}
		objectToBeAnalyzed.add(objectPresentInframe.get(p.globalID))
		}
		
		Signal2Perception(new ArrayList(objectToBeAnalyzed))
		}
		
	/**on LastFrame {
		info("That was it for Couting!")
		//val totalTime = (((System.currentTimeMillis() - this.start) / 1000))
		//info("It took " + totalTime.toString + " seconds")
		//info("Average FPS : " + (occurrence.frameNumber / totalTime).toString)
		info("I will transfer my perception to the Analyst")
		DisplayPerception(1)
	}*/
	
//	on BBoxes2DTrackResultToCounter {
//		//info("I received BBOX2TrackResults")
//		var a = DisplayPerception(0)
//		
//		var counts = new ArrayList<Integer>
//		for (l : a.keySet){
//			for (id : a.get(l).counts.keySet){
//				counts.add(a.get(l).counts.get(id).get)
//			}
//		}
//		//info(counts)
//		
//		
//		//sendDisplayMessage(occurrence.bboxes2DTrack, this.ID.toString, "F:/data/S02C006/vdo.avi", null, lineCoords,
//			//counts, occurrence.observerName, this.ID.toString, occurrence.sensitivity)
//	}
	
	 
	on MissionResults {
		
		
		emit(providers.get(occurrence.source.ID), new StopMission(occurrence.missionID))[!me]
		
		if(numberOfSimulations.incrementAndGet<=MAXIMUM_EVALUATIONS){
			warning("Received mission results # " 
				+ numberOfSimulations.get + 
				" from {" + occurrence.source.ID + 
				"}\n mid {" + occurrence.missionID +"}")
			
			val newMissionID = UUID.randomUUID
			val newMissionData = new SurveillanceMissionData(newMissionID, 
																this.ID,
																organizationContext.get.ID,
																occurrence.processingParameters)
			orderedMissionList.put(newMissionID, newMissionData)
			emit(privateOrganizationSpace.get, new Request2PerformMission(newMissionData))}
	}

	on AuthorizationToPerformMission {
		info("Authorisation to perform a mission within the space : " + occurrence.missionSpaceInPlatformID)
		info("Simulation counting with param{:  " + orderedMissionList.get(occurrence.missionID).hyperParametersAsAString + "}")
		requestAlgorithm(occurrence.missionID, "TRACKER")
	}

	on CompetitionOver {
		val sID = occurrence.providerID
		var mData = orderedMissionList.values.findFirst[providerID == sID]
		providers.get(sID).emit(new TrackingRequest(mData.missionID,occurrence.selectedAlgorithmID))
	}
	uses ObserverCapacity
	}
