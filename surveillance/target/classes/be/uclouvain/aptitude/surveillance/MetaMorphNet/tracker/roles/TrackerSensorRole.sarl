/** 
 * 
 */
package be.uclouvain.aptitude.surveillance.MetaMorphNet.tracker.roles

import be.uclouvain.aptitude.surveillance.MetaMorphNet.MissionResults
import be.uclouvain.organisation.AgentPerformance
import be.uclouvain.organisation.platform.SensorRole
import io.sarl.api.core.ExternalContextAccess

/** 
 * @FIXME LOW IMPROVEMENT : the Hazelcast only need to send the frame number and the ids.  Will it make sens ? 
 * that contains the information requested upon approved request from another. 
 * 
 * @TODO MEDIUM
 * It does make sens to have a certain window of information in memory and the 
 * other one stored in a database. Therefore, the database with a certain window in situ and otherwise stored in TOLD
 * We need to find a way such that the information is synchronized before potential fusion 
 * 
 * 
 * 
 * @author $Author: manjahdani$
 * @version $0.0.2$
 * @date $16/04/2021$
 * @mavengroupid $be.uclouvain.aptitude$
 * @mavenartifactid $surveillance$
 * 
 */

behavior TrackerSensorRole extends SensorRole {
	uses ExternalContextAccess, AgentPerformance

	on MissionResults {
		var start : long = System.nanoTime(); // Measure performance
		
		//info("Transmitting to my listeners" + listeners.keySet)
		for (l : listeners.keySet) {
			
			val mission = missionList.values.findFirst[clientID == l]
			//info("Results transfered to - {" + l + "}" + " for the mID = {" + mission.missionID)
			emit(listeners.get(l), //@FIXME VERY VERY VERY HIGH there is only one space where everyone is connected to listen to results
								   // @FIXME Our approach suppose a continuous stream... 
				new MissionResults(
					mission.missionID,
					occurrence.platformName,
					occurrence.frameNumber,
					occurrence.pred_file_Path, 
					occurrence.detector,
					occurrence.tracker,
					occurrence.total_time_detection,
					occurrence.total_time_tracking, 
					occurrence.observerID, 
					occurrence.processingParameters,
					occurrence.agent_detector_time,
					occurrence.agent_tracker_time
					))[it.ID == l]
		}
		accumulateTime(System.nanoTime - start) 		// Measure performance
	}
}
