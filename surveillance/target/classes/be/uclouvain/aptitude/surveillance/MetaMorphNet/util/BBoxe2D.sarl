/** 
 * 
 */
package be.uclouvain.aptitude.surveillance.MetaMorphNet.util



import org.arakhne.afc.math.geometry.d2.d.Point2d
import java.util.ArrayList
import org.arakhne.afc.math.geometry.d2.d.Vector2d

/** 
 * @TODO: write a description
 * 
 * @author $Author: manjahdani$
 * @version $0.0.1$
 * @date $31/03/2021$
 * @mavengroupid $be.uclouvain.aptitude$
 * @mavenartifactid $surveillance$
 * 
 */
class BBoxe2D extends BBox{
	
	var conf : double 
	var frame : int
	val globalID : int
	var classeID : int
	val lines_crossed = new ArrayList<String>
	val curPos = new Point2d(0,0)
	val direction = new Vector2d(0,0)
	
	new (bb:BBox, conf:double, globalID:int, classeID:int, frame:int)
	{
		super(bb.x,bb.y, bb.w,bb.h)
		this.conf=conf;
		this.frame=frame;
		this.globalID = globalID
		this.classeID=classeID
	}
	def getConf {
		return this.conf
	}
	def getFrame {
		return this.frame
	}
	def getGlobalID{
		return this.globalID
	}
	def getClasseID{
		return this.classeID
	}
	def getLines_crossed{
		return lines_crossed;
	}
	def hasCrossedLine (label : String){
		if(lines_crossed.contains(label)){
			return true
		}
		else{
			lines_crossed.add(label)
			return false
		}
	}
	

	def update(bb: BBoxe2D) {
		
		update(bb.x, bb.y, bb.w, bb.h, bb.classeID, bb.frame, bb.conf)
	}
	
	def update(X : double, Y : double, W : double, H : double, classID : int, frameNumber:int,conf:double){
		
		var newPos = new Point2d(X,Y)
		if (newPos.getDistance(curPos) > 15) {
			
			update(X,Y,W,H)
			var v_dir = new Vector2d(newPos.x - curPos.x, newPos.y-curPos.y);
			
			//if (globalID == 130 || globalID == 136 || globalID==151){
				
				//print("ID :" + globalID  + " frame :" + frame + " new pos " + newPos + "curPos" +curPos + "v_dir : " + v_dir)
			//}
			curPos.set(newPos)
			v_dir.normalize
			direction.set(v_dir)
		}
		this.classeID = classID
		this.frame=frameNumber
		this.conf=conf
	}
	def getDirection{
		return this.direction
	}
	

}
class BBox {
	
	var x : double
	var y : double
	var w : double
	var h : double
	
	new (x : double, y : double, w : double, h : double)
	{
		this.x=x;
		this.y=y;
		this.w=w;
		this.h=h;
	}
	
	def getX{
		return this.x
	}

	def getY {
		return this.y
	}

	def getW {
		return this.w
	}

	def getH {
		return this.h
	}
	
	def getBBox {
		return this
	}
	
	def update(X : double, Y : double, W : double, H : double)
	{
		x = X;
		y = Y;
		w = W;
		h = H;
	}
	
	def getCentroid(){
	
		return ( new Point2d(( x + x + w)/2, ( y + y + h)/2))
	}
	
	def getArea(){
		return w*h
	}
}