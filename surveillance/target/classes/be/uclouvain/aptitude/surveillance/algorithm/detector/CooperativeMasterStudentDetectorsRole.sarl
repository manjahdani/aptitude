/** 
 * 
 */
package be.uclouvain.aptitude.surveillance.algorithm.detector

import be.uclouvain.aptitude.surveillance.algorithm.ManagerObserverRole
import be.uclouvain.aptitude.surveillance.algorithm.detector.events.Activity
import be.uclouvain.aptitude.surveillance.algorithm.detector.events.AddMissionAsMaster
import be.uclouvain.aptitude.surveillance.algorithm.detector.events.AddMissionAsStudent
import be.uclouvain.aptitude.surveillance.algorithm.detector.events.NoActivity
import be.uclouvain.organisation.platform.events.PauseMission
import be.uclouvain.organisation.platform.events.StartMission
import be.uclouvain.organisation.platform.util.Metadata
import be.uclouvain.python_access.PartnerDetectionFound
import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.lang.core.Event
import java.util.UUID
import java.util.concurrent.atomic.AtomicBoolean
import be.uclouvain.organisation.platform.events.Ready2Process

/** 
 * @author manjah
 * 
 */
behavior CooperativeMasterStudentDetectorsObserverRole extends ManagerObserverRole {
	uses Logging, Behaviors, DefaultContextInteractions
	
	var studentID : UUID
	var masterID : UUID
	val listeningTOTeacher = new AtomicBoolean(false)

	
	on Initialize {
		info("Multi-Detecter role started.")
		SENSORS.put("BACKGROUND", new Metadata(0, "VEHICLE", 200))
		SENSORS.put("YOLO", new Metadata(1, "VEHICLE", 500))
		emitToParent(new Ready2Process)
	}
	on PartnerDetectionFound { //@FIXME HIGH not robust
		
		if (occurrence.source.ID.equals(studentID)) {
			warning("EnableStreamAccess at frame " + 0)
			wake(new StartMission(occurrence.source.ID,0))[it.ID == occurrence.source.ID]
		} 

	}
	on Activity {
		if (!listeningTOTeacher.get) {
			warning("starting master")
		wake(new StartMission(occurrence.source.ID, occurrence.frameNumber))[it.ID == masterID]
		listeningTOTeacher.set(true)
		}
	}
	on NoActivity {
		if(listeningTOTeacher.get){
			warning("pausing master")
		wake(new PauseMission(masterID))[it.ID == masterID]
		listeningTOTeacher.set(false)
		}
	}
	override provideRoleMessage(mbID : UUID) : Event {
		val position = innerProcess_ParametersMap.values.toList.indexOf(mbID)
		//info("member Joined " + mbID + "performance is" + position)
		
			if (position == 0) {
			warning("Starting Student Role of " + mbID)
			studentID = mbID
			return new AddMissionAsStudent
		} else {
			warning("Starting Master Role of " + mbID)
				masterID = mbID
			return new AddMissionAsMaster
		}
	}
}
