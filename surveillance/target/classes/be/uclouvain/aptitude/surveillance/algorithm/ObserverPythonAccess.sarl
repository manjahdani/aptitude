/** 
 * 
 */
package be.uclouvain.aptitude.surveillance.algorithm

import be.uclouvain.organisation.platform.ObserverCapacity
import be.uclouvain.python_access.CommunicationManager
import be.uclouvain.python_access.PythonTwinAccess
import be.uclouvain.python_access.messages.BaseMessage

import java.io.FileReader
import java.util.HashMap
import org.json.simple.JSONObject
import org.json.simple.parser.JSONParser
import io.sarl.core.Logging

/** 
 * @author manjah
 * 
 */
abstract skill ObserverPythonAccess extends PythonTwinAccess implements ObserverCapacity {
	
	uses Logging
	
	protected var parser = new JSONParser();
	protected var jsonConfig : JSONObject;
	protected var partnerName : String;
	val config :String
	val platformName : String
	val computation_resources_location :String
	
	new (config : String, platformName : String, computation_resources_location : String) {
		assert config !== null, "config is null";
		assert platformName !== null, "platform is null";
		assert computation_resources_location !== null, "computation resources location null"
		this.config=config
		this.platformName = platformName
		this.computation_resources_location = computation_resources_location
		
	}
	def install {
		connectToPython(config, platformName, computation_resources_location)
	}

	def connectToPython(config : String, platformName : String, computation_resources_location : String) {

		
		var configPath = config
		var jsonConfigtmp = parser.parse(new FileReader(configPath)) as JSONObject;

		// Adding the computation ressources location
		var ressourceslocation = new HashMap<String, String>
		ressourceslocation.put("client_id", computation_resources_location)
		jsonConfigtmp.put("Setup", ressourceslocation)

		// Adding the video path
		var video = new HashMap<String, String>
		video.put("path", "./pytb-agent/videos/".concat(platformName).concat("/vdo.avi"))
		// Adding the roi path
		var pathRoi = new HashMap<String, String>
		pathRoi.put("path", "./pytb-agent/videos/".concat(platformName).concat("/roi.jpg"))
		var a = jsonConfigtmp.get("Preproc") as HashMap<String, HashMap<String, String>>
		a.put("roi", pathRoi)
		// Final concatenation
		jsonConfigtmp.put("Video", video)

		jsonConfig = jsonConfigtmp
		info("Activating access" + jsonConfig)
		activateAccess(jsonConfig)
	}
	
	
	def Signal2Perception(detectionMessage : Object) {
		CommunicationManager.instance.publishMessage(topicSignalAcquisition.toString, detectionMessage as BaseMessage)
	}
}
