/** 
 * 
 */
package be.uclouvain.aptitude.surveillance.algorithm.detector

import be.uclouvain.python_access.BBoxes2DSignal
import io.sarl.core.ExternalContextAccess
import io.sarl.core.Logging
import be.uclouvain.organisation.platform.events.MissionOver

/** 
 * @author manjah
 * 
 */
behavior ManagerDetectorSensorRole extends DetectorSensorRole {
	uses Logging, ExternalContextAccess

	on MissionOver {
		for (listenersSpace : listeners.values) {
			info("LastFrame")
			
			emit(listenersSpace, new MissionOver(occurrence.missionID,occurrence.terminusStatus))[it.ID !== this.ID]
		}
	}

	on BBoxes2DSignal {
		val signal = Signal2Transmit(occurrence.bboxes2D)
		debug("Received detection" + occurrence.bboxes2D.frameNumber + "listeners" + listeners.keySet)
		for (listenersSpace : listeners.values) {
			emit(listenersSpace, signal)[!me]
		}
	}
}
