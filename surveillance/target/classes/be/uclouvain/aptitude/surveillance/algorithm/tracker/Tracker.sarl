/** 
 * 
 */
package be.uclouvain.aptitude.surveillance.algorithm.tracker

import be.uclouvain.aptitude.surveillance.algorithm.Algorithm
import be.uclouvain.aptitude.surveillance.algorithm.BecomeManager
import be.uclouvain.aptitude.surveillance.algorithm.RegisterUnitaryRole
import io.sarl.core.Behaviors
import io.sarl.core.Logging
import be.uclouvain.aptitude.surveillance.algorithm.RoleRegistered
import io.sarl.core.DefaultContextInteractions
import be.uclouvain.aptitude.surveillance.algorithm.tracker.roles.ManagerTrackerObserverRole
import be.uclouvain.aptitude.surveillance.algorithm.tracker.roles.TrackerSensorRole
import be.uclouvain.aptitude.surveillance.algorithm.tracker.roles.SingleTrackerSensorRole

/** 
 * @author manjah
 * 
 */
agent Tracker extends Algorithm {
	uses Behaviors, Logging, DefaultContextInteractions

	on RegisterUnitaryRole {
		warning("Becoming atomic tracker")
		registerBehavior(new SingleTrackerSensorRole(this), ADN.get)
		emitToParent(new RoleRegistered)
	}
	on BecomeManager {
		info("Becoming a tracker manager")
		registerBehavior(new ManagerTrackerObserverRole(this), ADN.get)
		registerBehavior(new TrackerSensorRole(this), ADN.get)
		emitToParent(new RoleRegistered)
	}
}
