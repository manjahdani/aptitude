/** 
 * 
 */
package be.uclouvain.aptitude.surveillance.algorithm.tracker

import be.uclouvain.aptitude.surveillance.algorithm.Algorithm
import be.uclouvain.aptitude.surveillance.algorithm.BecomeManager
import be.uclouvain.aptitude.surveillance.algorithm.RegisterUnitaryRole
import be.uclouvain.aptitude.surveillance.algorithm.RoleRegistered
import be.uclouvain.aptitude.surveillance.algorithm.tracker.roles.ManagerTrackerObserverRole
import be.uclouvain.aptitude.surveillance.algorithm.tracker.roles.SingleTrackerSensorRole
import be.uclouvain.aptitude.surveillance.algorithm.tracker.roles.TrackerSensorRole
import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Logging
import be.uclouvain.organisation.AgentPerformance

/** 
 * @author manjah
 * 
 */
agent Tracker extends Algorithm {
	uses Behaviors, Logging, DefaultContextInteractions, AgentPerformance

	on RegisterUnitaryRole {
		var start : long = System.nanoTime(); // Measure performance
		debug("Becoming a tracker")
		registerBehavior(new SingleTrackerSensorRole(this), ADN.get)
		emitToParent(new RoleRegistered)
		accumulateTime(System.nanoTime - start) // Measure performance
	}
	on BecomeManager {
		var start : long = System.nanoTime(); // Measure performance
		debug("Becoming a tracker manager")
		registerBehavior(new ManagerTrackerObserverRole(this), ADN.get)
		registerBehavior(new TrackerSensorRole(this), ADN.get)
		emitToParent(new RoleRegistered)
		accumulateTime(System.nanoTime - start) 	// Measure performance
	}
}
