/** 
 * 
 */
package be.uclouvain.aptitude.surveillance.algorithm.detector

import be.uclouvain.organisation.platform.LeavePlatform
import be.uclouvain.python_access.PartnerDetectionFound
import be.uclouvain.python_access.PythonAccessorRole
import be.uclouvain.python_access.PythonTwinAccessCapacity
import io.sarl.core.Logging
import io.sarl.core.Schedules

/** 
 * @author manjah
 * 
 */
behavior SingleDetectorRole extends PythonAccessorRole {
	uses Logging, PythonTwinAccessCapacity, Schedules


	@SuppressWarnings("potential_field_synchronization_problem")
	on PartnerDetectionFound {

		this.partnerName = occurrence.partnerName
		info("Detection partner found: " + this.partnerName)
		
		task("wait").in(2000) [
			info("UpdatingStreamAccess")
			updateStreamAccess(1)
			task("wait").cancel // PLAY
		]
	}

	on LeavePlatform {
		// join(BaseContext.ID, BaseSpace.spaceID.ID)
		// info("Detector Leaving")
		updateStreamAccess(4)
		// leave(PlatformID)
	}

	on RestartDetector {
		info("Updating Stream Access")
		updateStreamAccess(5)
		updateStreamAccess(1)
	}
}
