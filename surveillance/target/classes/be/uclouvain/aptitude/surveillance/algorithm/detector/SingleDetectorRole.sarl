/** 
 * 
 */
package be.uclouvain.aptitude.surveillance.algorithm.detector

import be.uclouvain.organisation.platform.events.LeavePlatform
import be.uclouvain.organisation.platform.events.ResumeMission
import be.uclouvain.python_access.PartnerDetectionFound
import be.uclouvain.python_access.PythonAccessorRole
import be.uclouvain.python_access.PythonTwinAccessCapacity
import io.sarl.core.Logging
import io.sarl.core.Schedules

/** 
 * @author manjah
 * 
 */
behavior SingleDetectorRole extends PythonAccessorRole {
	uses Logging, PythonTwinAccessCapacity, Schedules

	
	on PartnerDetectionFound {
		this.partnerName = occurrence.partnerName
		info("Detection partner found: " + this.partnerName)
		task("wait").in(2000) [
			debug("UpdatingStreamAccess - Action 1 Starting")
			updateStreamAccess(1)
			task("wait").cancel // PLAY
		]
	}

	
	
	
	on PauseMission{
		debug("Pausing detector")
		updateStreamAccess(2)
	}
	
	on ResumeMission{
		info("Resume Mission request")
		//updateStreamAccess(3)
		updateStreamAccess(5)
		//updateStreamAccess(1)
	}
	on LeavePlatform {
		// join(BaseContext.ID, BaseSpace.spaceID.ID)
		// info("Detector Leaving")
		updateStreamAccess(4)
		// leave(PlatformID)
	}

	/* 
	 * PLAY = 1
	 * PAUSE = 2
	 * RESUME = 3
	 * STOP = 4
	 * RESTART = 5
	 * SEEK = 6
	 * KILL = 7
	 */
	on RestartDetector {
		info("Updating Stream Access")
		updateStreamAccess(5)
		updateStreamAccess(1)
	}
}
