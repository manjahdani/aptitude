/** 
 * 
 */
package be.uclouvain.aptitude.surveillance.algorithm.detector

import be.uclouvain.aptitude.surveillance.algorithm.detector.events.Activity
import be.uclouvain.aptitude.surveillance.algorithm.detector.events.NoActivity
import be.uclouvain.organisation.platform.events.PauseMission
import be.uclouvain.organisation.platform.events.StartMission
import be.uclouvain.python_access.BBoxes2DResult
import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Logging
import java.util.concurrent.atomic.AtomicInteger
import be.uclouvain.organisation.AgentPerformance

/** 
 * @author manjah
 * 
 */
behavior CooperativeSensorRole extends DetectorSensorRole {

	uses Logging, DefaultContextInteractions,Behaviors, AgentPerformance

	val noActivityFrames = new AtomicInteger(0)

	on BBoxes2DResult {
		var start : long = System.nanoTime(); // Measure performance
		//info("Received detection frame - " + occurrence.bboxes2D.frameNumber)
		if (occurrence.bboxes2D.bboxes.isEmpty) {
			if (noActivityFrames.incrementAndGet > 9) {
				wake(new PauseMission(this.ID))[me]
				emit(new NoActivity(occurrence.bboxes2D.frameNumber))
				noActivityFrames.set(0)
			}
		}
		else{
			noActivityFrames.set(0)
		}
		accumulateTime(System.nanoTime - start) 		// Measure performance
	}

	on Activity {
		var start : long = System.nanoTime(); // Measure performance
		info("Classification on - " + occurrence.frameNumber)
		wake(new StartMission(occurrence.source.ID, occurrence.frameNumber))[me]
		accumulateTime(System.nanoTime - start) 		// Measure performance
	}
}
