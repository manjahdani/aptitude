/** 
 * 
 */
package be.uclouvain.aptitude.surveillance.user

import be.uclouvain.aptitude.surveillance.platform.AgentPlatform
import be.uclouvain.aptitude.surveillance.ui.AuthenticateUser
import be.uclouvain.organisation.HolonicParentInfo
import be.uclouvain.organisation.PlatformOrganisationInfo
import be.uclouvain.organisation.platform.NewMission
import be.uclouvain.organisation.told.entity.EntityRole
import io.sarl.core.Behaviors
import io.sarl.core.Initialize
import io.sarl.core.InnerContextAccess
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import io.sarl.core.MemberJoined
import io.sarl.core.OpenEventSpace
import io.sarl.core.OpenEventSpaceSpecification
import io.sarl.lang.core.AgentContext
import java.util.HashMap
import java.util.LinkedList
import java.util.UUID
import be.uclouvain.organisation.platform.AuthorizedMission

/** 
 * @author manjah
 * 
 */
behavior UserManagerEntity extends EntityRole {
	uses Lifecycle, InnerContextAccess, Behaviors,Logging

	protected var platformSpace : OpenEventSpace
	protected var platformContext : AgentContext
	
	val usersList : LinkedList<UUID> = new LinkedList<UUID>
	var PlatformListenersSpaceIDs= new HashMap<String, OpenEventSpace>
	
	var subHolons= new HashMap<UUID, OpenEventSpace>
	
	on Initialize {
		
	}
	@SuppressWarnings("potential_field_synchronization_problem")
	on PlatformOrganisationInfo {
		info("User manager met platform Organisation")
		platformContext = occurrence.context
		platformSpace = occurrence.privateCommunicationChannel
		platformSpace.register(asEventListener)
	}
	
	on AgentPlatform {
		info(" Reception of the open-chanel of platform agent -" + occurrence.name)
		PlatformListenersSpaceIDs.put(occurrence.name, occurrence.topic)
	}
	@SuppressWarnings("discouraged_occurrence_readonly_use")
	on AuthenticateUser {
		info("Authentification of user " + occurrence.userID)
		usersList.add(occurrence.userID)
		spawnInContextWithID(
			User,
			occurrence.userID,
			innerContext,
			new HolonicUserConfig(1, occurrence.data.playerUID,
			accessRight(occurrence.data.playerUID))) //FIXME the user level is not automatic
	}
	
	on NewMission {
		info("receives external order for a new mission in -" + occurrence.mission.location +" from" + occurrence.source.UUID.toString.substring(0,5))
		subHolons.get(occurrence.source.UUID).emit(this.ID,
			new AuthorizedMission(occurrence.mission, PlatformListenersSpaceIDs.get(occurrence.mission.location)))
	}
	on MemberJoined {		
		var privateChanel = innerContext.getOrCreateSpaceWithID(OpenEventSpaceSpecification, UUID.randomUUID)
		privateChanel.register(asEventListener)
		subHolons.put(occurrence.agentID, privateChanel)
		wake(new HolonicParentInfo(privateChanel))[it.UUID==occurrence.agentID]
	}
	//@TODO To develop a user rights access ! 
	def accessRight (s:String){
		return PlatformListenersSpaceIDs.keySet
	}	
}
