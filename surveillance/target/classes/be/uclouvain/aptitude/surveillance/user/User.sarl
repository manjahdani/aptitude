package be.uclouvain.aptitude.surveillance.user

import be.uclouvain.aptitude.surveillance.Paraddis
import be.uclouvain.aptitude.surveillance.ui.UserInterface
import be.uclouvain.organisation.interactivity.element.ElementCapacity
import java.util.concurrent.atomic.AtomicReference
import io.sarl.api.core.Logging
import io.sarl.api.core.Behaviors
import io.sarl.api.core.Lifecycle
import io.sarl.api.core.InnerContextAccess
import io.sarl.api.core.Initialize

/** 
 * The Holon User represents an agent that want to use/used the system. 
 * A User could a be a group of user. 
 * It is established to interact with the system, each User owns User Interface in order to provide input to the system and receives output. 
 * The agent User keep tracks of the records of the user(s) and is responsible, of updating the universe and manage the in/out of virtual and real users. 
 * It is also responsible of establishing the connection between the virtual/real user and the system. It endorses the roles of Element and their associated capacities. 
 * 
 * @author $Author: manjahdani$
 * @version $0.0.1$
 * @date $31/03/2021$
 * @mavengroupid $be.uclouvain.aptitude$
 * @mavenartifactid $surveillance$
 * 
 * */

agent User extends Paraddis {
	uses Logging, Behaviors, Lifecycle, InnerContextAccess
	
	val userConfig = new AtomicReference<HolonicUserConfig>

	on Initialize {
		userConfig.set(occurrence.parameters.get(0) as HolonicUserConfig)
		
		loggingName = this.ID + "-User-" + userConfig.get.level.toString 
		switch(userConfig.get.level){
			case 0: {
				registerBehavior(new UserManagerEntity(this),userConfig.get.initialPlatforms)
				spawnInContext(UserInterface,innerContext)
			}
			default : {
			 	setSkill(new UserSkill(userConfig.get.name,
											userConfig.get.initialPlatforms), 
						UserElementCapacity,
								   ElementCapacity)
				registerBehavior(new UserRole(this))
			}
		}
		
	}
}
