/** 

 */
package be.uclouvain.aptitude.surveillance.user

import UDPMessages.ActorStats
import UDPMessages.CharacterData
import UDPMessages.ObjectData
import UDPMessages.ScreenData
import UDPMessages.SpawnAuthorizations
import UDPMessages.SpawnCharacterAuthorization
import UDPMessages.SpawnObjectAuthorization
import UDPMessages.UDP_Message_AckAuthenticateMobile
import UDPMessages.UDP_Message_Base
import UDPMessages.UDP_Message_RequestSpawn
import UDPMessages.UDP_Message_RequestWithdraw
import UDPMessages.UDP_Message_UpdateInventory
import be.uclouvain.aptitude.surveillance.Expert
import be.uclouvain.organisation.interactivity.outputDevice.OutputMsg
import be.uclouvain.organisation.platform.events.StopMission
import be.uclouvain.organisation.platform.util.MissionData
import be.uclouvain.organisation.platform.util.MissionParameters
import be.uclouvain.organisation.told.events.NewMission
import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.InnerContextAccess
import io.sarl.core.Lifecycle
import java.util.HashMap
import java.util.LinkedList
import java.util.UUID
import java.util.concurrent.atomic.AtomicInteger

/** 
 * 
 * @TODO : The objects will represents the mission ? 
 * 
 * 
 * 
 * @author $Author: manjahdani$
 * @version $0.0.1$
 * @date $31/03/2021$
 * @mavengroupid $be.uclouvain.aptitude$
 * @mavenartifactid $surveillance$
 * 
 */
 
skill UserSkill implements UserElementCapacity {

	uses DefaultContextInteractions, Lifecycle,InnerContextAccess, Behaviors


	val playerID : String
	val entityList : HashMap<UUID, CharacterData> = new HashMap<UUID, CharacterData>
	val AVAILABLE_EXPERTS = new AtomicInteger(4) //@FIXME MEDIUM HARDCODED VALUE
	val EXPERTISE_DEGREE = newArrayList(1, 2, 3, 0) //@FIXME MEDIUM HARDCODE VALUE
	var availablePlatforms = new LinkedList<String>
	
	new (userID : String, avl_platforms : LinkedList<String>) {
		
		this.availablePlatforms.addAll(avl_platforms)
		this.playerID = userID
	}

	def install {
		
		for (var i = 0; i < AVAILABLE_EXPERTS; i++) {
			val id = UUID.randomUUID
			entityList.put(id, new CharacterData(id.toString, EXPERTISE_DEGREE.get(i), 0, -1))
			spawnInContextWithID(Expert, id, innerContext) 	// @FIXME LOW the Expert is an Entity that must live in the TOLD Context
		}
		setupPhysicalDevice(getExpertTypeList)
	}

	def InformationAnalysis(msg : UDP_Message_Base) {
		if (msg instanceof UDP_Message_RequestSpawn) {
			startMission(msg)

		} else if (msg instanceof UDP_Message_RequestWithdraw) {
			stopMission(msg)
		}
	}
	
	def synchronized outputSend(msgOut : UDP_Message_Base) {
		emit(new OutputMsg(msgOut))
	}

	def updateBehavior(cd : CharacterData[]) {
		outputSend(new UDP_Message_UpdateInventory(playerID, cd, getObjectList))
	}

	@Pure def getObjectList  {
		var objectsList : ObjectData[] = newArrayOfSize(1);
		objectsList.set(0, new ObjectData(this.ID.toString, 1, 0))
		return objectsList
	}
	
	def startMission(msg : UDP_Message_RequestSpawn) {
		val entityID = UUID.fromString(msg.actorUID)

		emitToParent(
			new NewMission(
				new MissionData(
					UUID.randomUUID,
					entityID,
					availablePlatforms.get(msg.sceneID),
					new MissionParameters(entityList.get(entityID).evolution, true)
				)
			)
		)
		entityList.get(entityID).screenID = msg.sceneID
		updateBehavior(getExpertTypeList)
	}
	
	def stopMission(msg : UDP_Message_RequestWithdraw) {

		var MissionID = UUID.fromString(msg.actorUID)
		entityList.get(MissionID).screenID = -1
		wake(new StopMission(MissionID))[it.ID == MissionID]
		updateBehavior(getExpertTypeList)
	}

	def getExpertTypeList {
		var characterList : CharacterData[] = newArrayOfSize(20)
		var i = 0;
		for (id : entityList.keySet) {
			var cD = entityList.get(id)
			characterList.set(i, cD)
			i++
		}
		return characterList
	}

	def getEntityList : HashMap<UUID, CharacterData> {
		return this.entityList
	}
	
	def setupPhysicalDevice(cd : CharacterData[]) {

		var objectsAuthorizations : SpawnObjectAuthorization[] = newArrayOfSize(4)
		objectsAuthorizations.set(0, new SpawnObjectAuthorization(1, true))
		objectsAuthorizations.set(1, new SpawnObjectAuthorization(2, true))
		objectsAuthorizations.set(2, new SpawnObjectAuthorization(3, false))
		objectsAuthorizations.set(3, new SpawnObjectAuthorization(4, false))

		var charactersAuthorizations : SpawnCharacterAuthorization[] = newArrayOfSize(2)
		charactersAuthorizations.set(0, new SpawnCharacterAuthorization(0, true))
		charactersAuthorizations.set(1, new SpawnCharacterAuthorization(1, true))

		var spawnAuthorization = new SpawnAuthorizations(false, true, charactersAuthorizations, objectsAuthorizations)
		spawnAuthorization.areCharactersSpawnable = true;

		var screen1 = new ScreenData(0, 1, spawnAuthorization)
		var screen2 = new ScreenData(1, 0, spawnAuthorization)
		var screens : ScreenData[] = newArrayOfSize(2)
		screens.set(0, screen1)
		screens.set(1, screen2)

		var allStats : ActorStats[] = newArrayOfSize(1)
		allStats.set(0, new ActorStats(this.ID.toString, "20"))

		outputSend(new UDP_Message_AckAuthenticateMobile(playerID, cd, getObjectList, allStats, screens))

	}
	
}
