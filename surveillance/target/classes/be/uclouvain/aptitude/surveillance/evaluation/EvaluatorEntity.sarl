/** 
 * 
 */
package be.uclouvain.aptitude.surveillance.evaluation

import be.uclouvain.aptitude.surveillance.algorithm.util.APTITUDE_EvaluationResults
import be.uclouvain.organisation.events.AddMember
import be.uclouvain.organisation.platform.PlatformOrganizationInfo
import be.uclouvain.organisation.told.entity.EntityRole
import be.uclouvain.organisation.told.events.AddEntry
import be.uclouvain.organisation.told.events.DataEntry
import be.uclouvain.organisation.told.events.DeleteEntry
import be.uclouvain.organisation.told.events.QueryAnswer
import com.opencsv.CSVWriter
import java.io.File
import java.io.FileWriter
import java.util.ArrayList
import java.util.UUID
import io.sarl.api.core.ExternalContextAccess
import io.sarl.api.core.Logging
import io.sarl.api.core.Initialize

/** 
 * @author manjah
 * 
 */
behavior EvaluatorEntityRole extends EntityRole {
	uses Logging, ExternalContextAccess

	var predfile : File
	val entityID = UUID.randomUUID
	on Initialize {
		
		predfile = new File(occurrence.parameters.get(0).toString)
		updateContextInfo(occurrence.parameters.get(1) as UUID, occurrence.parameters.get(2) as UUID)
		Ready2Work
	}

	on PlatformOrganizationInfo {
		emit(getContext(occurrence.contextID).defaultSpace, new AddMember(entityID))
	}

	on RegisterEvaluationMessage {
		//info("Entity received eval_message")
		var values = new ArrayList<String>()
		for (a : occurrence.eval_message.class.fields) {
			values.add(a.get(occurrence.eval_message).toString)
		 }
		//emit(privateOrganizationSpace.get, new DataEntry(entityID, occurrence.eval_message))
		emit(privateOrganizationSpace.get, new DataEntry(entityID, values as String[]))
	}
	on CompetitionOver {
		info("Entity received competition over, deleting entry " + entityID)
		emit(privateOrganizationSpace.get, new DeleteEntry(entityID))
	}
	on QueryAnswer {
		// info("Received this object" + occurrence.answerObject as FileWriter)
		// info("Closing the file")
		// (occurrence.answerObject as FileWriter).close
	}

	override Ready2Work {
		warning("Creating new file to register evaluation Results")
		emit(privateOrganizationSpace.get, new AddEntry(entityID, new CSVWriter(new FileWriter(predfile))))

		var header = new ArrayList<String>()
		for (a : APTITUDE_EvaluationResults.fields) {
			header.add(a.name)
		}
		emit(privateOrganizationSpace.get, new DataEntry(entityID, header as String[]))
	}
	
}

event CreateEvaluatorEntity


