/** 
 * 
 */
package be.uclouvain.aptitude.surveillance.evaluation

import be.uclouvain.organisation.events.AddMember
import be.uclouvain.organisation.platform.PlatformOrganizationInfo
import be.uclouvain.organisation.told.entity.EntityRole
import be.uclouvain.organisation.told.events.AddEntry
import be.uclouvain.organisation.told.events.DataEntry
import be.uclouvain.organisation.told.events.DeleteEntry
import be.uclouvain.organisation.told.events.QueryAnswer
import io.sarl.core.ExternalContextAccess
import io.sarl.core.Initialize
import io.sarl.core.Logging
import java.io.File
import java.io.FileWriter
import java.util.UUID
import io.sarl.core.Behaviors

/** 
 * @author manjah
 * 
 */
behavior EvaluatorEntityRole extends EntityRole {
	uses Logging, ExternalContextAccess,Behaviors

	var predfile : File
	val entityID = UUID.randomUUID
	on Initialize {
		warning("Creating of EvaluatorEntityRole")
		predfile = new File(occurrence.parameters.get(0).toString)
		updateContextInfo(occurrence.parameters.get(1) as UUID, occurrence.parameters.get(2) as UUID)
		Ready2Work
	}

	on PlatformOrganizationInfo {
		emit(getContext(occurrence.contextID).defaultSpace, new AddMember(entityID))
	}

	on RegisterEvaluationMessage {
		info("Entity received eval_message")
		emit(privateOrganizationSpace.get, new DataEntry(entityID, occurrence.eval_message))
	}
	on CompetitionOver {
		info("Entity received competition over, turning the data ")
		emit(privateOrganizationSpace.get, new DeleteEntry(entityID))
	}
	on QueryAnswer {
		// info("Received this object" + occurrence.answerObject as FileWriter)
		// info("Closing the file")
		// (occurrence.answerObject as FileWriter).close
	}

	override Ready2Work {
		warning("Creating new file to register evaluation Results")
		emit(privateOrganizationSpace.get, new AddEntry(entityID, new FileWriter(predfile)))
	}
	
}

event CreateEvaluatorEntity


