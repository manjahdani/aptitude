/** 
 * 
 */
package be.uclouvain.aptitude.surveillance

import be.uclouvain.aptitude.surveillance.platform.AgentPlatform
import be.uclouvain.organisation.events.JoinPlatform
import be.uclouvain.organisation.told.TOLDRole
import be.uclouvain.organisation.told.util.AlgorithmInfo
import io.sarl.core.Behaviors
import io.sarl.core.Initialize
import io.sarl.core.InnerContextAccess
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import io.sarl.core.OpenEventSpace
import io.sarl.lang.core.Agent
import java.util.HashMap
import java.util.UUID
import be.uclouvain.organisation.told.AccessDatabaseCapacity
import java.util.concurrent.atomic.AtomicReference
import be.uclouvain.aptitude.surveillance.algorithm.Algorithm

/** 
 * 
 * The agent TOLD keeps record of current and past knowledge. 
 * The size of the database is a parameter and therefore we could have local TOLD 
 * that communicates to a higher TOLD itself communicating to a bigger database. 
 * The TOLD agent creates within its context spaces, as many agents as there are different tasks. 
 * Therefore a space for Detectors, Trackers, Vehicle Counter and broadly speaking each class of algorithms.    
 * 
 * @author $Author: manjahdani$
 * @version $0.0.2$
 * @date $31/03/2021$
 * @mavengroupid $be.uclouvain.aptitude$
 * @mavenartifactid $surveillance$
 */
 
  
agent TOLDAgent extends Paraddis {
	
	uses Logging, Lifecycle, InnerContextAccess, Behaviors
	
	val config = new AtomicReference<TOLDConfig>
	val agentPlatformSpaces = new HashMap<String, OpenEventSpace> 
	on Initialize {
		
		info("ready to share my stored knowledge.")
		var S  = setSkill(new VirtualDatabaseSkill, AccessDatabaseCapacity)
		registerBehavior(new TOLDRole(this))
		
		config.set(occurrence.parameters.get(0) as TOLDConfig)
		loggingName = this.ID + "-TOLD" + "-" + config.get.level
		info("ready to share my stored knowledge.")
		var registeredAlgorithms : HashMap<UUID, AlgorithmInfo> = new HashMap(S.database.filter [ p1, p2 |
			p2 instanceof AlgorithmInfo
		])
		for (t : config.get.init_tasks.keySet) {
			
			spawnInContext(Algorithm, innerContext, config.get.init_tasks, new AlgorithmInfo(t, "none", t),
				new HashMap(registeredAlgorithms.filter[p1, p2|p2.task == t])) 
		}
	}
	

	
	on AgentPlatform {
		info("encounters " + occurrence.name + " agent platform")
		agentPlatformSpaces.put(occurrence.name, occurrence.topic)
		occurrence.topic.registerStrongParticipant(asEventListener)
		wake(new AgentPlatform(occurrence.name, occurrence.id, occurrence.topic))[it.ID !== this.ID]
	}
	
	on JoinPlatform {
		info("joins organisation - " + occurrence.contextID.toString.substring(0,5))
		val randomID = UUID.randomUUID
		var holonConfig = config.get.addSubTOLD(new TOLDConfig(config.get.level + 1, occurrence.location, innerContext, new HashMap<String, Class<? extends Agent>>), randomID)
		spawnInContextWithID(TOLDAgent, randomID, occurrence.contextID, holonConfig)
	}
	
}



