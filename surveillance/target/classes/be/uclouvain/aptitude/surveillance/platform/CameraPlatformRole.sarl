package be.uclouvain.aptitude.surveillance.platform

import be.uclouvain.aptitude.surveillance.algorithm.events.AgentAlgorithm
import be.uclouvain.organisation.events.Identification
import be.uclouvain.organisation.events.SignalID
import be.uclouvain.organisation.platform.PlatformRole
import be.uclouvain.organisation.platform.events.AddAlgorithm
import be.uclouvain.organisation.platform.events.AlgorithmJoinPlatform
import be.uclouvain.organisation.platform.events.ComputationalRessources
import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.ExternalContextAccess
import io.sarl.core.InnerContextAccess
import io.sarl.core.Logging
import io.sarl.core.OpenEventSpace
import io.sarl.core.Schedules
import java.util.Collections
import java.util.HashMap
import java.util.LinkedList
import java.util.UUID
import java.util.concurrent.atomic.AtomicReference
import io.sarl.core.Initialize
import be.uclouvain.aptitude.surveillance.platform.util.CameraPlatformConfig
import be.uclouvain.aptitude.surveillance.platform.util.Camera
import be.uclouvain.organisation.platform.events.SensorInfoRequest
import be.uclouvain.aptitude.surveillance.platform.events.SensorInfo

/** 
 * 
 * @TODO Comment
 * @author $Author: manjahdani$
 * @version $0.0.3$
 * @date $11/06/2021$
 * @mavengroupid $be.uclouvain.aptitude$
 * @mavenartifactid $organisation$
 * 
 */
behavior CameraPlatformRole extends PlatformRole {
	uses InnerContextAccess, ExternalContextAccess, Logging, Schedules, Behaviors, DefaultContextInteractions
	
	protected val participants = Collections.synchronizedMap(new HashMap<String, UUID>) // @FIXME LOW clarify MAP - Lists and so on. clarify also if the variables must be concurrent or not
	val request = Collections.synchronizedList(new LinkedList<String>)
	protected val agentAlgorithm = new HashMap<String, OpenEventSpace>
	
	protected val allocated_ressource = new AtomicReference<String>
	var cameraSettings = new AtomicReference<Camera>
	on Initialize {
		cameraSettings.set(( occurrence.parameters.get(0) as CameraPlatformConfig).camera)
	}
	

	on SensorInfoRequest{
		info("receveid a request for sensor")
		emit(privateSpacesListeners.get(occurrence.source.ID), new SensorInfo(cameraSettings.get))
	}
	on ComputationalRessources {
		//info("Received computational resources: " + occurrence.client_id + "from ")
		allocated_ressource.set(occurrence.client_id)
	}
	
	on Identification {
		
		debug("new participant: " + occurrence.fullName ) //@FIXME MEDIUM the role receives the information twice. Probably algorithm send it. 
		participants.put(occurrence.fullName, occurrence.source.ID)
		wake(new ComputationalRessources(allocated_ressource.get))[it.ID == occurrence.source.ID]
	}
 
	
	on AddAlgorithm {
		
		
		val toRecruit = occurrence.algorithmTask
		debug("adding algorithm " + toRecruit +" current participants" + participants.keySet)
		
		if (!participants.containsKey(toRecruit)) {
			debug("-" + toRecruit + "-" + "Algorithm not available" + participants.keySet)
			if (!request.contains(toRecruit)) {
				request.add(toRecruit)
				emit(new AlgorithmJoinPlatform(this.ID, innerDefaultSpace.spaceID.ID, toRecruit))[it!=me]
			}
			waitfor(occurrence.missionID, toRecruit, occurrence.source.ID)
		} 
		else{
		
		//info("Algorithm is already available " + toRecruit)
				
		emit(privateSpacesListeners.get(occurrence.source.ID),
			new SignalID(occurrence.missionID, participants.get(toRecruit),toRecruit))
		}
	}
	on AgentAlgorithm {
		debug("encountered : " + occurrence.name + " - " + occurrence.source.ID.toString.substring(0,5))
		agentAlgorithm.put(occurrence.name,occurrence.topic)
	}
	synchronized def waitfor(mID : UUID,fullName : String, dest : UUID) {
		debug("Waiting " + fullName +" as an original request from -  " + dest.toString.substring(0,5))
		task("waitingfor".concat(fullName).concat(dest.toString)).every(500) [
			if (participants.keySet.contains(fullName)) {
				emit(privateSpacesListeners.get(dest),
					new SignalID(mID,participants.get(fullName), fullName)
				)[it.ID == dest]
				task("waitingfor".concat(fullName).concat(dest.toString)).cancel
			}
		]
	}
}
