/** 

 */
package be.uclouvain.aptitude.surveillance.platform

import be.uclouvain.aptitude.surveillance.Paraddis
import be.uclouvain.organisation.platform.PlatformCapacity
import be.uclouvain.organisation.platform.PlatformSkill
import be.uclouvain.organisation.platform.events.LocalDatabaseRequest
import be.uclouvain.organisation.platform.util.PlatformConfig
import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.InnerContextAccess
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import io.sarl.core.OpenEventSpace
import io.sarl.core.OpenEventSpaceSpecification
import java.util.UUID
import java.util.concurrent.atomic.AtomicReference

/**
 * 
 * 
 * @author $Author: manjahdani$
 * @version $0.0.1$
 * @date $31/03/2021$
 * @mavengroupid $be.uclouvain.aptitude$
 * @mavenartifactid $organisation$
 */

agent PlatformAgent extends Paraddis {

	uses Logging, Behaviors, InnerContextAccess, Lifecycle, DefaultContextInteractions

	 
	var openChanel : OpenEventSpace 
	val platformConfig : AtomicReference<PlatformConfig> = new AtomicReference<PlatformConfig>
	

	on Initialize {

		platformConfig.set(occurrence.parameters.get(0) as PlatformConfig)
		loggingName = this.ID + "-Platform-" + platformConfig.get.location + "-" + platformConfig.get.getLevel()
		
		for (swc : platformConfig.get.subPlatformConfig) {
			val randomID = UUID.randomUUID
			spawnInContextWithID(PlatformAgent, randomID, innerContext, swc)}
		if (platformConfig.get.getLevel > 0) {
			info("Ready to receive operating mission")
			openChanel = innerContext.getOrCreateSpaceWithID(OpenEventSpaceSpecification,UUID.randomUUID)
			openChanel.registerStrongParticipant(asEventListener)
			emitToParent(new AgentPlatform(platformConfig.get.location, this.ID, openChanel))
			setSkill(new PlatformSkill(platformConfig.get), PlatformCapacity)
			registerBehavior(new SurveillancePlatformRole(this), platformConfig.get.getLocation)
			emitToParent(new LocalDatabaseRequest(innerContext)) 
		} else {
			registerBehavior(new ManagerPlatformRole(this), platformConfig.get.getLocation, occurrence.parameters.get(1))
		}
	}
}
