/** 
 * 
 */
package be.uclouvain.aptitude.surveillance.platform

import be.uclouvain.organisation.platform.PlatformRole
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.OpenEventSpace
import java.util.HashMap
import be.uclouvain.organisation.LocalDatabaseRequest
import be.uclouvain.organisation.JoinPlatform
import java.util.UUID
import io.sarl.core.Logging

/** 
 * @TODO To complete
 * 
 */
behavior ManagerPlatformRole extends PlatformRole {
	
	uses DefaultContextInteractions, Logging

	val subPlatformsOpenSpaces = new HashMap<String, OpenEventSpace> // TreeMap of the sub-worlds composing the world. It is used to be able to communicate with other worlds
	val subPlatformsIDs = new HashMap<UUID,String>
	
	on AgentPlatform { // If it is not in the default, then it is in the InnerContext. That way we transmit the information to higher level while avoiding duplicate.
		if (!occurrence.isInDefaultSpace){
		subPlatformsIDs.put(occurrence.id, occurrence.name) // @FIXME maybe the best is that the sub-holons warns the parent.. 
		if (!subPlatformsOpenSpaces.containsKey(occurrence.name)) {
			subPlatformsOpenSpaces.put(occurrence.name, occurrence.topic)
			emit(new AgentPlatform(occurrence.name, occurrence.id, occurrence.topic))
		}
	}} // It is okay to send it to the Universe Context as it is omniscient

	on LocalDatabaseRequest {
		privateSpacesListeners.get(TOLDID).emit(this.ID,
			new JoinPlatform(occurrence.context, subPlatformsIDs.get(occurrence.source.UUID)))[it.UUID == TOLDID]
	}
}
